<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd">
    <changeSet author="yuzhanfeng" id="20231219" dbms="mysql" failOnError="true">
        <sql dbms="mysql">
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('完成所有任务道具', 1, '1234567', 'clear_all_quest', '立即生效，完成所有任务道具的id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('完成指定任务道具', 1, '1234567', 'api_force_clear_quest_list', '立即生效，完成指定任务的道具id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('指定任务id', 2, '123456,45678,78901', 'clear_quest_list', '立即生效，需要完成的指定任务id集合，英文逗号分隔', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('已接任务完成道具', 1, '1234567', 'clear_doing_quest', '立即生效，已接任务完成道具的id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('装备继承道具', 1, '1234567', 'equInherit', '立即生效，装备继承道具id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('装备跨界道具', 1, '1234567', 'crossover', '立即生效，装备跨界道具id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('装备分解道具', 1, '1234567', 'decompose', '立即生效，装备分解道具id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('魔法封印重置道具', 1, '1234567', 'ssfmfybh', '立即生效，魔法封印重置道具的id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('称号合成道具', 1, '1234567', 'chhcfun', '立即生效，称号合成道具id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('初阶异界重置道具', 1, '1234567', 'resetResetDimensionInout_1', '立即生效，初阶异界重置道具id', 0);
            INSERT INTO da_game_config (conf_name, conf_type, conf_data, conf_key, remark, is_system_conf) VALUES('高级异界重置道具', 1, '1234567', 'resetResetDimensionInout_2', '立即生效，高级异界重置道具id', 0);
        </sql>
    </changeSet>
    <changeSet author="yuzhanfeng" id="20231219-1" dbms="mysql" failOnError="true">
        <sql dbms="mysql">
            INSERT INTO da_frida_script (script_name, script_context, children_function, remark) VALUES('最新脚本20231219', '', 'da_frida_main', '最新脚本20231219');</sql>
    </changeSet>

    <changeSet author="yuzhanfeng" id="20231219-2" dbms="mysql" failOnError="true">
        <sql dbms="mysql">
            RENAME TABLE da_frida_function TO da_frida_function_bak_20231219;
            CREATE TABLE `da_frida_function` (
                                                 `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '编号',
                                                 `children_function` longtext COMMENT '依赖函数',
                                                 `function_name` varchar(32) DEFAULT NULL COMMENT '函数名',
                                                 `function_context` longtext COMMENT '函数内容',
                                                 `remark` varchar(256) DEFAULT NULL COMMENT '备注',
                                                 `function_key` varchar(64) NOT NULL COMMENT '函数唯一标识',
                                                 `is_system_fun` tinyint(1) DEFAULT '0' COMMENT '系统函数',
                                                 PRIMARY KEY (`id`),
                                                 UNIQUE KEY `da_frida_function_UN` (`function_key`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='frida函数信息';
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '服务端基础api函数', '', '服务端基础api函数', 'sever_base_funcation', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '读取本地文件', 'Ly9saW51eOivu+acrOWcsOaWh+S7tg0KdmFyIGZvcGVuID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKE1vZHVsZS5nZXRFeHBvcnRCeU5hbWUobnVsbCwgJ2ZvcGVuJyksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ICJhYmkiOiAic3lzdiIgfSk7DQp2YXIgZnJlYWQgPSBuZXcgTmF0aXZlRnVuY3Rpb24oTW9kdWxlLmdldEV4cG9ydEJ5TmFtZShudWxsLCAnZnJlYWQnKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCddLCB7ICJhYmkiOiAic3lzdiIgfSk7DQp2YXIgZmNsb3NlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKE1vZHVsZS5nZXRFeHBvcnRCeU5hbWUobnVsbCwgJ2ZjbG9zZScpLCAnaW50JywgWydpbnQnXSwgeyAiYWJpIjogInN5c3YiIH0pOw0KZnVuY3Rpb24gYXBpX3JlYWRfZmlsZShwYXRoLCBtb2RlLCBsZW4pIHsNCiAgICB2YXIgcGF0aF9wdHIgPSBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKHBhdGgpOw0KICAgIHZhciBtb2RlX3B0ciA9IE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcobW9kZSk7DQogICAgdmFyIGYgPSBmb3BlbihwYXRoX3B0ciwgbW9kZV9wdHIpOw0KICAgIGlmIChmID09IDApDQogICAgICAgIHJldHVybiBudWxsOw0KICAgIHZhciBkYXRhID0gTWVtb3J5LmFsbG9jKGxlbik7DQogICAgdmFyIGZyZWFkX3JldCA9IGZyZWFkKGRhdGEsIDEsIGxlbiwgZik7DQogICAgZmNsb3NlKGYpOw0KICAgIC8v6L+U5Zue5a2X56ym5LiyDQogICAgaWYgKG1vZGUgPT0gJ3InKQ0KICAgICAgICByZXR1cm4gZGF0YS5yZWFkVXRmOFN0cmluZyhmcmVhZF9yZXQpOw0KICAgIC8v6L+U5Zue5LqM6L+b5Yi2YnVmZuaMh+mSiA0KICAgIHJldHVybiBkYXRhOw0KfQ==', '读取本地文件,加载本地json配置文件依赖', 'read_local_file', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('read_local_file', '加载本地json配置文件', 'IA0KDQoNCi8v5Yqg6L295pys5Zyw6YWN572u5paH5Lu2KGpzb27moLzlvI8pDQp2YXIgZ2xvYmFsX2NoYW5uZWwgPSAnJzsNCnZhciBnbG9iYWxfY29uZmlnID0ge307DQpmdW5jdGlvbiBsb2FkX2NvbmZpZyhjaGFubmVsKSB7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+5Yqg6L29anNvbumFjee9ruaWh+S7tiIpDQogICAgZ2xvYmFsX2NoYW5uZWw9Y2hhbm5lbDsNCiAgICB2YXIgZGF0YSA9IGFwaV9yZWFkX2ZpbGUoJy9kYXRhL2ZyaWRhLycgKyBjaGFubmVsICsgJy9mcmlkYV9jb25mLmpzb24nLCAncicsIDEwICogMTAyNCAqIDEwMjQpOw0KICAgIGdsb2JhbF9jb25maWcgPSBKU09OLnBhcnNlKGRhdGEpOw0KfQ==', 'frida主函数依赖，读取dnf-admin配套的json配置文件', 'load_json_config', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('auto_unseal_random_option_equipment,cancel_epic_ok,disable_check_create_character_limit,enable_createCreator,hook_check_gm,Interceptor_InterSelectMobileAuthReward,load_json_config,Privatestore_IgnoreNearDungeon,setUserMaxLevel,share_seria_room,up_13_no_exit', '根据配置初始化相关功能', 'Ly/moLnmja7muLjmiI/phY3nva7mjqfliLbnm7jlhbPlip/og70NCg0KLy/moLnmja7phY3nva7liJ3lp4vljJbnm7jlhbPlip/og70JDQpmdW5jdGlvbiBpbml0Rm9yQ29uZmlnKCl7DQogICAgdmFyIGdhbWVfY29uZmlnID0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXTsNCiAgICBpZihnYW1lX2NvbmZpZ1snZW5hYmxlX2dhbWVfbWFzdGVyJ10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v5omA5pyJ6LSm5Y+36KeS6Imy5byA5ZCvR03mnYPpmZANCiAgICAgICAgaG9va19jaGVja19nbSgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snZGlzYWJsZV9jaGVja19jcmVhdGVfY2hhcmFjdGVyX2xpbWl0J10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v6Kej6Zmk5q+P5pel5Yib5bu66KeS6Imy5pWw6YeP6ZmQ5Yi2DQogICAgICAgIGRpc2FibGVfY2hlY2tfY3JlYXRlX2NoYXJhY3Rlcl9saW1pdCgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snc2hhcmVfc2VyaWFfcm9vbSddID09PSAndHJ1ZScpew0KICAgICAgICAvL+WFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingQ0KICAgICAgICBzaGFyZV9zZXJpYV9yb29tKCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydQcml2YXRlc3RvcmVfSWdub3JlTmVhckR1bmdlb24nXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgLy/lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoNCiAgICAgICAgUHJpdmF0ZXN0b3JlX0lnbm9yZU5lYXJEdW5nZW9uKCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydlbmFibGVfY3JlYXRvciddID09PSAndHJ1ZScpew0KICAgICAgICAvL+W8gOWQr+WIm+W7uue8lOmAoA0KICAgICAgICBlbmFibGVfY3JlYXRlQ3JlYXRvcigpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snY2FuY2VsX2VwaWNfb2snXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgLy/lj7Lor5flhY3noa7orqQNCiAgICAgICAgY2FuY2VsX2VwaWNfb2soKTsNCiAgICB9DQogICAgaWYoZ2FtZV9jb25maWdbJ2F1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50J10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v6a2U5rOV5bCB5Y2w6Ieq5Yqo6Kej5bCBDQogICAgICAgIGF1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50KCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydkaXNhYmxlX21vYmlsZV9yZXdhcmRzJ10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmDQogICAgICAgIEludGVyY2VwdG9yX0ludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snbWF4X2xldmVsJ10gPiAwKXsNCiAgICAgICAgLy/orr7nva7mnIDlpKfnrYnnuqcNCiAgICAgICAgc2V0TWF4VXBHcmFkZShnYW1lX2NvbmZpZ1snbWF4X2xldmVsJ10pOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snZW5oYW5jZW1lbnRfbGV2ZWxfMTNfbm9fZXhpdCddID09PSAndHJ1ZScpew0KICAgICAgICAvLysxM+S7peS4iuW8uuWMluWIuOaXoOmcgOWwj+mAgA0KICAgICAgICBlbmhhbmNlbWVudF9sZXZlbF8xM19ub19leGl0KCk7DQogICAgfQ0KICAgIA0KfQ==', '根据配置初始化相关功能', 'init_for_game_config', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', 'debug消息处理', 'DQovL+aJp+ihjGRlYnVn5raI5oGvDQpmdW5jdGlvbiBkZWJ1Z2ZyaWRhKGRlYnVnRGF0YSkgew0KICAgY29uc29sZS5sb2coIuaOpeaUtuWIsGRlYnVn5raI5oGvOiIrZGVidWdEYXRhKTsNCn0=', '调试frida', 'debug_message_handler', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config,send_mail_api,api_GameWorld_SendNotiPacketMessage', 'json类型消息处理', 'DQovLyBqc29u57G75Z6L55qE5raI5oGv5aSE55CGDQpmdW5jdGlvbiBleGVjSnNvbk1lc3NhZ2UocGFyYW1Kc29uKSB7DQogICAgY29uc29sZS5sb2coIuaOpeaUtuWIsGpzb27mtojmga86IitKU09OLnN0cmluZ2lmeShwYXJhbUpzb24pKTsNCiAgICAvL+WIt+aWsOmFjee9rg0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnZmx1c2hfY29uZicpew0KICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PiBmbHVzaF9jb25mIik7DQogICAgICAgIGxvYWRfY29uZmlnKGdsb2JhbF9jaGFubmVsKTsNCiAgICAgICAgaW5pdEZvckNvbmZpZygpOw0KICAgIH0NCiAgICAvL+WPkemAgemCruS7tg0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnc2VuZF9tYWlsJyl7DQogICAgICAgIHZhciBzZW5kTWFpbER0byA9IHBhcmFtSnNvbi5kYXRhOw0KICAgICAgICB2YXIgaXRlbUxpc3QgPSBzZW5kTWFpbER0by5pdGVtTGlzdDsNCiAgICAgICAgdmFyIG5ld0l0ZW1MaXN0ID0gW107DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbUxpc3QubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgICAgIHZhciB0ZW0gPSBbXTsNCiAgICAgICAgICAgIHRlbS5wdXNoKGl0ZW1MaXN0W2ldLml0ZW1JZCk7DQogICAgICAgICAgICB0ZW0ucHVzaChpdGVtTGlzdFtpXS5jb3VudCk7DQogICAgICAgICAgICBuZXdJdGVtTGlzdC5wdXNoKHRlbSk7DQogICAgICAgIH0NCiAgICAgICAgYXBpX1dvbmdXb3JrX0NNYWlsQm94SGVscGVyX1JlcURCU2VuZE5ld1N5c3RlbU11bHRpTWFpbChzZW5kTWFpbER0by5jaGFyYWNObyxzZW5kTWFpbER0by50aXRsZSxzZW5kTWFpbER0by5jb250ZW50LHNlbmRNYWlsRHRvLmdvbGQsbmV3SXRlbUxpc3QpOw0KICAgIH0NCiAgICAvL+WPkemAgeWFrOWRig0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnc2VuZF9ub3RpY2UnKXsNCiAgICAgICAgdmFyIG1lc3NhZ2UgPSBwYXJhbUpzb24uZGF0YTsNCiAgICAgICAgcHVzaFNlbmROb3RpUGFja2V0TWVzc2FnZShtZXNzYWdlLDE2KTsNCiAgICB9DQp9', 'json消息处理函数', 'json_message_exec', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '非json类型消息处理', 'DQovLyDpnZ5qc29u5qC85byP55qE5raI5oGv5aSE55CG6YC76L6RDQpmdW5jdGlvbiBleGVjTm9Kc29uTWVzc2FnZShtZXNzYWdlU3RyKSB7DQogIGNvbnNvbGUubG9nKCLmjqXmlLbliLDpnZ5qc29u5raI5oGvOiIrIG1lc3NhZ2VTdHIpOw0KfQ==', '非json消息处理函数	', 'no_json_message_exec', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '所有账号角色开启GM权限', 'Ly/miYDmnInotKblj7fop5LoibLlvIDlkK9HTeadg+mZkA0KZnVuY3Rpb24gaG9va19jaGVja19nbSgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lvIDlkK9HTeadg+mZkCIpDQogICAgLy9HTei0puaItw0KICAgIC8vV29uZ1dvcms6OkNHTUFjY291bnRzOjppc0dNDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDgxMDkzNDYpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/lvLrliLbov5Tlm550cnVlDQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KDQogICAgLy9HTeinkuiJsg0KICAgIC8vQ1VzZXI6OmlzR01Vc2VyDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDgxNDU4OUMpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/lvLrliLbov5Tlm550cnVlDQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '所有账号角色开启GM权限', 'hook_check_gm', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '解除每日创建角色数量限制', 'DQovL+ino+mZpOavj+aXpeWIm+W7uuinkuiJsuaVsOmHj+mZkOWItg0KZnVuY3Rpb24gZGlzYWJsZV9jaGVja19jcmVhdGVfY2hhcmFjdGVyX2xpbWl0KCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09Puino+mZpOavj+aXpeWIm+W7uuinkuiJsuaVsOmHj+mZkOWItiIpDQogICAgLy9EQl9DcmVhdGVDaGFyYWM6OkNoZWNrTGltaXRDcmVhdGVOZXdDaGFyYWMNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODQwMTkyMiksIHsNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/lvLrliLbov5Tlm57lhYHorrjliJvlu7oNCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDEpOw0KICAgICAgICB9DQogICAgfSk7DQp9', '解除每日创建角色数量限制', 'disable_check_create_character_limit', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '允许赛利亚房间的人互相可见', 'DQovL+WFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingQ0KZnVuY3Rpb24gc2hhcmVfc2VyaWFfcm9vbSgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lhYHorrjotZvliKnkuprmiL/pl7TnmoTkurrkupLnm7jlj6/op4EiKQ0KICAgIC8vSG9vayBBcmVhOjppbnNlcnRfdXNlcg0KICAgIEludGVyY2VwdG9yLmF0dGFjaChwdHIoMHg4NkMyNUE2KSwgew0KDQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICAvL+S/ruaUueagh+W/l+S9jSwg6K6p5pyN5Yqh5Zmo5bm/5pKt6LWb5Yip5Lqa5peF6aaG5raI5oGvDQogICAgICAgICAgICBhcmdzWzBdLmFkZCgweDY4KS53cml0ZUludCgwKTsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICB9DQogICAgfSk7DQp9', '允许赛利亚房间的人互相可见', 'share_seria_room', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '忽略副本门口禁止摆摊', 'Ly/lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoNCmZ1bmN0aW9uIFByaXZhdGVzdG9yZV9JZ25vcmVOZWFyRHVuZ2VvbigpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoiKQ0KICAgIEludGVyY2VwdG9yLmF0dGFjaChwdHIoMHgwODVDNTA4MiksIHsNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/ojrflj5bov5Tlm57lgLwNCiAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHJldHZhbC50b0ludDMyKCk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygnUmV0dXJuIFZhbHVlOicgKyByZXR1cm5WYWx1ZSk7DQogICAgICAgICAgICAvL+W8uuWItui/lOWbnjENCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDEpOw0KICAgICAgICB9DQogICAgfSk7DQp9', '忽略副本门口禁止摆摊', 'Privatestore_IgnoreNearDungeon', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config', '客户端临时提升技能等级', 'Ly/lrqLmiLfnq6/kuLTml7bmj5DljYfmioDog73nrYnnuqcNCg0KSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2NkM0NkEpLCB7DQogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgLy/op5LoibLmioDog73kv6Hmga8NCiAgICAgICAgdGhpcy5za2lsbF9wdHIgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxSKGFyZ3NbMF0pOw0KICAgICAgICAvL+S/neWtmOWOn+Wni+aKgOiDveS/oeaBrw0KICAgICAgICB0aGlzLm9sZF9za2lsbF9pbmZvID0gdGhpcy5za2lsbF9wdHIucmVhZEJ5dGVBcnJheSgyMDMgKiAzMik7DQogICAgICAgIGlmIChnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydza2lsbFVwZ3JhZGluZyddID4gMCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+5a6i5oi356uv5Li05pe25o+Q5Y2H5oqA6IO9562J57qnIiArICc9PT4nICsgZ2FtZV9jb25maWdbJ3NraWxsVXBncmFkaW5nJ10pDQogICAgICAgICAgICAvL+S4tOaXtuS/ruaUueaKgOiDveetiee6pw0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMjAzOyArK2kpIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2lsbF9wdHIuYWRkKDIgKiAoaSArIDMyKSArIDYpLnJlYWRVOCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBvbGRfc2tpbGxfbGV2ZWwgPSB0aGlzLnNraWxsX3B0ci5hZGQoMiAqIChpICsgMzIpICsgNykucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIC8v5omA5pyJ5oqA6IO9562J57qnKzUNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lsbF9wdHIuYWRkKDIgKiAoaSArIDMyKSArIDcpLndyaXRlVTgob2xkX3NraWxsX2xldmVsICsgNSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfSwNCiAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgIC8v6L+Y5Y6f5oqA6IO9562J57qnDQogICAgICAgIHRoaXMuc2tpbGxfcHRyLndyaXRlQnl0ZUFycmF5KHRoaXMub2xkX3NraWxsX2luZm8pOw0KICAgIH0NCn0pOw0K', '客户端临时提升技能等级', 'skillUpgrading', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '取消新账号送成长契约', 'Ly/lj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYNCmZ1bmN0aW9uIEludGVyY2VwdG9yX0ludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYiKQ0KICAgIC8v6L+Y5Y6fIEludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZDo6ZGlzcGF0Y2hfc2lnIOWHveaVsA0KICAgIHZhciBEZWZwdHIgPSBwdHIoMHgwODE2MTM4NCk7DQogICAgdmFyIHZhbHVlID0gRGVmcHRyLnJlYWRVOCgpDQogICAgaWYgKHZhbHVlICE9IDB4MEYpIHsNCg0KICAgICAgICBNZW1vcnkucHJvdGVjdChEZWZwdHIsIDEwLCAncnd4Jyk7DQogICAgICAgIERlZnB0ci53cml0ZVNob3J0KDB4ODQwRik7DQogICAgfQ0KICAgIC8v6YeN5YaZSW50ZXJTZWxlY3RNb2JpbGVBdXRoUmV3YXJkOjpkaXNwYXRjaF9zaWcg5Ye95pWwDQogICAgdmFyIEludGVyX0Rpc3BhdGNoUHIgPSBwdHIoMHgwODE2MTMyQSk7DQogICAgdmFyIEludGVyX0Rpc3BhdGNoID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKEludGVyX0Rpc3BhdGNoUHIsICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsgImFiaSI6ICJzeXN2IiB9KTsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKEludGVyX0Rpc3BhdGNoUHIsIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAoSW50ZXJTZWxlY3RNb2JpbGVBdXRoUmV3YXJkLCBDVXNlciwgYTMpIHsNCg0KICAgICAgICAvL3ZhciBJbnRlcl9EaXNwYXRjaE9wZW4gPSB0cnVlOw0KICAgICAgICB2YXIgSW50ZXJfRGlzcGF0Y2hPcGVuID0gZmFsc2U7DQogICAgICAgIGlmIChJbnRlcl9EaXNwYXRjaE9wZW4pIHsNCg0KICAgICAgICAgICAgYTMuYWRkKDQpLndyaXRlSW50KDApOw0KICAgICAgICAgICAgcmV0dXJuIEludGVyX0Rpc3BhdGNoKEludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCwgQ1VzZXIsIGEzKTsgLy/miafooYzljp/lh73mlbDlj5HpgIHmiJDplb/lpZHnuqYNCg0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIDA7IC8v5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmICAgIOi/lOWbnjDooajnpLrmraPluLjov5Tlm54gDQoNCiAgICB9LCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddKSk7DQp9', '取消新账号送成长契约', 'Interceptor_InterSelectMobileAuthReward', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('api_GameWorld_SendNotiPacketMessage,api_recharge_cash_cera_point,sever_base_funcation,load_json_config', '副本捡东西喊喇叭给点券', 'Ly/lia/mnKzmjaHkuJzopb/llorlloflj63nu5nngrnliLgNCiANCi8v5Ymv5pys5o2h5Lic6KW/5ZaK5ZaH5Y+t57uZ54K55Yi4DQpmdW5jdGlvbiBwcm9jZXNzaW5nX2RhdGEoaXRlbV9pZCwgdXNlcikgew0KICAgIGlmIChnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkdW5nZW9uc19hZGRfaXRlbV9ub3RpY2UnXSA9PT0gJ3RydWUnKSB7DQogICAgICAgIHZhciBpdGVtRGF0YSA9IENEYXRhTWFuYWdlcl9maW5kX2l0ZW0oR19DRGF0YU1hbmFnZXIoKSwgaXRlbV9pZCk7DQogICAgICAgIHZhciBlcXVSYXJpdHkgPSBDSXRlbV9HZXRSYXJpdHkoaXRlbURhdGEpOyAvLyDnqIDmnInluqYgID49MyDnsonoibLku6XkuIoNCiAgICAgICAgLy/lpJrlsJHnqIDmnInluqbmiY3kvJrop6blj5ENCiAgICAgICAgaWYgKGVxdVJhcml0eSA+PSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkdW5nZW9uc19hZGRfaXRlbV9ub3RpY2VfZXF1UmFyaXR5J10pIHsNCiAgICAgICAgICAgIHZhciBjaGFyYWNOYW1lID0gYXBpX0NVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNOYW1lKHVzZXIpOw0KICAgICAgICAgICAgY29uc3QgaXRlbU5hbWUgPSBhcGlfQ0l0ZW1fR2V0SXRlbU5hbWUoaXRlbV9pZCk7DQogICAgICAgICAgICAvL+aSreaKpeWGheWuuQ0KICAgICAgICAgICAgdmFyIHRleHQgPSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkdW5nZW9uc19hZGRfaXRlbV9ub3RpY2VfdGV4dCddOw0KICAgICAgICAgICAgLy/lpZblirHngrnliLjmlrnlvI8NCiAgICAgICAgICAgIHZhciB0eXBlID0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnZHVuZ2VvbnNfYWRkX2l0ZW1fbm90aWNlX2Nhc2hfY2VyYSddOw0KICAgICAgICAgICAgaWYgKHR5cGUgPT0gMCkgew0KICAgICAgICAgICAgICAgIC8v5Y+q5pKt5oql5LiN5aWW5Yqx54K55Yi4DQogICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgiPzEiLCBjaGFyYWNOYW1lKS5yZXBsYWNlKCI/MiIsIGl0ZW1OYW1lKS5yZXBsYWNlKCI/MyIsIHR5cGUpOw0KICAgICAgICAgICAgICAgIGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHRleHQsIDE0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0eXBlID09IDEpIHsNCiAgICAgICAgICAgICAgICAvL+WlluWKsemaj+acuueCueWIuA0KICAgICAgICAgICAgICAgIGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHRleHQsIDE0KTsNCiAgICAgICAgICAgICAgICAvL+acgOWwj+eCueWIuOaVsOmHjw0KICAgICAgICAgICAgICAgIHZhciBtaW4gPSAxOw0KICAgICAgICAgICAgICAgIC8v5pyA5aSn54K55Yi45pWw6YePDQogICAgICAgICAgICAgICAgdmFyIG1heCA9IDg4ODsNCiAgICAgICAgICAgICAgICB0eXBlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluOw0KICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoIj8xIiwgY2hhcmFjTmFtZSkucmVwbGFjZSgiPzIiLCBpdGVtTmFtZSkucmVwbGFjZSgiPzMiLCB0eXBlKTsNCiAgICAgICAgICAgICAgICBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIHR5cGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHR5cGUgPiAxKSB7DQogICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgiPzEiLCBjaGFyYWNOYW1lKS5yZXBsYWNlKCI/MiIsIGl0ZW1OYW1lKS5yZXBsYWNlKCI/MyIsIHR5cGUpOw0KICAgICAgICAgICAgICAgIC8v5aWW5Yqx6K6+572u55qE54K55Yi45pWw6YePDQogICAgICAgICAgICAgICAgYXBpX0dhbWVXb3JsZF9TZW5kTm90aVBhY2tldE1lc3NhZ2UodGV4dCwgMTQpOw0KICAgICAgICAgICAgICAgIGFwaV9yZWNoYXJnZV9jYXNoX2NlcmEodXNlciwgdHlwZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgfQ0KICAgIENVc2VyX3NlbmRfaXRlbXNwYWNlKHVzZXIsIElOVkVOVE9SWV9UWVBFX0lURU0pOw0KfSAg', '副本捡东西喊喇叭给点券', 'processing_data', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '修复绝望之塔', 'DQovL+S/ruWkjee7neacm+S5i+WhlA0KLy9za2lwX3VzZXJfYXBjOiDkuLp0cnVl5pe2LCDot7Pov4fmr48xMOWxgueahFVzZXJBUEMNCmZ1bmN0aW9uIGZpeF9UT0Qoc2tpcF91c2VyX2FwYykgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuS/ruWkjee7neacm+S5i+WhlCIpDQogICAgLy/mr4/ml6Xov5vlhaXmrKHmlbDpmZDliLYNCiAgICAvL1RPRF9Vc2VyU3RhdGU6OmdldEVudGVyQ291bnQNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDg2NDM4NzIpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIC8v5LuK5pel5bey6L+b5YWl5qyh5pWw5by65Yi25riF6Zu2DQogICAgICAgICAgICBhcmdzWzBdLmFkZCgweDEwKS53cml0ZUludCgwKTsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICB9DQogICAgfSk7DQoNCiAgICAvL+avjzEw5bGC5oyR5oiY546p5a62QVBDIOacjeWKoeWZqOWGheinkuiJsuS4jei2szEw5Liq5peg5rOV6L+b5YWlDQogICAgaWYgKHNraXBfdXNlcl9hcGMpIHsNCiAgICAgICAgLy/ot7Pov4cxMC8yMC8uLi4vOTDlsYINCiAgICAgICAgLy9UT0RfVXNlclN0YXRlOjpnZXRUb2RheUVudGVyTGF5ZXINCiAgICAgICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4NjQzODNFKSwgew0KDQogICAgICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICAgICAgICAgIC8v57ud5pyb5LmL5aGU5b2T5YmN5bGC5pWwDQogICAgICAgICAgICAgICAgdmFyIHRvZGF5X2VudGVyX2xheWVyID0gYXJnc1sxXS5hZGQoMHgxNCkucmVhZFNob3J0KCk7DQoNCiAgICAgICAgICAgICAgICBpZiAoKCh0b2RheV9lbnRlcl9sYXllciAlIDEwKSA9PSA5KSAmJiAodG9kYXlfZW50ZXJfbGF5ZXIgPiAwKSAmJiAodG9kYXlfZW50ZXJfbGF5ZXIgPCAxMDApKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5b2T5YmN5bGC5pWw5Li6MTDnmoTlgI3mlbDml7YgIOebtOaOpei/m+WFpeS4i+S4gOWxgg0KICAgICAgICAgICAgICAgICAgICBhcmdzWzFdLmFkZCgweDE0KS53cml0ZVNob3J0KHRvZGF5X2VudGVyX2xheWVyICsgMSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCg0KICAgIC8v5L+u5aSN6YeR5biB5byC5bi4DQogICAgLy9DUGFydHk6OlVzZUFuY2llbnREdW5nZW9uSXRlbXMNCiAgICB2YXIgQ1BhcnR5X1VzZUFuY2llbnREdW5nZW9uSXRlbXNfcHRyID0gcHRyKDB4ODU5RUFDMik7DQogICAgdmFyIENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zX3B0ciwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ICJhYmkiOiAic3lzdiIgfSk7DQogICAgSW50ZXJjZXB0b3IucmVwbGFjZShDUGFydHlfVXNlQW5jaWVudER1bmdlb25JdGVtc19wdHIsIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAocGFydHksIGR1bmdlb24sIGludmVuX2l0ZW0sIGE0KSB7DQoNCiAgICAgICAgLy/lvZPliY3ov5vlhaXnmoTlnLDkuIvln45pZA0KICAgICAgICB2YXIgZHVuZ2Vvbl9pbmRleCA9IENEdW5nZW9uX2dldF9pbmRleChkdW5nZW9uKTsNCg0KICAgICAgICAvL+agueaNruWcsOS4i+Wfjmlk5Yik5pat5piv5ZCm5Li657ud5pyb5LmL5aGUDQogICAgICAgIGlmICgoZHVuZ2Vvbl9pbmRleCA+PSAxMTAwOCkgJiYgKGR1bmdlb25faW5kZXggPD0gMTExMDcpKSB7DQogICAgICAgICAgICAvL+e7neacm+S5i+WhlCDkuI3lho3miaPpmaTph5HluIENCiAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICB9DQoNCiAgICAgICAgLy/lhbbku5blia/mnKzmiafooYzljp/lp4vmiaPpmaTpgZPlhbfpgLvovpENCiAgICAgICAgcmV0dXJuIENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zKHBhcnR5LCBkdW5nZW9uLCBpbnZlbl9pdGVtLCBhNCk7DQogICAgfSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddKSk7DQp9', '修复绝望之塔', 'fix_TOD', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '史诗免确认', 'Ly/lj7Lor5flhY3noa7orqQNCmZ1bmN0aW9uIGNhbmNlbF9lcGljX29rKCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlj7Lor5flhY3noa7orqQiKQ0KICAgIE1lbW9yeS5wYXRjaENvZGUocHRyKDB4MDg1QTU2Q0UpLmFkZCgyKSwgMSwgZnVuY3Rpb24gKGNvZGUpIHsNCiAgICAgICAgdmFyIGN3ID0gbmV3IFg4NldyaXRlcihjb2RlLCB7IHBjOiBwdHIoMHgwODVBNTZDRSkuYWRkKDIpIH0pOw0KICAgICAgICBjdy5wdXRVOCg5KTsNCiAgICAgICAgY3cuZmx1c2goKTsNCiAgICB9KTsNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDgxNTBmMTgpLCB7DQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDApOw0KICAgICAgICB9DQogICAgfSk7DQp9', '史诗免确认', 'cancel_epic_ok', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '开启创建缔造', 'Ly/lvIDlkK/liJvlu7rnvJTpgKANCmZ1bmN0aW9uIGVuYWJsZV9jcmVhdGVDcmVhdG9yKCl7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+IOW8gOWQr+WIm+W7uue8lOmAoCIpDQogICAgTWVtb3J5LnBhdGNoQ29kZShwdHIoMHgwODFDMDI5RSkuYWRkKDEpLCAxLCBmdW5jdGlvbiAoY29kZSkgew0KICAgICAgICB2YXIgY3cgPSBuZXcgWDg2V3JpdGVyKGNvZGUsIHsgcGM6IHB0cigweDA4MUMwMjlFKS5hZGQoMSkgfSk7DQogICAgICAgIGN3LnB1dFU4KDExKTsNCiAgICAgICAgY3cuZmx1c2goKTsNCiAgICB9KTsNCn0=', '开启创建缔造', 'enable_createCreator', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config', '强制开启深渊模式', 'IC8v5byA5ZCv5rex5riK5qih5byPDQpJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDg1YTA5NTQpLCB7DQogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgaWYgKGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ3N0YXJ0SGVsbFBhcnR5J10gPT09ICd0cnVlJykgew0KICAgICAgICAgICAgYXJnc1szXSA9IHB0cigxKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlvLrliLblvIDlkK/mt7HmuIrmqKHlvI8iKQ0KICAgICAgICB9DQogICAgfQ0KfSk7DQo=', '强制开启深渊模式', 'startHellParty', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '+13以上强化券无需小退', 'Ly8rMTPku6XkuIrlvLrljJbliLjml6DpnIDlsI/pgIANCg0KZnVuY3Rpb24gZW5oYW5jZW1lbnRfbGV2ZWxfMTNfbm9fZXhpdCgpIHsNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDgwRkM4NTApLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB0aGlzLmVxdWlQb3MgPSBhcmdzWzJdLmFkZCgyNykucmVhZFUxNigpOw0KICAgICAgICAgICAgdGhpcy51c2VyID0gYXJnc1sxXTsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHRoaXMudXNlciwgMSwgMCwgdGhpcy5lcXVpUG9zKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '+13以上强化券无需小退', 'up_13_no_exit', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation,setMaxCAccountCargoSolt', '装备跨界', 'DQovKioNCiAqIOi3qOeVjOefs++8miDlsIboo4XlpIfmoI/nmoTnrKzkuIDkuKrmoLzlrZDnmoToo4XlpIfnp7vlhaXliLDotKblj7fph5HlupPvvIzoh6rliqjmib7nqbrnmoTmoLzlrZDvvIzmiYDku6Xlj6/ku6XlkIzml7bnp7vlhaXlpJrku7YNCiAqIEBwYXJhbSB1c2VyDQogKi8NCmZ1bmN0aW9uIGNyb3Nzb3Zlcih1c2VyKXsNCiAgICAvLyDot6jnlYwgIOWwhuijheWkh+enu+WFpeWIsOi0puWPt+mHkeW6kw0KICAgIHZhciBhY2NvdW50Q2FyZ28gPSBDVXNlcl9HZXRBY2NvdW50Q2FyZ28odXNlcik7DQogICAgY29uc29sZS5sb2coJ2FjY291bnRDYXJnb++8micrYWNjb3VudENhcmdvKTsNCiAgICB2YXIgZW1wdHlJbmRleCA9IENBY2NvdW50Q2FyZ29fR2V0RW1wdHlTbG90X05FVyhhY2NvdW50Q2FyZ28pOw0KICAgIGNvbnNvbGUubG9nKCdhY2NvdW50Q2FyZ28gZW1wdHlJbmRleDonK2VtcHR5SW5kZXgpDQogICAgaWYoZW1wdHlJbmRleD09LTEpew0KICAgICAgICBhcGlfQ1VzZXJfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHVzZXIsIui3qOeVjOWksei0pe+8mui0puWPt+mHkeW6k+ayoeacieepuueahOagvOWtkO+8ge+8ge+8gSIsMCk7DQogICAgfQ0KICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQogICAgdmFyIGVxdSA9IENJbnZlbnRvcnlfR2V0SW52ZW5SZWYoaW52ZW4sIElOVkVOVE9SWV9UWVBFX0lURU0sIDkpOw0KICAgIHZhciBpdGVtSWQgPSBJbnZlbl9JdGVtX2dldEtleShlcXUpOw0KICAgIGlmKGl0ZW1JZCl7DQogICAgICAgIHZhciB0YWcgPSBDQWNjb3VudENhcmdvX0luc2VydEl0ZW1fTkVXKGFjY291bnRDYXJnbyxlcXUsZW1wdHlJbmRleCk7DQogICAgICAgIGlmKHRhZz09LTEpew0KICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZhaWwhISEnKTsNCiAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi6Leo55WM5aSx6LSl77ya56e75YWl6KOF5aSHZXJyb3IiLDApOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIEludmVuX0l0ZW1fcmVzZXQoZXF1KTsNCiAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCA5KTsNCiAgICAgICAgICAgIENBY2NvdW50Q2FyZ29fU2VuZEl0ZW1MaXN0X05FVyhhY2NvdW50Q2FyZ28pOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MhISEnKTsNCiAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi6Leo55WM5oiQ5Yqf77ya5bey5a2Y5YWl56ysICIrKGVtcHR5SW5kZXgrMSkrIiDkuKrmoLzlrZDvvIEiLDApOw0KICAgICAgICB9DQogICAgfQ0KfQ==', '将装备栏的第一个格子的装备移入到账号金库，自动找空的格子，所以可以同时移入多件', 'crossover', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '设置最大等级', '', '设置最大等级', 'setUserMaxLevel', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('api_GameWorld_SendNotiPacketMessage,sever_base_funcation,load_json_config', '角色登入登出处理', 'Ly/op5LoibLnmbvlhaXnmbvlh7rlpITnkIYNCiANCi8v6KeS6Imy55m75YWl55m75Ye65aSE55CGDQpmdW5jdGlvbiBob29rX3VzZXJfaW5vdXRfZ2FtZV93b3JsZCgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g5byA5ZCv6KeS6Imy55m75YWl55m75Ye65aSE55CGIik7DQogICAgLy/pgInmi6nop5LoibLlpITnkIblh73mlbAgSG9vayBHYW1lV29ybGQ6OnJlYWNoX2dhbWVfd29ybGQNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODZDNEU1MCksIHsNCiAgICAgICAgLy/lh73mlbDlhaXlj6MsIOaLv+WIsOWHveaVsOWPguaVsGFyZ3MNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIC8v5L+d5a2Y5Ye95pWw5Y+C5pWwDQogICAgICAgICAgICB0aGlzLnVzZXIgPSBhcmdzWzFdOyAgICAgICAgICANCiAgICAgICAgICAgIHZhciBjaGFyYWNfbm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTm8odGhpcy51c2VyKTsNCiAgICAgICAgICAgIHZhciBjaGFyYWNfTmFtZSA9IGFwaV9DVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTmFtZSh0aGlzLnVzZXIpOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ+inkuiJsjwnK2NoYXJhY19OYW1lKyc6JytjaGFyYWNfbm8rJz7nmbvlvZXmuLjmiI8nKTsNCiAgICAgICAgICAgIHZhciBnYW1lX2NvbmZpZyA9IGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ107DQogICAgICAgICAgICBpZihnYW1lX2NvbmZpZ1snZW5hYmxlX3VzZXJfbG9naW5fd2VsY29tZSddID09PSAndHJ1ZScpew0KICAgICAgICAgICAgIC8v57uZ6KeS6Imy5Y+R5raI5oGv6Zeu5YCZDQogICAgICAgICAgICAgYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh0aGlzLnVzZXIsIGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9sb2dpbl93ZWxjb21lX3RleHQnXS5yZXBsYWNlKCclcycsIGNoYXJhY19OYW1lKSwgMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvL+mikemBk+WFrOWRig0KICAgICAgICAgICAgaWYoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2xvZ2luX25vdGljZSddID09PSAndHJ1ZScpew0KICAgICAgICAgICAgIHB1c2hTZW5kTm90aVBhY2tldE1lc3NhZ2UoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2xvZ2luX25vdGljZV90ZXh0J10ucmVwbGFjZSgnJXMnLCBjaGFyYWNfTmFtZSksMTYpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdmFyIHVzZXJEdG89ew0KICAgICAgICAgICAgICAgICd0eXBlJzonZ2FtZV91c2VyX2xvZ2luJywNCiAgICAgICAgICAgICAgICAnZGF0YSc6IGNoYXJhY19ubw0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIHNlbmQoSlNPTi5zdHJpbmdpZnkodXNlckR0bykpOw0KICAgICAgICB9LA0KICAgICAgICAvL+WOn+WHveaVsOaJp+ihjOWujOavlSwg6L+Z6YeM5Y+v5Lul5b6X5Yiw5bm25L+u5pS56L+U5Zue5YC8cmV0dmFsDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgfQ0KICAgIH0pOw0KDQogICAgLy/op5LoibLpgIDlh7rml7blpITnkIblh73mlbAgSG9vayBHYW1lV29ybGQ6OmxlYXZlX2dhbWVfd29ybGQNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODZDNTI4OCksIHsNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIHZhciB1c2VyID0gYXJnc1sxXTsNCiAgICAgICAgICAgIHRoaXMudXNlciA9IHVzZXI7DQogICAgICAgIH0NCiAgICB9KTsNCiAgICAvL+inkuiJsumAgOWHuuaXtuWkhOeQhuWHveaVsCBIb29rIENHYW1lTWFuYWdlcjo6dXNlcl9leGl0DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4Mjk4NWE4KSwgew0KDQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB2YXIgdXNlciA9IGFyZ3NbMV07DQogICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19ubyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNObyh0aGlzLnVzZXIpOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19OYW1lID0gYXBpX0NVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNOYW1lKHRoaXMudXNlcik7DQogICAgICAgICAgICBjb25zb2xlLmxvZygn6KeS6ImyPCcrY2hhcmFjX05hbWUrJzonK2NoYXJhY19ubysnPumAgOWHuua4uOaIjycpOw0KICAgICAgICAgICAgLy/popHpgZPlhazlkYoNCiAgICAgICAgICAgIGlmKGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9leGl0X25vdGljZSddID09PSAndHJ1ZScpew0KICAgICAgICAgICAgIHB1c2hTZW5kTm90aVBhY2tldE1lc3NhZ2UoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2V4aXRfbm90aWNlX3RleHQnXS5yZXBsYWNlKCclcycsIGNoYXJhY19OYW1lKSwxNik7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIC8vIHZhciBhY2NJZCA9IENVc2VyX2dldF9hY2NfaWQodGhpcy51c2VyKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '角色登入登出处理', 'hook_user_inout_game_world', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '魔法封印自动解封', 'Ly/prZTms5XlsIHljbDoh6rliqjop6PlsIENCmZ1bmN0aW9uIGF1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50KCkgew0KICAgIC8vQ0ludmVudG9yeTo6aW5zZXJ0SXRlbUludG9JbnZlbnRvcnkNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g6a2U5rOV5bCB5Y2w6Ieq5Yqo6Kej5bCBIik7DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg1MDJEODYpLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB0aGlzLnVzZXIgPSBhcmdzWzBdLnJlYWRQb2ludGVyKCk7DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCg0KICAgICAgICAgICAgLy/nianlk4HmoI/mlrDlop7nianlk4HnmoTkvY3nva4NCiAgICAgICAgICAgIHZhciBzbG90ID0gcmV0dmFsLnRvSW50MzIoKTsNCiAgICAgICAgICAgIGlmIChzbG90ID4gMCkgew0KICAgICAgICAgICAgICAgIC8v6I635Y+W6YGT5YW355qE6KeS6ImyDQogICAgICAgICAgICAgICAgdmFyIHVzZXIgPSB0aGlzLnVzZXI7DQoNCiAgICAgICAgICAgICAgICAvL+inkuiJsuiDjOWMhQ0KICAgICAgICAgICAgICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQoNCiAgICAgICAgICAgICAgICAvL+iDjOWMheS4reaWsOWinueahOmBk+WFtw0KICAgICAgICAgICAgICAgIHZhciBpbnZlbl9pdGVtID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgc2xvdCk7DQoNCiAgICAgICAgICAgICAgICAvL+i/h+a7pOmBk+WFt+exu+Weiw0KICAgICAgICAgICAgICAgIGlmICghSW52ZW5fSXRlbV9pc0VxdWlwYWJsZUl0ZW1UeXBlKGludmVuX2l0ZW0pKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQoNCiAgICAgICAgICAgICAgICAvL+ijheWkh2lkDQogICAgICAgICAgICAgICAgdmFyIGl0ZW1faWQgPSBJbnZlbl9JdGVtX2dldEtleShpbnZlbl9pdGVtKTsNCg0KICAgICAgICAgICAgICAgIC8vcHZm5Lit6I635Y+W6KOF5aSH5pWw5o2uDQogICAgICAgICAgICAgICAgdmFyIGNpdGVtID0gQ0RhdGFNYW5hZ2VyX2ZpbmRfaXRlbShHX0NEYXRhTWFuYWdlcigpLCBpdGVtX2lkKTsNCg0KICAgICAgICAgICAgICAgIC8v5qOA5p+l6KOF5aSH5piv5ZCm5Li66a2U5rOV5bCB5Y2w57G75Z6LDQogICAgICAgICAgICAgICAgaWYgKCFDRXF1aXBJdGVtX0lzUmFuZG9tT3B0aW9uKGNpdGVtKSkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAgICAgLy/mmK/lkKblt7Looqvop6PpmaTprZTms5XlsIHljbDvvIjprZTms5XlsIHljbDliY0xMOS4quWtl+iKguaYr+WQpuS4ujDvvIkNCiAgICAgICAgICAgICAgICB2YXIgcmFuZG9tX29wdGlvbiA9IGludmVuX2l0ZW0uYWRkKDM3KTsNCiAgICAgICAgICAgICAgICBpZiAocmFuZG9tX29wdGlvbi5yZWFkVTMyKCkgfHwgcmFuZG9tX29wdGlvbi5hZGQoNCkucmVhZFUzMigpIHx8IHJhbmRvbV9vcHRpb24uYWRkKDgpLnJlYWRTaG9ydCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvL+Wwneivleino+mZpOmtlOazleWwgeWNsA0KICAgICAgICAgICAgICAgIHZhciByZXQgPSByYW5kb21fb3B0aW9uX0NSYW5kb21PcHRpb25JdGVtSGFuZGxlX2dpdmVfb3B0aW9uKHB0cigweDk0MUY4MjApLnJlYWRQb2ludGVyKCksIGl0ZW1faWQsIENJdGVtX0dldFJhcml0eShjaXRlbSksIENJdGVtX0dldFVzYWJsZUxldmVsKGNpdGVtKQ0KICAgICAgICAgICAgICAgICAgICAsIENJdGVtX0dldEl0ZW1Hcm91cE5hbWUoY2l0ZW0pLCBDRXF1aXBJdGVtX0dldFJhbmRvbU9wdGlvbkdyYWRlKGNpdGVtKSwgaW52ZW5faXRlbS5hZGQoMzcpKTsNCiAgICAgICAgICAgICAgICBpZiAocmV0KSB7DQogICAgICAgICAgICAgICAgICAgIC8v6YCa55+l5a6i5oi356uv5pyJ6KOF5aSH5pu05pawDQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCBzbG90KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCn0=', '魔法封印自动解封', 'auto_unseal_random_option_equipment', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '发送邮件', 'DQoNCg0KLy/lj5Hns7vnu5/pgq7ku7Yo5aSa6YGT5YW3KSjop5LoibJjaGFyYWNfbm8sIOmCruS7tuagh+mimCwg6YKu5Lu25q2j5paHLCDph5HluIHmlbDph48sIOmBk+WFt+WIl+ihqCkNCmZ1bmN0aW9uIGFwaV9Xb25nV29ya19DTWFpbEJveEhlbHBlcl9SZXFEQlNlbmROZXdTeXN0ZW1NdWx0aU1haWwodGFyZ2V0X2NoYXJhY19ubywgdGl0bGUsIHRleHQsIGdvbGQsIGl0ZW1fbGlzdCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlj5Hns7vnu5/pgq7ku7Yo5aSa6YGT5YW3KSIpDQogICAgLy/mt7vliqDpgZPlhbfpmYTku7YNCiAgICB2YXIgdmVjdG9yID0gTWVtb3J5LmFsbG9jKDEwMCk7DQogICAgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X3ZlY3Rvcih2ZWN0b3IpOw0KICAgIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9jbGVhcih2ZWN0b3IpOw0KDQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtX2xpc3QubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgdmFyIGl0ZW1faWQgPSBNZW1vcnkuYWxsb2MoNCk7ICAgICAgICAgIC8v6YGT5YW3aWQNCiAgICAgICAgdmFyIGl0ZW1fY250ID0gTWVtb3J5LmFsbG9jKDQpOyAgICAgICAgIC8v6YGT5YW35pWw6YePDQoNCiAgICAgICAgaXRlbV9pZC53cml0ZUludChpdGVtX2xpc3RbaV1bMF0pOw0KICAgICAgICBpdGVtX2NudC53cml0ZUludChpdGVtX2xpc3RbaV1bMV0pOw0KDQogICAgICAgIHZhciBwYWlyID0gTWVtb3J5LmFsbG9jKDEwMCk7DQogICAgICAgIHN0ZF9tYWtlX3BhaXJfaW50X2ludChwYWlyLCBpdGVtX2lkLCBpdGVtX2NudCk7DQoNCiAgICAgICAgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X3B1c2hfYmFjayh2ZWN0b3IsIHBhaXIpOw0KICAgIH0NCg0KICAgIC8v6YKu5Lu25pSv5oyBMTDkuKrpgZPlhbfpmYTku7bmoLzlrZANCiAgICB2YXIgYWRkaXRpb25fc2xvdHMgPSBNZW1vcnkuYWxsb2MoMTAwMCk7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgKytpKSB7DQogICAgICAgIEludmVuX0l0ZW1fSW52ZW5fSXRlbShhZGRpdGlvbl9zbG90cy5hZGQoaSAqIDYxKSk7DQogICAgfQ0KICAgIFdvbmdXb3JrX0NNYWlsQm94SGVscGVyX01ha2VTeXN0ZW1NdWx0aU1haWxQb3N0YWwodmVjdG9yLCBhZGRpdGlvbl9zbG90cywgMTApOw0KDQoNCiAgICB2YXIgdGl0bGVfcHRyID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyh0aXRsZSk7ICAgICAgLy/pgq7ku7bmoIfpopgNCiAgICB2YXIgdGV4dF9wdHIgPSBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKHRleHQpOyAgICAgICAgLy/pgq7ku7bmraPmlocNCiAgICB2YXIgdGV4dF9sZW4gPSBzdHJsZW4odGV4dF9wdHIpOyAgICAgICAgICAgICAgICAgICAgLy/pgq7ku7bmraPmlofplb/luqYNCg0KICAgIC8v5Y+R6YKu5Lu257uZ6KeS6ImyDQogICAgV29uZ1dvcmtfQ01haWxCb3hIZWxwZXJfUmVxREJTZW5kTmV3U3lzdGVtTXVsdGlNYWlsKHRpdGxlX3B0ciwgYWRkaXRpb25fc2xvdHMsIGl0ZW1fbGlzdC5sZW5ndGgsIGdvbGQsIHRhcmdldF9jaGFyYWNfbm8sIHRleHRfcHRyLCB0ZXh0X2xlbiwgMCwgOTksIDEpOw0KfQ==', '发送邮件', 'send_mail_api', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('hook_TimerDispatcher_dispatch', '世界广播(频道内公告)', 'DQoNCi8v5Y+R6YCB5a2X56ym5Liy57uZ5a6i5oi356uvDQpmdW5jdGlvbiBhcGlfSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zdHJpbmcocGFja2V0X2d1YXJkLCBzKQ0Kew0KICAgIHZhciBwID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyhzKTsNCiAgICB2YXIgbGVuID0gc3RybGVuKHApOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaW50KHBhY2tldF9ndWFyZCwgbGVuKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2JpbmFyeShwYWNrZXRfZ3VhcmQsIHAsIGxlbik7DQoNCiAgICByZXR1cm47DQp9DQoNCiAvL+S4lueVjOW5v+aSrSjpopHpgZPlhoXlhazlkYopDQpmdW5jdGlvbiBhcGlfR2FtZVdvcmxkX1NlbmROb3RpUGFja2V0TWVzc2FnZShtc2csIG1zZ190eXBlKQ0Kew0KICAgIHZhciBwYWNrZXRfZ3VhcmQgPSBhcGlfUGFja2V0R3VhcmRfUGFja2V0R3VhcmQoKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2hlYWRlcihwYWNrZXRfZ3VhcmQsIDAsIDEyKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUocGFja2V0X2d1YXJkLCBtc2dfdHlwZSk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChwYWNrZXRfZ3VhcmQsIDApOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShwYWNrZXRfZ3VhcmQsIDApOw0KICAgIGFwaV9JbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3N0cmluZyhwYWNrZXRfZ3VhcmQsIG1zZyk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKHBhY2tldF9ndWFyZCwgMSk7DQogICAgR2FtZVdvcmxkX3NlbmRfYWxsX3dpdGhfc3RhdGUoR19HYW1lV29ybGQoKSwgcGFja2V0X2d1YXJkLCAzKTsgIC8v5Y+q57uZc3RhdGUgPj0gMyDnmoTnjqnlrrblj5HlhazlkYoNCiAgICBEZXN0cm95X1BhY2tldEd1YXJkX1BhY2tldEd1YXJkKHBhY2tldF9ndWFyZCk7DQp9DQoNCi8v5ZCR5a6a5pe25Lu75Yqh5YiX6KGo5re75Yqg5LiA5Liq5Y+R6YCB5YWs5ZGK55qE5a6a5pe25Lu75YqhDQpmdW5jdGlvbiBwdXNoU2VuZE5vdGlQYWNrZXRNZXNzYWdlKG1zZywgbXNnX3R5cGUpew0KICB2YXIgYXJncyA9IFtdOw0KICBhcmdzLnB1c2gobXNnKTsNCiAgYXJncy5wdXNoKG1zZ190eXBlKTsNCiAgYXBpX3NjaGVkdWxlT25NYWluVGhyZWFkKGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlLCBhcmdzKTsNCn0NCg==', '世界广播(频道内公告)', 'api_GameWorld_SendNotiPacketMessage', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '点券或代币券充值', 'Ly/ngrnliLjlhYXlgLwgKOemgeatouebtOaOpeS/ruaUuWJpbGxpbmflupPmiYDmnInooajlrZfmrrUsIOeCueWIuOebuOWFs+aTjeS9nOWKoeW/heiwg+eUqOaVsOaNruW6k+WtmOWCqOi/h+eoiyEpDQpmdW5jdGlvbiBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIGFtb3VudCkNCnsNCiAgICAvL+WFheWAvA0KICAgIFdvbmdXb3JrX0lQR19DSVBHSGVscGVyX0lQR0lucHV0KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIDUsIGFtb3VudCwgcHRyKDB4OEM3RkEyMCksIHB0cigweDhDN0ZBMjApLA0KICAgICAgICBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCdHTScpLCBwdHIoMCksIHB0cigwKSwgcHRyKDApKTsNCg0KICAgIC8v6YCa55+l5a6i5oi356uv5YWF5YC857uT5p6cDQogICAgV29uZ1dvcmtfSVBHX0NJUEdIZWxwZXJfSVBHUXVlcnkocHRyKDB4OTQxRjczNCkucmVhZFBvaW50ZXIoKSwgdXNlcik7DQp9DQoNCi8v5Luj5biB5YWF5YC8ICjnpoHmraLnm7TmjqXkv67mlLliaWxsaW5n5bqT5omA5pyJ6KGo5a2X5q61LCDngrnliLjnm7jlhbPmk43kvZzliqHlv4XosIPnlKjmlbDmja7lupPlrZjlgqjov4fnqIshKQ0KZnVuY3Rpb24gYXBpX3JlY2hhcmdlX2Nhc2hfY2VyYV9wb2ludCh1c2VyLCBhbW91bnQpDQp7DQogICAgLy/lhYXlgLwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdJbnB1dFBvaW50KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIGFtb3VudCwgNCwgcHRyKDApLCBwdHIoMCkpOw0KDQogICAgLy/pgJrnn6XlrqLmiLfnq6/lhYXlgLznu5PmnpwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdRdWVyeShwdHIoMHg5NDFGNzM0KS5yZWFkUG9pbnRlcigpLCB1c2VyKTsNCn0=', '点券或代币券充值', 'api_recharge_cash_cera_point', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '挂接消息分发线程', 'DQoNCg0KLy/pnIDopoHlnKhkaXNwYXRjaGVy57q/56iL5omn6KGM55qE5Lu75Yqh6Zif5YiXKOeDreWKoOi9veWQjuS8muiiq+a4heepuikNCnZhciB0aW1lcl9kaXNwYXRjaGVyX2xpc3QgPSBbXTsNCg0KLy/lnKhkaXNwYXRjaGVy57q/56iL5omn6KGMKGFyZ3PkuLrlh73mlbBm55qE5Y+C5pWw57uE5oiQ55qE5pWw57uELCDoi6Vm5peg5Y+C5pWwYXJnc+WPr+S4um51bGwpDQpmdW5jdGlvbiBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQoZiwgYXJncykNCnsNCiAgICAvL+e6v+eoi+WuieWFqA0KICAgIHZhciBndWFyZCA9IGFwaV9HdWFyZF9NdXRleF9HdWFyZCgpOw0KDQogICAgdGltZXJfZGlzcGF0Y2hlcl9saXN0LnB1c2goW2YsIGFyZ3NdKTsNCg0KICAgIERlc3Ryb3lfR3VhcmRfTXV0ZXhfR3VhcmQoZ3VhcmQpOw0KDQogICAgcmV0dXJuOw0KfQ0KDQovL+iuvue9ruWumuaXtuWZqCDliLDmnJ/lkI7lnKhkaXNwYXRjaGVy57q/56iL5omn6KGMDQpmdW5jdGlvbiBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWRfZGVsYXkoZiwgYXJncywgZGVsYXkpDQp7DQogICAgc2V0VGltZW91dChhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQsIGRlbGF5LCBmLCBhcmdzKTsNCn0NCg0KDQovL+eUs+ivt+mUgSjnlLPor7flkI7liqHlv4XmiYvliqjph4rmlL4hISEpDQpmdW5jdGlvbiBhcGlfR3VhcmRfTXV0ZXhfR3VhcmQoKQ0Kew0KICAgIHZhciBhMSA9IE1lbW9yeS5hbGxvYygxMDApOw0KICAgIEd1YXJkX011dGV4X0d1YXJkKGExLCBHX1RpbWVyUXVldWUoKS5hZGQoMTYpKTsNCg0KICAgIHJldHVybiBhMTsNCn0NCg0KLy/lpITnkIbliLDmnJ/nmoToh6rlrprkuYnlrprml7blmagNCmZ1bmN0aW9uIGRvX3RpbWVyX2Rpc3BhdGNoKCkNCnsNCiAgICAvL+W9k+WJjeW+heWkhOeQhueahOWumuaXtuWZqOS7u+WKoeWIl+ihqA0KICAgIHZhciB0YXNrX2xpc3QgPSBbXTsNCg0KICAgIC8v57q/56iL5a6J5YWoDQogICAgdmFyIGd1YXJkID0gYXBpX0d1YXJkX011dGV4X0d1YXJkKCk7DQoNCiAgICAvL+S+neasoeWPluWHuumYn+WIl+S4reeahOS7u+WKoQ0KICAgIHdoaWxlKHRpbWVyX2Rpc3BhdGNoZXJfbGlzdC5sZW5ndGggPiAwKQ0KICAgIHsNCiAgICAgICAgLy/lhYjlhaXlhYjlh7oNCiAgICAgICAgdmFyIHRhc2sgPSB0aW1lcl9kaXNwYXRjaGVyX2xpc3Quc2hpZnQoKTsNCiAgICAgICAgdGFza19saXN0LnB1c2godGFzayk7DQogICAgfQ0KDQogICAgRGVzdHJveV9HdWFyZF9NdXRleF9HdWFyZChndWFyZCk7DQoNCiAgICAvL+aJp+ihjOS7u+WKoQ0KICAgIGZvcih2YXIgaT0wOyBpPHRhc2tfbGlzdC5sZW5ndGg7ICsraSkNCiAgICB7DQogICAgICAgIHZhciB0YXNrID0gdGFza19saXN0W2ldOw0KDQogICAgICAgIHZhciBmID0gdGFza1swXTsNCiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrWzFdOw0KDQogICAgICAgIGYuYXBwbHkobnVsbCwgYXJncyk7DQogICAgfQ0KfQ0KDQoNCi8v5oyC5o6l5raI5oGv5YiG5Y+R57q/56iLIOehruS/neS7o+eggee6v+eoi+WuieWFqA0KZnVuY3Rpb24gaG9va19UaW1lckRpc3BhdGNoZXJfZGlzcGF0Y2goKQ0Kew0KICAgIC8vaG9vayBUaW1lckRpc3BhdGNoZXI6OmRpc3BhdGNoDQogICAgLy/mnI3liqHlmajlhoXnva7lrprml7blmagg5q+P56eS6Iez5bCR5omn6KGM5LiA5qyhDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2MzJBMTgpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KDQogICAgICAgICAgICAvL+a4heepuuetieW+heaJp+ihjOeahOS7u+WKoemYn+WIlw0KICAgICAgICAgICAgZG9fdGltZXJfZGlzcGF0Y2goKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '挂接消息分发线程 执行需要在主线程运行的代码', 'hook_TimerDispatcher_dispatch', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config', '深渊强制非常困难', 'DQoNCkludGVyY2VwdG9yLmF0dGFjaChwdHIoMHgwODJGRkEyRSksIHsNCiAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgIGlmIChnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydzdGFydEhlbGxQYXJ0eVZlcnltaXNlcmFibGUnXSA9PT0gJ3RydWUnKSB7DQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDmt7HmuIrlvLrliLbpnZ7luLjlm7Dpmr4iKQ0KICAgICAgICB9DQogICAgfQ0KfSkNCg0K', '深渊强制非常困难', 'startHellPartyVerymiserable', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('use_item_handler,processing_data', '捕获玩家游戏事件', 'Ly/mjZXojrfnjqnlrrbmuLjmiI/kuovku7YNCmZ1bmN0aW9uIGhvb2tfaGlzdG9yeV9sb2coKSB7DQogICAgLy9jSGlzdG9yeVRyYWNlOjpvcGVyYXRvcigpDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg1NEY5OTApLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCg0KICAgICAgICAgICAgLy/op6PmnpDml6Xlv5flhoXlrrk6ICIxODAwMDAwOCIsMTgwMDAwMDgsRCwxNDU2MzYsIm5pY2tuYW1lIiwxLDcyLDgsMCwxOTIuMTY4LjIwMC4xLDE5Mi4xNjguMjAwLjEsNTA5NjMsMTEsIER1bmdlb25MZWF2ZSwi6b6N5Lq65LmL5aGUIiwwLDAsImFhYmIiLCJhYWJiIiwiTi9BIiwiTi9BIiwiTi9BIg0KICAgICAgICAgICAgdmFyIGhpc3RvcnlfbG9nID0gYXJnc1sxXS5yZWFkVXRmOFN0cmluZygtMSk7DQogICAgICAgICAgICB2YXIgZ3JvdXAgPSBoaXN0b3J5X2xvZy5zcGxpdCgnLCcpOw0KDQogICAgICAgICAgICAvL+inkuiJsuS/oeaBrw0KICAgICAgICAgICAgdmFyIGFjY291bnRfaWQgPSBwYXJzZUludChncm91cFsxXSk7DQogICAgICAgICAgICB2YXIgdGltZV9oaF9tbV9zcyA9IGdyb3VwWzNdOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19uYW1lID0gZ3JvdXBbNF07DQogICAgICAgICAgICB2YXIgY2hhcmFjX25vID0gZ3JvdXBbNV07DQogICAgICAgICAgICB2YXIgY2hhcmFjX2xldmVsID0gZ3JvdXBbNl07DQogICAgICAgICAgICB2YXIgY2hhcmFjX2pvYiA9IGdyb3VwWzddOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19ncm93dHlwZSA9IGdyb3VwWzhdOw0KICAgICAgICAgICAgdmFyIHVzZXJfd2ViX2FkZHJlc3MgPSBncm91cFs5XTsNCiAgICAgICAgICAgIHZhciB1c2VyX3BlZXJfaXAyID0gZ3JvdXBbMTBdOw0KICAgICAgICAgICAgdmFyIHVzZXJfcG9ydCA9IGdyb3VwWzExXTsNCiAgICAgICAgICAgIHZhciBjaGFubmVsX2luZGV4ID0gZ3JvdXBbMTJdOyAgICAgICAgICAgICAgLy/lvZPliY3popHpgZNpZA0KDQogICAgICAgICAgICAvL+eOqeWutua4uOaIj+S6i+S7tg0KICAgICAgICAgICAgdmFyIGdhbWVfZXZlbnQgPSBncm91cFsxM10uc2xpY2UoMSk7ICAgICAgICAvL+WIoOmZpOWkmuS9meepuuagvA0KDQogICAgICAgICAgICAvL+inpuWPkea4uOaIj+S6i+S7tueahOinkuiJsg0KICAgICAgICAgICAgdmFyIHVzZXIgPSBHYW1lV29ybGRfZmluZF91c2VyX2Zyb21fd29ybGRfYnlhY2NpZChHX0dhbWVXb3JsZCgpLCBhY2NvdW50X2lkKTsNCg0KICAgICAgICAgICAgaWYgKHVzZXIuaXNOdWxsKCkpDQogICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAvL+mBk+WFt+WHj+WwkTogIEl0ZW0tLDEsMTAwMDAxMTMsNjMsMSwzLDYzLDAsMCwwLDAsMCwwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwLDAsMCwwMDAwMDAwMDAwMDAwMDAwMDAwMA0KICAgICAgICAgICAgaWYgKGdhbWVfZXZlbnQgPT0gJ0l0ZW0tJykgew0KICAgICAgICAgICAgICAgIHZhciBpdGVtX2lkID0gcGFyc2VJbnQoZ3JvdXBbMTVdKTsgICAgICAgICAgICAgICAgLy/mnKzmrKHmk43kvZzpgZPlhbdpZA0KICAgICAgICAgICAgICAgIHZhciBpdGVtX2NudCA9IHBhcnNlSW50KGdyb3VwWzE3XSk7ICAgICAgICAgICAgICAgLy/mnKzmrKHmk43kvZzpgZPlhbfmlbDph48NCiAgICAgICAgICAgICAgICB2YXIgcmVhc29uID0gcGFyc2VJbnQoZ3JvdXBbMThdKTsgICAgICAgICAgICAgICAgIC8v5pys5qyh5pON5L2c5Y6f5ZugDQoNCg0KICAgICAgICAgICAgICAgIC8vbG9nKCfnjqnlrrZbJyArIGNoYXJhY19uYW1lICsgJ13pgZPlhbflh4/lsJEsIOWOn+WboDonICsgcmVhc29uICsgJyjpgZPlhbdpZD0nICsgaXRlbV9pZCArICcsIOS9v+eUqOaVsOmHjz0nICsgaXRlbV9jbnQpOw0KDQogICAgICAgICAgICAgICAgaWYgKDUgPT0gcmVhc29uKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5Lii5byD6YGT5YW3DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKDMgPT0gcmVhc29uKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5L2/55So6YGT5YW3DQogICAgICAgICAgICAgICAgICAgIC8v6L+Z6YeM5bm25pyq5pS55Y+Y6YGT5YW35Y6f5aeL5pWI5p6cIOWOn+Wni+aViOaenOaIkOWKn+aJp+ihjOWQjuinpuWPkeS4i+mdoueahOS7o+eggQ0KICAgICAgICAgICAgICAgICAgICB1c2VfaXRlbV9oYW5kbGVyKHVzZXIsaXRlbV9pZCkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoOSA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/liIbop6PpgZPlhbcNCiAgICAgICAgICAgICAgICAgICAgLy9kaXNpbnRlZ3JhdGVfaXRlbV9oYW5kbGVyKGl0ZW1faWQpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKDEwID09IHJlYXNvbikgew0KICAgICAgICAgICAgICAgICAgICAvL+S9v+eUqOWxnuaAp+efs+WktA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVfZXZlbnQgPT0gJ0tpbGxNb2InKSB7DQogICAgICAgICAgICAgICAgLy/mnYDmrbvmgKrniakNCiAgICAgICAgICAgICAgICAvL+mtlOazleWwgeWNsOijheWkh+ivjeadoeWNh+e6pw0KICAgICAgICAgICAgICAgIC8vYm9vc3RfcmFuZG9tX29wdGlvbl9lcXUodXNlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdNb25leSsnKSB7DQogICAgICAgICAgICAgICAgdmFyIGN1cl9tb25leSA9IHBhcnNlSW50KGdyb3VwWzE0XSk7ICAgICAgICAgICAgICAgIC8v5b2T5YmN5oyB5pyJ55qE6YeR5biB5pWw6YePDQogICAgICAgICAgICAgICAgdmFyIGFkZF9tb25leSA9IHBhcnNlSW50KGdyb3VwWzE1XSk7ICAgICAgICAgICAgICAgIC8v5pys5qyh6I635b6X6YeR5biB5pWw6YePDQogICAgICAgICAgICAgICAgdmFyIHJlYXNvbiA9IHBhcnNlSW50KGdyb3VwWzE2XSk7ICAgICAgICAgICAgICAgICAgIC8v5pys5qyh6I635b6X6YeR5biB5Y6f5ZugDQoNCiAgICAgICAgICAgICAgICAvL2xvZygn546p5a62WycgKyBjaGFyYWNfbmFtZSArICdd6I635Y+W6YeR5biBLCDljp/lm6A6JyArIHJlYXNvbiArICco5b2T5YmN5oyB5pyJ6YeR5biBPScgKyBjdXJfbW9uZXkgKyAnLCDmnKzmrKHojrflvpfph5HluIHmlbDph489JyArIGFkZF9tb25leSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoNCA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lia/mnKzmi77lj5YNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoNSA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lia/mnKzpgJrlhbPnv7vniYzojrflj5bph5HluIENCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdEdW5nZW9uTGVhdmUnKSB7DQogICAgICAgICAgICAgICAgLy/nprvlvIDlia/mnKwNCiAgICAgICAgICAgICAgICAvL+WIt+WujOWJr+acrOWQjiwg6YeN572u5byC55WMK+aegemZkOelreWdm+asoeaVsA0KICAgICAgICAgICAgICAgIC8vQ1VzZXJfRGltZW5zaW9uSW5vdXRVcGRhdGUodXNlciwgMSwgMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdJdGVtKycpIHsNCiAgICAgICAgICAgICAgICB2YXIgaXRlbV9pZCA9IHBhcnNlSW50KGdyb3VwWzE1XSk7DQogICAgICAgICAgICAgICAgdmFyIGdyb3VwXzE4ID0gcGFyc2VJbnQoZ3JvdXBbMThdKTsNCiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBfMTggPT0gNCkgew0KICAgICAgICAgICAgICAgICAgICAvL+WJr+acrOaNoeS4nOilv+WWiuWWh+WPree7meeCueWIuA0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nX2RhdGEoaXRlbV9pZCwgdXNlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCg0KICAgICAgICB9DQogICAgfSk7DQp9DQo=', '捕获玩家游戏事件', 'hook_user_history_log', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('chhc_fun,decompose,equInherit,finish_quest_fun,load_json_config,ssfmfybh,crossover', '玩家使用道具回调', 'DQoNCi8v546p5a625L2/55So6YGT5YW35Zue6LCDDQpmdW5jdGlvbiB1c2VfaXRlbV9oYW5kbGVyKHVzZXIsIGl0ZW1faWQpIHsNCiAgICBpZiAoaXRlbV9pZCA9PSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydjbGVhcl9hbGxfcXVlc3RfYnlfY2hhcmFjdGVyX2xldmVsJ10pIHsNCiAgICAgICAgLy/miYDmnInnmoTku7vliqHlrozmiJDliLgNCiAgICAgICAgY2xlYXJfYWxsX3F1ZXN0X2J5X2NoYXJhY3Rlcl9sZXZlbCh1c2VyKTsNCiAgICB9DQogICAgaWYgKGl0ZW1faWQgPT0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnYXBpX2ZvcmNlX2NsZWFyX3F1ZXN0X2xpc3QnXSkgew0KICAgICAgICAvLyDlrozmiJDmjIflrprku7vliqEg5L6L5aaC6Ieq5bex5a6a5LmJ5q+P5pel5Lu75YqhDQogICAgICAgIGFwaV9mb3JjZV9jbGVhcl9xdWVzdF9saXN0KHVzZXIsIHF1ZXN0X2xpc3QpDQogICAgfQ0KICAgIGlmIChpdGVtX2lkID09IGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ2NsZWFyX2RvaW5nX3F1ZXN0J10pIHsNCiAgICAgICAgLy/lt7LmjqXku7vliqHlrozmiJDliLgNCiAgICAgICAgY2xlYXJfZG9pbmdfcXVlc3QodXNlcik7DQogICAgfQ0KICAgIGlmIChpdGVtX2lkID09IGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ2VxdUluaGVyaXQnXSkgew0KICAgICAgICAvLyDoo4XlpIfnu6fmib8gIOWujOe+jue7p+aJv+W8uuWMlu+8jOWinuW5hSDvvIzlrp3nj6Ag77yM6ZS76YCg77yI6L+Y5Y+v5Lul5a6e546wICtu55qE6ZS76YCg5Yi477yJDQogICAgICAgIGVxdUluaGVyaXQodXNlcik7DQogICAgfQ0KICAgIGlmKGl0ZW1faWQgPT0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnY3Jvc3NvdmVyJ10pew0KICAgICAgICAvLyDoo4XlpIfot6jnlYwNCiAgICAgICAgY3Jvc3NvdmVyKHVzZXIpOw0KICAgIH0NCiAgICBpZiAoaXRlbV9pZCA9PSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkZWNvbXBvc2UnXSkgew0KICAgICAgICAvLyDliIbop6MNCiAgICAgICAgZGVjb21wb3NlKHVzZXIpOw0KICAgIH0NCiAgICBpZiAoaXRlbV9pZCA9PSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydzc2ZtZnliaCddKSB7DQogICAgICAgIC8vIOmtlOazleWwgeWNsOmHjee9rg0KICAgICAgICBzc2ZtZnliaCh1c2VyKQ0KICAgIH0NCiAgICBpZiAoaXRlbV9pZCA9PSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydjaGhjZnVuJ10pIHsNCiAgICAgICAgLy8g56ew5Y+35ZCI5oiQDQogICAgICAgIGNoaGNmdW4odXNlcikNCiAgICB9DQogICAgaWYgKGl0ZW1faWQgPT0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsncmVzZXRSZXNldERpbWVuc2lvbklub3V0XzEnXSkgew0KICAgICAgICAvLyAgICAgLy8g5Yid6Zi25byC55WM5YWl5Zy66YeN572uDQogICAgICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLCAwKQ0KICAgICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciwgMSkNCiAgICAgICAgcmVzZXRSZXNldERpbWVuc2lvbklub3V0KHVzZXIsIDIpDQogICAgfQ0KICAgIGlmIChpdGVtX2lkID09IGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ3Jlc2V0UmVzZXREaW1lbnNpb25Jbm91dF8yJ10pIHsNCiAgICAgICAgLy8gICAgIC8vIOmrmOmYtuW8gueVjOWFpeWcuumHjee9rg0KICAgICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciwgMykNCiAgICAgICAgcmVzZXRSZXNldERpbWVuc2lvbklub3V0KHVzZXIsIDQpDQogICAgICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLCA1KQ0KICAgIH0NCn0NCg0K', '玩家使用道具回调', 'use_item_handler', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('debug_message_handler,fix_TOD,hook_TimerDispatcher_dispatch,hook_user_inout_game_world,init_for_game_config,json_message_exec,load_json_config,no_json_message_exec,skillUpgrading,startHellParty,startHellPartyVerymiserable,hook_user_history_log', 'dnf-admin的firda主函数', 'DQoNCg0KLy/liJ3lp4vljJbliqDovb3lh73mlbANCmZ1bmN0aW9uIHN0YXJ0KGNoYW5uZWwpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT09PnN0YXJ0IGluaXQgZnJpZGEiKTsNCiAgICAvL+aMguaOpea2iOaBr+WIhuWPkee6v+eoiyDmiafooYzpnIDopoHlnKjkuLvnur/nqIvov5DooYznmoTku6PnoIENCiAgICBob29rX1RpbWVyRGlzcGF0Y2hlcl9kaXNwYXRjaCgpOw0KICAgIGxvYWRfY29uZmlnKGNoYW5uZWwpOw0KICAgIGluaXRGb3JDb25maWcoKTsNCiAgICAvL+S/ruWkjee7neacm+S5i+WhlA0KICAgIGZpeF9UT0QoKTsNCiAgICAvL+inkuiJsueZu+WFpeeZu+WHuuWkhOeQhg0KICAgIGhvb2tfdXNlcl9pbm91dF9nYW1lX3dvcmxkKCkNCiAgICAvL+aNleiOt+eOqeWutua4uOaIj+S6i+S7tg0KICAgIGhvb2tfaGlzdG9yeV9sb2coKTsNCiAgICAvL+mHkeW6k+aJqeWuuTEyMOagvA0KICAgIHNldE1heENBY2NvdW50Q2FyZ29Tb2x0KDEyMCk7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT09PT5mcmlkYSBzdGFydCBzdWNjZXNzIik7DQp9DQoNCg0KLy/lh73mlbDlr7zlh7rjgIHlj4LmlbDosIPor5UNCnJwYy5leHBvcnRzID0gew0KICAgIHN0YXJ0OiBmdW5jdGlvbiAoY2hhbm5lbCkgew0KICAgICAgICBzdGFydChjaGFubmVsKTsNCiAgICB9LA0KICAgIGhhbmRsZXJGY01lc3NhZ2U6IGZ1bmN0aW9uIChwYXJhbSkgew0KICAgICAgICB2YXIgcGFyYW1Kc29uID0gdW5kZWZpbmVkOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgcGFyYW1Kc29uID0gSlNPTi5wYXJzZShwYXJhbSk7DQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgICAvL+mdnmpzb27moLzlvI/nmoTmtojmga8NCiAgICAgICAgICAgIGV4ZWNOb0pzb25NZXNzYWdlKHBhcmFtKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAocGFyYW1Kc29uICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGlmIChwYXJhbUpzb24udHlwZSA9PT0gJ2RlYnVnJykgew0KICAgICAgICAgICAgICAgIGRlYnVnZnJpZGEocGFyYW1Kc29uLmRhdGEpDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGV4ZWNKc29uTWVzc2FnZShwYXJhbUpzb24pDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgIH0sDQp9Ow==', '使用配套服务端和firda必选', 'da_frida_main', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation,load_json_config', '完成任务函数', '', '完成任务函数', 'finish_quest_fun', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '装备继承', 'DQoNCi8qKg0KICog6KOF5aSH57un5om/IOWwhueyieiJsuS7peS4iuetiee6p+Wkp+S6juetieS6jjU155qE6KOF5aSH57un5om/IOW8uuWMliDlop7luYUg6ZS76YCgIOmZhOmtlO+8jCDljp/oo4XlpIfkvJrlvZIwDQogKiDmrablmajpnIDopoHlkIzmupAgIOWNsyDlpKrliIAt44CL5aSq5YiADQogKiDpmLLlhbfpnIDopoHlkIznsbvlnosgICDljbPnmq7nlLLkuIrooaMgLeOAi+adv+eUsuS4iuihow0KICogQHBhcmFtIHVzZXINCiAqLw0KZnVuY3Rpb24gZXF1SW5oZXJpdCh1c2VyKXsNCiAgICB2YXIgaW52ZW4gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5XKHVzZXIpOw0KICAgIHZhciBlcXUgPSBDSW52ZW50b3J5X0dldEludmVuUmVmKGludmVuLCBJTlZFTlRPUllfVFlQRV9JVEVNLCA5KTsNCiAgICB2YXIgaXRlbUlkID0gSW52ZW5fSXRlbV9nZXRLZXkoZXF1KQ0KICAgIGlmKEludmVuX0l0ZW1fZ2V0S2V5KGVxdSkpew0KICAgICAgICAvL+ivu+WPluijheWkh+W8uuWMluetiee6pw0KICAgICAgICB2YXIgdXBncmFkZV9sZXZlbCA9IGVxdS5hZGQoNikucmVhZFU4KCk7DQogICAgICAgIHZhciBpdGVtRGF0YSA9IENEYXRhTWFuYWdlcl9maW5kX2l0ZW0oR19DRGF0YU1hbmFnZXIoKSxpdGVtSWQpOw0KICAgICAgICB2YXIgZXF1X3R5cGUgPSBpdGVtRGF0YS5hZGQoMTQxKjQpLnJlYWRVMzIoKTsgLy8g6KOF5aSH57G75Z6LDQogICAgICAgIHZhciBzdWJfdHlwZSA9IENFcXVpcEl0ZW1fR2V0U3ViVHlwZShpdGVtRGF0YSk7DQogICAgICAgIHZhciBlcXVSYXJpdHkgPSBDSXRlbV9HZXRSYXJpdHkoaXRlbURhdGEpOyAvLyDnqIDmnInluqYgID49MyAg57KJ6Imy5Lul5LiKDQogICAgICAgIHZhciBuZWVkTGV2ZWwgPSBDSXRlbV9HZXRVc2FibGVMZXZlbChpdGVtRGF0YSk7ICAvL+etiee6pw0KICAgICAgICBjb25zb2xlLmxvZygiZXF1X3R5cGUgOiIrZXF1X3R5cGUpDQogICAgICAgIGNvbnNvbGUubG9nKCJzdWJfdHlwZSA6IitzdWJfdHlwZSkNCg0KICAgICAgICB2YXIgdXNlSm9iID0gIiI7DQogICAgICAgIGZvciAodmFyIGkgPSA2MDsgaSA8PTcwOyBpKyspIHsNCiAgICAgICAgICAgIHVzZUpvYiArPSBpdGVtRGF0YS5hZGQoaSkucmVhZFU4KCk7DQogICAgICAgIH0NCiAgICAgICAgY29uc29sZS5sb2coZXF1X3R5cGUgKyAiICAiK3VzZUpvYik7DQoNCiAgICAgICAgaWYoZXF1UmFyaXR5IDwgMyl7DQogICAgICAgICAgICAvLyDoo4XlpIflk4Hnuqflv4XpobvopoHmsYLnsonoibLku6XkuIrvvIznu6fmib/oo4XlpIfkuI3mu6HotrPopoHmsYINCiAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi57un5om/5aSx6LSl77ya6KOF5aSH5ZOB57qn5b+F6aG76KaB5rGC57KJ6Imy5Lul5LiK77yM57un5om/6KOF5aSH5LiN5ruh6Laz6KaB5rGCIiwwKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZihuZWVkTGV2ZWwgPCA1NSl7DQogICAgICAgICAgICAvLyDoo4XlpIfnrYnnuqfopoHlpKfkuo41MOe6p+S7peS4iu+8jOe7p+aJv+ijheWkh+S4jea7oei2s+imgeaxgg0KICAgICAgICAgICAgYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh1c2VyLCLnu6fmib/lpLHotKXvvJroo4XlpIfnrYnnuqfopoHlpKfkuo7nrYnkuo41Nee6p+S7peS4iu+8jOe7p+aJv+ijheWkh+S4jea7oei2s+imgeaxgigiK25lZWRMZXZlbCsiKSIsMCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdmFyIHN1Y2Nlc3NUYWcgPSBmYWxzZTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDEwOyBpIDw9MjE7IGkrKykgew0KICAgICAgICAgICAgdmFyIGVxdUluID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfQk9EWSwgaSk7DQogICAgICAgICAgICBpZihJbnZlbl9JdGVtX2dldEtleShlcXVJbikpew0KICAgICAgICAgICAgICAgIHZhciBpbkl0ZW1JZCA9IEludmVuX0l0ZW1fZ2V0S2V5KGVxdUluKQ0KICAgICAgICAgICAgICAgIHZhciBpbkl0ZW1EYXRhID0gQ0RhdGFNYW5hZ2VyX2ZpbmRfaXRlbShHX0NEYXRhTWFuYWdlcigpLGluSXRlbUlkKTsNCiAgICAgICAgICAgICAgICB2YXIgaW5FcXVfdHlwZSA9IGluSXRlbURhdGEuYWRkKDE0MSo0KS5yZWFkVTMyKCk7IC8vIOijheWkh+exu+Weiw0KICAgICAgICAgICAgICAgIHZhciBpbkVxdVJhcml0eSA9IENJdGVtX0dldFJhcml0eShpbkl0ZW1EYXRhKTsgLy8g56iA5pyJ5bqmICA+PTMgIOeyieiJsuS7peS4ig0KICAgICAgICAgICAgICAgIHZhciBpbk5lZWRMZXZlbCA9IENJdGVtX0dldFVzYWJsZUxldmVsKGluSXRlbURhdGEpOyAgLy/nrYnnuqcNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXF1X3R5cGUgYe+8micrZXF1X3R5cGUrJywnK2luRXF1X3R5cGUrJywnK2luSXRlbURhdGEuYWRkKDE0OCkucmVhZFU4KCkpDQogICAgICAgICAgICAgICAgaWYoaW5FcXVfdHlwZT09ZXF1X3R5cGUpew0KICAgICAgICAgICAgICAgICAgICBpZihpbkVxdV90eXBlPT0xMCl7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyDmrablmajpnIDopoHlkIzogYzkuJoNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VKb2IgPSAiIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpblVzZUpvYiA9ICIiOw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDYwOyBpIDw9NzA7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZUpvYiArPSBpdGVtRGF0YS5hZGQoaSkucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5Vc2VKb2IgKz0gaW5JdGVtRGF0YS5hZGQoaSkucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZih1c2VKb2IgIT0gaW5Vc2VKb2Ipew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi57un5om/5aSx6LSl77ya5q2m5Zmo6KOF5aSH6ZyA6KaB5b2T5YmN6IGM5Lia5LiU5ZCM57G75Z6L77yM56m/5oi06KOF5aSH5LiN5ruh6Laz6KaB5rGCIiwwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5TdWJUeXBlID0gQ0VxdWlwSXRlbV9HZXRTdWJUeXBlKGluSXRlbURhdGEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3ViX3R5cGUhPWluU3ViVHlwZSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh1c2VyLCLnu6fmib/lpLHotKXvvJrmrablmajoo4XlpIfpnIDopoHlvZPliY3ogYzkuJrkuJTlkIznsbvlnovvvIznqb/miLToo4XlpIfkuI3mu6HotrPopoHmsYIiLDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAvLyDnsbvlnovkuIDnm7Qg5omN6IO957un5om/DQogICAgICAgICAgICAgICAgICAgIGlmKGluRXF1UmFyaXR5PDMpew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8g57un5om/5aSx6LSl77ya6KOF5aSH5ZOB57qn5b+F6aG76KaB5rGC57KJ6Imy5Lul5LiK77yM56m/5oi06KOF5aSH5LiN5ruh6Laz6KaB5rGCDQogICAgICAgICAgICAgICAgICAgICAgICBhcGlfQ1VzZXJfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHVzZXIsIue7p+aJv+Wksei0pe+8muijheWkh+WTgee6p+W/hemhu+imgeaxgueyieiJsuS7peS4iu+8jOepv+aItOijheWkh+S4jea7oei2s+imgeaxgiIsMCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYoaW5OZWVkTGV2ZWwgPCA1NSl7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyDoo4XlpIfnrYnnuqfopoHlpKfkuo41MOe6p+S7peS4iu+8jOepv+aItOijheWkh+S4jea7oei2s+imgeaxgg0KICAgICAgICAgICAgICAgICAgICAgICAgYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh1c2VyLCLnu6fmib/lpLHotKXvvJroo4XlpIfnrYnnuqfopoHlpKfkuo7nrYnkuo41Nee6p+S7peS4iu+8jOepv+aItOijheWkh+S4jea7oei2s+imgeaxgiIsMCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgLy8g5by65YyWDQogICAgICAgICAgICAgICAgICAgIHZhciBpblVwZ3JhZGVfbGV2ZWwgPSBlcXVJbi5hZGQoNikucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIC8vIOWinuW5hQ0KICAgICAgICAgICAgICAgICAgICB2YXIgemVuZ2Z1ID0gZXF1LmFkZCgxNykucmVhZFUxNigpOw0KICAgICAgICAgICAgICAgICAgICAvLyDplLvpgKANCiAgICAgICAgICAgICAgICAgICAgdmFyIGR1YW56YW8gPSBlcXUuYWRkKDUxKS5yZWFkVTgoKTsNCiAgICAgICAgICAgICAgICAgICAgLy8g5a6d54+gDQogICAgICAgICAgICAgICAgICAgIHZhciBiYW96aHUgPSBlcXUuYWRkKDEzKS5yZWFkVTMyKCk7DQogICAgICAgICAgICAgICAgICAgIC8v6a2U5rOV5bCB5Y2wDQogICAgICAgICAgICAgICAgICAgIHZhciBzZWFsMV9sdiA9IGVxdS5hZGQoMzcpLnJlYWRVOCgpOyANCiAgICAgICAgICAgICAgICAgICAgdmFyIHNlYWwyX2x2ID0gZXF1LmFkZCgzOCkucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzZWFsM19sdiA9IGVxdS5hZGQoMzkpLnJlYWRVOCgpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VhbDRfbHYgPSBlcXUuYWRkKDQwKS5yZWFkVTgoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHNlYWw1X2x2ID0gZXF1LmFkZCg0MSkucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzZWFsNl9sdiA9IGVxdS5hZGQoNDIpLnJlYWRVOCgpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VhbDdfbHYgPSBlcXUuYWRkKDQzKS5yZWFkVTgoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHNlYWw4X2x2ID0gZXF1LmFkZCg0NCkucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzZWFsOV9sdiA9IGVxdS5hZGQoNDUpLnJlYWRVOCgpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VhbDEwX2x2ID0gZXF1LmFkZCg0NikucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzZWFsMTFfbHYgPSBlcXUuYWRkKDQ3KS5yZWFkVTgoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHNlYWwxMl9sdiA9IGVxdS5hZGQoNDgpLnJlYWRVOCgpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VhbDEzX2x2ID0gZXF1LmFkZCg0OSkucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzZWFsMTRfbHYgPSBlcXUuYWRkKDUwKS5yZWFkVTgoKTsNCgkJCQkNCiAgICAgICAgICAgICAgICAgICAgaWYoaW5VcGdyYWRlX2xldmVsIDw9IHVwZ3JhZGVfbGV2ZWwpew0KICAgICAgICAgICAgICAgICAgICAgICAgLy/mj5DljYflvLrljJYv5aKe5bmF562J57qnDQogICAgICAgICAgICAgICAgICAgICAgICBlcXVJbi5hZGQoNikud3JpdGVVOCh1cGdyYWRlX2xldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCgxNykud3JpdGVVMTYoemVuZ2Z1KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCg1MSkud3JpdGVVOChkdWFuemFvKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCgxMykud3JpdGVVMzIoYmFvemh1KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCgzNykud3JpdGVVOChzZWFsMV9sdik7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXVJbi5hZGQoMzgpLndyaXRlVTgoc2VhbDJfbHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDM5KS53cml0ZVU4KHNlYWwzX2x2KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCg0MCkud3JpdGVVOChzZWFsNF9sdik7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXVJbi5hZGQoNDEpLndyaXRlVTgoc2VhbDVfbHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQyKS53cml0ZVU4KHNlYWw2X2x2KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCg0Mykud3JpdGVVOChzZWFsN19sdik7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXVJbi5hZGQoNDQpLndyaXRlVTgoc2VhbDhfbHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ1KS53cml0ZVU4KHNlYWw5X2x2KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCg0Nikud3JpdGVVOChzZWFsMTBfbHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ3KS53cml0ZVU4KHNlYWwxMV9sdik7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXVJbi5hZGQoNDgpLndyaXRlVTgoc2VhbDEyX2x2KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdUluLmFkZCg0OSkud3JpdGVVOChzZWFsMTNfbHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDUwKS53cml0ZVU4KHNlYWwxNF9sdik7DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWwhuWOn+ijheWkh+a4hemZpA0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCg2KS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCgxNykud3JpdGVVMTYoMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXUuYWRkKDUxKS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCgxMykud3JpdGVVMzIoMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXUuYWRkKDM3KS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCgzOCkud3JpdGVVOCgwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdS5hZGQoMzkpLndyaXRlVTgoMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXUuYWRkKDQwKS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCg0MSkud3JpdGVVOCgwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdS5hZGQoNDIpLndyaXRlVTgoMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXUuYWRkKDQzKS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCg0NCkud3JpdGVVOCgwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdS5hZGQoNDUpLndyaXRlVTgoMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXUuYWRkKDQ2KS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCg0Nykud3JpdGVVOCgwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVxdS5hZGQoNDgpLndyaXRlVTgoMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlcXUuYWRkKDQ5KS53cml0ZVU4KDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXF1LmFkZCg1MCkud3JpdGVVOCgwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8v6YCa55+l5a6i5oi356uv5pu05paw6KOF5aSHDQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9TZW5kVXBkYXRlSXRlbUxpc3QodXNlciwgMSwgMCwgOSk7DQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9TZW5kVXBkYXRlSXRlbUxpc3QodXNlciwgMSwgMywgaSk7DQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9TZW5kVXBkYXRlSXRlbUxpc3QodXNlciwgMSwgMywgMTApOw0KICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc1RhZyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygic3VjY2Vzc++8ge+8ge+8gSIpDQogICAgICAgICAgICAgICAgICAgICAgICBhcGlfQ1VzZXJfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHVzZXIsIue7p+aJv+aIkOWKn++8ge+8ge+8gSIsMCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmKCFzdWNjZXNzVGFnKXsNCiAgICAgICAgICAgIC8vIOWksei0pSDmsqHmnInlkIjpgILnmoToo4XlpIfvvIzkuI3nrKblkIjoo4XlpIcNCiAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi57un5om/5aSx6LSl77ya5rKh5pyJ5ZCI6YCC55qE6KOF5aSHIiwwKTsNCiAgICAgICAgfQ0KICAgIH0NCn0=', '装备继承', 'equInherit', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '史诗魔法封印变换', 'DQoNCiAgLy/lj7Lor5fprZTms5XlsIHljbDlj5jmjaINCiBmdW5jdGlvbiBzc2ZtZnliaCh1c2VyKQ0KIHsgICAgDQogICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQogICAgIC8v6YGN5Y6G6KOF5aSHDQogICAgIGZvcih2YXIgaSA9IDk7IGkgPD0xNjsgaSsrKQ0KICAgICB7DQogICAgICAgICAvL+iOt+WPlueJqeWTgeagj+esrOS4gOaOkueahOijheWkhw0KICAgICAgICAgdmFyIGVxdUluID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgaSk7IC8v6YGN5Y6G57G75Z6L5Li654mp5ZOB5qCPDQogICAgICAgICB2YXIgaW5JdGVtSWQgPSBJbnZlbl9JdGVtX2dldEtleShlcXVJbikgLy/pgZPlhbdpZA0KICAgICAgICAgdmFyIGluSXRlbURhdGEgPSBDRGF0YU1hbmFnZXJfZmluZF9pdGVtKEdfQ0RhdGFNYW5hZ2VyKCksaW5JdGVtSWQpOyAvL+iOt+WPlnB2ZuaVsOaNrg0KICAgICAgICAgdmFyIGVxdVJhcml0eSA9IENJdGVtX0dldFJhcml0eShpbkl0ZW1EYXRhKTsgLy8g56iA5pyJ5bqmICA+PTMgIOeyieiJsuS7peS4ig0KICAgICAgICAgaWYoZXF1UmFyaXR5ID09IDQpew0KICAgICAgICAgICAgIHZhciBpbkVxdV90eXBlID0gaW5JdGVtRGF0YS5hZGQoMTQxKjQpLnJlYWRVMzIoKTsgLy8g6KOF5aSH57G75Z6LMTDmrablmaggMTHnp7Dlj7cJICAgICAgIA0KICAgICAgICAgICAgIC8v5riF56m65omA5pyJ6a2U5rOV5bCB5Y2w5a2X6IqCDQogICAgICAgICAgICAgaWYoaW5FcXVfdHlwZSE9MTEpew0KICAgICAgICAgICAgICAgICBlcXVJbi5hZGQoMzcpLndyaXRlVTgoMCk7DQogICAgICAgICAgICAgICAgIGVxdUluLmFkZCgzOCkud3JpdGVVOCgwKTsgICAgCQkJDQogICAgICAgICAgICAgICAgIGVxdUluLmFkZCgzOSkud3JpdGVVOCgwKTsgICAgCQkJDQogICAgICAgICAgICAgICAgIGVxdUluLmFkZCg0MCkud3JpdGVVOCgwKTsgICAJCQkNCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQxKS53cml0ZVU4KDApOyAgICAJCQkNCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQyKS53cml0ZVU4KDApOyAgICAJCQkNCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQzKS53cml0ZVU4KDApOyAgICANCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ0KS53cml0ZVU4KDApOyAgICANCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ1KS53cml0ZVU4KDApOyAgICANCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ2KS53cml0ZVU4KDApOyAJCQkNCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ3KS53cml0ZVU4KDApOyAgICANCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ4KS53cml0ZVU4KDApOyAgICANCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDQ5KS53cml0ZVU4KDApOyAgICANCiAgICAgICAgICAgICAgICAgZXF1SW4uYWRkKDUwKS53cml0ZVU4KDApOyANCiAgICAgICAgICAgICAgICAgLy/lsJ3or5Xop6PpmaTprZTms5XlsIHljbANCiAgICAgICAgICAgICAgICAgdmFyIHJldCA9IHJhbmRvbV9vcHRpb25fQ1JhbmRvbU9wdGlvbkl0ZW1IYW5kbGVfZ2l2ZV9vcHRpb24ocHRyKDB4OTQxRjgyMCkucmVhZFBvaW50ZXIoKSwgaW5JdGVtSWQsIENJdGVtX0dldFJhcml0eShpbkl0ZW1EYXRhKSwgQ0l0ZW1fR2V0VXNhYmxlTGV2ZWwoaW5JdGVtRGF0YSkNCiAgICAgICAgICAgICAgICAgICAgICwgQ0l0ZW1fR2V0SXRlbUdyb3VwTmFtZShpbkl0ZW1EYXRhKSwgQ0VxdWlwSXRlbV9HZXRSYW5kb21PcHRpb25HcmFkZShpbkl0ZW1EYXRhKSwgZXF1SW4uYWRkKDM3KSk7DQogICAgICAgICAgICAgICAgIGlmKHJldCkNCiAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgLy/pgJrnn6XlrqLmiLfnq6/mnInoo4XlpIfmm7TmlrANCiAgICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCBpKTsNCiAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgIH0JCQkNCiAgICAgICAgIH0NCiAgICAgfQkNCiB9', '史诗魔法封印变换券', 'ssfmfybh', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '称号合成', 'Ly/np7Dlj7flkIjmiJANCg0KLy/np7Dlj7flkIjmiJANCmZ1bmN0aW9uIGNoaGNmdW4odXNlcil7DQogICAgdmFyIGludmVuID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ludmVuVyh1c2VyKTsgLy8g6I635Y+W5b2T5YmN6KeS6Imy55qE6IOM5YyF5a+56LGhDQogICAgdmFyIGl0ZW0xID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgOSk7IC8vIOiOt+WPluesrDnkuKroo4XlpIfnianlk4HnmoTlr7nosaENCiAgICB2YXIgaXRlbUlkMSA9IEludmVuX0l0ZW1fZ2V0S2V5KGl0ZW0xKTsgLy8g6I635Y+W6K+l54mp5ZOB55qESUQNCiAgICB2YXIgaXRlbTIgPSBDSW52ZW50b3J5X0dldEludmVuUmVmKGludmVuLCBJTlZFTlRPUllfVFlQRV9JVEVNLCAxMCk7IC8vIOiOt+WPluesrDEw5Liq6KOF5aSH54mp5ZOB55qE5a+56LGhDQogICAgdmFyIGl0ZW1JZDIgPSBJbnZlbl9JdGVtX2dldEtleShpdGVtMik7IC8vIOiOt+WPluivpeeJqeWTgeeahElEDQogICAgDQogICAgaWYgKGl0ZW1JZDEgPT0gMTAwMzMxNzM4ICYmIGl0ZW1JZDIgPT0gMjAyMzExMTc1KSB7DQogICAgICAgICAgICBJbnZlbl9JdGVtX2dldEtleShpdGVtMSkNCiAgICAgICAgICAgIHZhciBiYW96aHUgPSBpdGVtMS5hZGQoMTMpLnJlYWRVMzIoKTsJDQogICAgICAgIEludmVuX0l0ZW1fcmVzZXQoaXRlbTEpOyAvLyDlsIbnrKw55Liq6KOF5aSH54mp5ZOB5LuO6IOM5YyF5Lit5Yig6ZmkDQogICAgICAgICAgICBDVXNlcl9TZW5kVXBkYXRlSXRlbUxpc3QodXNlciwgMSwgMCwgOSk7IA0KICAgICAgICBJbnZlbl9JdGVtX3Jlc2V0KGl0ZW0yKTsgLy8g5bCG56ysMTDkuKroo4XlpIfnianlk4Hku47og4zljIXkuK3liKDpmaQNCiAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCAxMCk7IA0KICAgICAgICBhcGlfQ1VzZXJfQWRkSXRlbSh1c2VyLCAxMDAzMzE3NDcsIDEpOyANCiAgICAgICAgdmFyIGl0ZW0zID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgOSk7DQogICAgICAgIGl0ZW0zLmFkZCgxMykud3JpdGVVMzIoYmFvemh1KTsNCiAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHVzZXIsIDEsIDAsIDkpOw0KICAgIH0NCiAgICAgICAgaWYgKGl0ZW1JZDEgPT0gMjAyMzExMTc1ICYmIGl0ZW1JZDIgPT0gMTAwMzMxNzM4KSB7DQogICAgICAgICAgICBJbnZlbl9JdGVtX2dldEtleShpdGVtMikNCiAgICAgICAgICAgIHZhciBiYW96aHUgPSBpdGVtMi5hZGQoMTMpLnJlYWRVMzIoKTsNCiAgICAgICAgSW52ZW5fSXRlbV9yZXNldChpdGVtMSk7IC8vIOWwhuesrDnkuKroo4XlpIfnianlk4Hku47og4zljIXkuK3liKDpmaQNCiAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCA5KTsgDQogICAgICAgIEludmVuX0l0ZW1fcmVzZXQoaXRlbTIpOyAvLyDlsIbnrKwxMOS4quijheWkh+eJqeWTgeS7juiDjOWMheS4reWIoOmZpA0KICAgICAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHVzZXIsIDEsIDAsIDEwKTsgDQogICAgICAgIGFwaV9DVXNlcl9BZGRJdGVtKHVzZXIsIDEwMDMzMTc0NywgMSk7IA0KICAgICAgICB2YXIgaXRlbTMgPSBDSW52ZW50b3J5X0dldEludmVuUmVmKGludmVuLCBJTlZFTlRPUllfVFlQRV9JVEVNLCA5KTsNCiAgICAgICAgaXRlbTMuYWRkKDEzKS53cml0ZVUzMihiYW96aHUpOw0KICAgICAgICBDVXNlcl9TZW5kVXBkYXRlSXRlbUxpc3QodXNlciwgMSwgMCwgOSk7DQogICAgfQ0KfQ==', '称号合成', 'chhc_fun', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '装备分解', 'LyoqDQogDQogLyog6KOF5aSH5YiG6KejDQogKiBAcGFyYW0gdXNlcg0KICovDQpmdW5jdGlvbiBkZWNvbXBvc2UodXNlcil7DQogICAgLy8g5YiG6Kej5Yi4DQogICAgdmFyIGluZGV4ID0gMDsNCiAgICAvLyDmo4Dmn6Xlia/ogYzkuJrmmK/lkKblvIDlkK8NCiAgICB2YXIgY2hlY2tUYWcgPSBDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjRXhwZXJ0Sm9iKHVzZXIpOw0KICAgIGlmKGNoZWNrVGFnID09IDApew0KICAgICAgICBhcGlfQ1VzZXJfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHVzZXIsIuazqOaEj++8miDlia/ogYzkuJrmsqHmnInlvIDlkK/vvIEiLDEpOw0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQogICAgZm9yICh2YXIgaSA9IDk7IGkgPD0gMjQ7IGkrKykgew0KICAgICAgICB2YXIgZXF1ID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgaSk7DQogICAgICAgIGlmKEludmVuX0l0ZW1fZ2V0S2V5KGVxdSkpew0KICAgICAgICAgICAgLy8g5YiG6Kej6KOF5aSHDQogICAgICAgICAgICBEaXNQYXRjaGVyX0Rpc0pvaW50SXRlbV9kaXNqb2ludCh1c2VyLGksRU5VTV9JVEVNU1BBQ0VfSU5WRU5UT1JZLDIzOSx1c2VyLDB4RkZGRik7DQogICAgICAgICAgICAvLyDmo4Dmn6Xoo4XlpIfmmK/lkKblrZjlnKgNCiAgICAgICAgICAgIGVxdSA9IENJbnZlbnRvcnlfR2V0SW52ZW5SZWYoaW52ZW4sIElOVkVOVE9SWV9UWVBFX0lURU0sIGkpOw0KICAgICAgICAgICAgaWYoSW52ZW5fSXRlbV9nZXRLZXkoZXF1KSl7DQogICAgICAgICAgICAgICAgLy8g5aSx6LSlDQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAvLyDmiJDlip8NCiAgICAgICAgICAgICAgICBpbmRleCsrOw0KICAgICAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCBpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZihpbmRleD4wKXsNCiAgICAgICAgYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh1c2VyLCLmga3llpzvvJogIitpbmRleCsi5Lu26KOF5aSH5YiG6KejIOaIkOWKn++8gSIsMCk7DQogICAgfWVsc2V7DQogICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi5rOo5oSP77yaIOijheWkh+WIhuinoyDlpLHotKXvvIEiLDApOw0KICAgIH0NCn0=', '装备分解', 'decompose', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '扩充账号金库(120格)', '', '扩充账号金库(120格)', 'setMaxCAccountCargoSolt', 0);
        </sql>
    </changeSet>
</databaseChangeLog>
