<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd">
    <changeSet author="yuzhanfeng" id="20231217-1" dbms="mysql" failOnError="true">
        <sql dbms="mysql">
            ALTER TABLE da_frida_function MODIFY COLUMN children_function longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '依赖函数';
            ALTER TABLE da_frida_script MODIFY COLUMN children_function longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '依赖函数';
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '服务端基础api函数', '', '服务端基础api函数', 'sever_base_funcation', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '读取本地文件', 'Ly9saW51eOivu+acrOWcsOaWh+S7tg0KdmFyIGZvcGVuID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKE1vZHVsZS5nZXRFeHBvcnRCeU5hbWUobnVsbCwgJ2ZvcGVuJyksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ICJhYmkiOiAic3lzdiIgfSk7DQp2YXIgZnJlYWQgPSBuZXcgTmF0aXZlRnVuY3Rpb24oTW9kdWxlLmdldEV4cG9ydEJ5TmFtZShudWxsLCAnZnJlYWQnKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCddLCB7ICJhYmkiOiAic3lzdiIgfSk7DQp2YXIgZmNsb3NlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKE1vZHVsZS5nZXRFeHBvcnRCeU5hbWUobnVsbCwgJ2ZjbG9zZScpLCAnaW50JywgWydpbnQnXSwgeyAiYWJpIjogInN5c3YiIH0pOw0KZnVuY3Rpb24gYXBpX3JlYWRfZmlsZShwYXRoLCBtb2RlLCBsZW4pIHsNCiAgICB2YXIgcGF0aF9wdHIgPSBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKHBhdGgpOw0KICAgIHZhciBtb2RlX3B0ciA9IE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcobW9kZSk7DQogICAgdmFyIGYgPSBmb3BlbihwYXRoX3B0ciwgbW9kZV9wdHIpOw0KICAgIGlmIChmID09IDApDQogICAgICAgIHJldHVybiBudWxsOw0KICAgIHZhciBkYXRhID0gTWVtb3J5LmFsbG9jKGxlbik7DQogICAgdmFyIGZyZWFkX3JldCA9IGZyZWFkKGRhdGEsIDEsIGxlbiwgZik7DQogICAgZmNsb3NlKGYpOw0KICAgIC8v6L+U5Zue5a2X56ym5LiyDQogICAgaWYgKG1vZGUgPT0gJ3InKQ0KICAgICAgICByZXR1cm4gZGF0YS5yZWFkVXRmOFN0cmluZyhmcmVhZF9yZXQpOw0KICAgIC8v6L+U5Zue5LqM6L+b5Yi2YnVmZuaMh+mSiA0KICAgIHJldHVybiBkYXRhOw0KfQ==', '读取本地文件,加载本地json配置文件依赖', 'read_local_file', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('read_local_file', '加载本地json配置文件', 'IA0KDQoNCi8v5Yqg6L295pys5Zyw6YWN572u5paH5Lu2KGpzb27moLzlvI8pDQp2YXIgZ2xvYmFsX2NoYW5uZWwgPSAnJzsNCnZhciBnbG9iYWxfY29uZmlnID0ge307DQpmdW5jdGlvbiBsb2FkX2NvbmZpZyhjaGFubmVsKSB7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+5Yqg6L29anNvbumFjee9ruaWh+S7tiIpDQogICAgZ2xvYmFsX2NoYW5uZWw9Y2hhbm5lbDsNCiAgICB2YXIgZGF0YSA9IGFwaV9yZWFkX2ZpbGUoJy9kYXRhL2ZyaWRhLycgKyBjaGFubmVsICsgJy9mcmlkYV9jb25mLmpzb24nLCAncicsIDEwICogMTAyNCAqIDEwMjQpOw0KICAgIGdsb2JhbF9jb25maWcgPSBKU09OLnBhcnNlKGRhdGEpOw0KfQ==', 'frida主函数依赖，读取dnf-admin配套的json配置文件', 'load_json_config', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('auto_unseal_random_option_equipment,cancel_epic_ok,disable_check_create_character_limit,enable_createCreator,hook_check_gm,Interceptor_InterSelectMobileAuthReward,load_json_config,Privatestore_IgnoreNearDungeon,setUserMaxLevel,share_seria_room,up_13_no_exit', '根据配置初始化相关功能', 'Ly/moLnmja7muLjmiI/phY3nva7mjqfliLbnm7jlhbPlip/og70NCg0KLy/moLnmja7phY3nva7liJ3lp4vljJbnm7jlhbPlip/og70JDQpmdW5jdGlvbiBpbml0Rm9yQ29uZmlnKCl7DQogICAgdmFyIGdhbWVfY29uZmlnID0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXTsNCiAgICBpZihnYW1lX2NvbmZpZ1snZW5hYmxlX2dhbWVfbWFzdGVyJ10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v5omA5pyJ6LSm5Y+36KeS6Imy5byA5ZCvR03mnYPpmZANCiAgICAgICAgaG9va19jaGVja19nbSgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snZGlzYWJsZV9jaGVja19jcmVhdGVfY2hhcmFjdGVyX2xpbWl0J10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v6Kej6Zmk5q+P5pel5Yib5bu66KeS6Imy5pWw6YeP6ZmQ5Yi2DQogICAgICAgIGRpc2FibGVfY2hlY2tfY3JlYXRlX2NoYXJhY3Rlcl9saW1pdCgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snc2hhcmVfc2VyaWFfcm9vbSddID09PSAndHJ1ZScpew0KICAgICAgICAvL+WFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingQ0KICAgICAgICBzaGFyZV9zZXJpYV9yb29tKCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydQcml2YXRlc3RvcmVfSWdub3JlTmVhckR1bmdlb24nXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgLy/lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoNCiAgICAgICAgUHJpdmF0ZXN0b3JlX0lnbm9yZU5lYXJEdW5nZW9uKCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydlbmFibGVfY3JlYXRvciddID09PSAndHJ1ZScpew0KICAgICAgICAvL+W8gOWQr+WIm+W7uue8lOmAoA0KICAgICAgICBlbmFibGVfY3JlYXRlQ3JlYXRvcigpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snY2FuY2VsX2VwaWNfb2snXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgLy/lj7Lor5flhY3noa7orqQNCiAgICAgICAgY2FuY2VsX2VwaWNfb2soKTsNCiAgICB9DQogICAgaWYoZ2FtZV9jb25maWdbJ2F1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50J10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v6a2U5rOV5bCB5Y2w6Ieq5Yqo6Kej5bCBDQogICAgICAgIGF1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50KCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydkaXNhYmxlX21vYmlsZV9yZXdhcmRzJ10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmDQogICAgICAgIEludGVyY2VwdG9yX0ludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snbWF4X2xldmVsJ10gPiAwKXsNCiAgICAgICAgLy/orr7nva7mnIDlpKfnrYnnuqcNCiAgICAgICAgc2V0TWF4VXBHcmFkZShnYW1lX2NvbmZpZ1snbWF4X2xldmVsJ10pOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snZW5oYW5jZW1lbnRfbGV2ZWxfMTNfbm9fZXhpdCddID09PSAndHJ1ZScpew0KICAgICAgICAvLysxM+S7peS4iuW8uuWMluWIuOaXoOmcgOWwj+mAgA0KICAgICAgICBlbmhhbmNlbWVudF9sZXZlbF8xM19ub19leGl0KCk7DQogICAgfQ0KICAgIA0KfQ==', '根据配置初始化相关功能', 'init_for_game_config', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', 'debug消息处理', 'DQovL+aJp+ihjGRlYnVn5raI5oGvDQpmdW5jdGlvbiBkZWJ1Z2ZyaWRhKGRlYnVnRGF0YSkgew0KICAgY29uc29sZS5sb2coIuaOpeaUtuWIsGRlYnVn5raI5oGvOiIrZGVidWdEYXRhKTsNCn0=', '调试frida', 'debug_message_handler', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config,send_mail_api,api_GameWorld_SendNotiPacketMessage', 'json类型消息处理', 'DQovLyBqc29u57G75Z6L55qE5raI5oGv5aSE55CGDQpmdW5jdGlvbiBleGVjSnNvbk1lc3NhZ2UocGFyYW1Kc29uKSB7DQogICAgY29uc29sZS5sb2coIuaOpeaUtuWIsGpzb27mtojmga86IitKU09OLnN0cmluZ2lmeShwYXJhbUpzb24pKTsNCiAgICAvL+WIt+aWsOmFjee9rg0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnZmx1c2hfY29uZicpew0KICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PiBmbHVzaF9jb25mIik7DQogICAgICAgIGxvYWRfY29uZmlnKGdsb2JhbF9jaGFubmVsKTsNCiAgICAgICAgaW5pdEZvckNvbmZpZygpOw0KICAgIH0NCiAgICAvL+WPkemAgemCruS7tg0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnc2VuZF9tYWlsJyl7DQogICAgICAgIHZhciBzZW5kTWFpbER0byA9IHBhcmFtSnNvbi5kYXRhOw0KICAgICAgICB2YXIgaXRlbUxpc3QgPSBzZW5kTWFpbER0by5pdGVtTGlzdDsNCiAgICAgICAgdmFyIG5ld0l0ZW1MaXN0ID0gW107DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbUxpc3QubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgICAgIHZhciB0ZW0gPSBbXTsNCiAgICAgICAgICAgIHRlbS5wdXNoKGl0ZW1MaXN0W2ldLml0ZW1JZCk7DQogICAgICAgICAgICB0ZW0ucHVzaChpdGVtTGlzdFtpXS5jb3VudCk7DQogICAgICAgICAgICBuZXdJdGVtTGlzdC5wdXNoKHRlbSk7DQogICAgICAgIH0NCiAgICAgICAgYXBpX1dvbmdXb3JrX0NNYWlsQm94SGVscGVyX1JlcURCU2VuZE5ld1N5c3RlbU11bHRpTWFpbChzZW5kTWFpbER0by5jaGFyYWNObyxzZW5kTWFpbER0by50aXRsZSxzZW5kTWFpbER0by5jb250ZW50LHNlbmRNYWlsRHRvLmdvbGQsbmV3SXRlbUxpc3QpOw0KICAgIH0NCiAgICAvL+WPkemAgeWFrOWRig0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnc2VuZF9ub3RpY2UnKXsNCiAgICAgICAgdmFyIG1lc3NhZ2UgPSBwYXJhbUpzb24uZGF0YTsNCiAgICAgICAgcHVzaFNlbmROb3RpUGFja2V0TWVzc2FnZShtZXNzYWdlLDE2KTsNCiAgICB9DQp9', 'json消息处理函数', 'json_message_exec', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '非json类型消息处理', 'DQovLyDpnZ5qc29u5qC85byP55qE5raI5oGv5aSE55CG6YC76L6RDQpmdW5jdGlvbiBleGVjTm9Kc29uTWVzc2FnZShtZXNzYWdlU3RyKSB7DQogIGNvbnNvbGUubG9nKCLmjqXmlLbliLDpnZ5qc29u5raI5oGvOiIrIG1lc3NhZ2VTdHIpOw0KfQ==', '非json消息处理函数	', 'no_json_message_exec', 1);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '所有账号角色开启GM权限', 'Ly/miYDmnInotKblj7fop5LoibLlvIDlkK9HTeadg+mZkA0KZnVuY3Rpb24gaG9va19jaGVja19nbSgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lvIDlkK9HTeadg+mZkCIpDQogICAgLy9HTei0puaItw0KICAgIC8vV29uZ1dvcms6OkNHTUFjY291bnRzOjppc0dNDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDgxMDkzNDYpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/lvLrliLbov5Tlm550cnVlDQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KDQogICAgLy9HTeinkuiJsg0KICAgIC8vQ1VzZXI6OmlzR01Vc2VyDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDgxNDU4OUMpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/lvLrliLbov5Tlm550cnVlDQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '所有账号角色开启GM权限', 'hook_check_gm', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '解除每日创建角色数量限制', 'DQovL+ino+mZpOavj+aXpeWIm+W7uuinkuiJsuaVsOmHj+mZkOWItg0KZnVuY3Rpb24gZGlzYWJsZV9jaGVja19jcmVhdGVfY2hhcmFjdGVyX2xpbWl0KCkgew0KICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7op6PpmaTmr4/ml6XliJvlu7rop5LoibLmlbDph4/pmZDliLYiKQ0KICAgIC8vREJfQ3JlYXRlQ2hhcmFjOjpDaGVja0xpbWl0Q3JlYXRlTmV3Q2hhcmFjDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg0MDE5MjIpLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIC8v5by65Yi26L+U5Zue5YWB6K645Yib5bu6DQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '解除每日创建角色数量限制', 'disable_check_create_character_limit', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '允许赛利亚房间的人互相可见', 'DQovL+WFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingQ0KZnVuY3Rpb24gc2hhcmVfc2VyaWFfcm9vbSgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lhYHorrjotZvliKnkuprmiL/pl7TnmoTkurrkupLnm7jlj6/op4EiKQ0KICAgIC8vSG9vayBBcmVhOjppbnNlcnRfdXNlcg0KICAgIEludGVyY2VwdG9yLmF0dGFjaChwdHIoMHg4NkMyNUE2KSwgew0KDQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICAvL+S/ruaUueagh+W/l+S9jSwg6K6p5pyN5Yqh5Zmo5bm/5pKt6LWb5Yip5Lqa5peF6aaG5raI5oGvDQogICAgICAgICAgICBhcmdzWzBdLmFkZCgweDY4KS53cml0ZUludCgwKTsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICB9DQogICAgfSk7DQp9', '允许赛利亚房间的人互相可见', 'share_seria_room', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '忽略副本门口禁止摆摊', 'Ly/lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoNCmZ1bmN0aW9uIFByaXZhdGVzdG9yZV9JZ25vcmVOZWFyRHVuZ2VvbigpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoiKQ0KICAgIEludGVyY2VwdG9yLmF0dGFjaChwdHIoMHgwODVDNTA4MiksIHsNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgLy/ojrflj5bov5Tlm57lgLwNCiAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHJldHZhbC50b0ludDMyKCk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygnUmV0dXJuIFZhbHVlOicgKyByZXR1cm5WYWx1ZSk7DQogICAgICAgICAgICAvL+W8uuWItui/lOWbnjENCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDEpOw0KICAgICAgICB9DQogICAgfSk7DQp9', '忽略副本门口禁止摆摊', 'Privatestore_IgnoreNearDungeon', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config', '客户端临时提升技能等级', 'Ly/lrqLmiLfnq6/kuLTml7bmj5DljYfmioDog73nrYnnuqcNCg0KSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2NkM0NkEpLCB7DQogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgLy/op5LoibLmioDog73kv6Hmga8NCiAgICAgICAgdGhpcy5za2lsbF9wdHIgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxSKGFyZ3NbMF0pOw0KICAgICAgICAvL+S/neWtmOWOn+Wni+aKgOiDveS/oeaBrw0KICAgICAgICB0aGlzLm9sZF9za2lsbF9pbmZvID0gdGhpcy5za2lsbF9wdHIucmVhZEJ5dGVBcnJheSgyMDMgKiAzMik7DQogICAgICAgIGlmIChnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydza2lsbFVwZ3JhZGluZyddID4gMCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+5a6i5oi356uv5Li05pe25o+Q5Y2H5oqA6IO9562J57qnIiArICc9PT4nICsgZ2FtZV9jb25maWdbJ3NraWxsVXBncmFkaW5nJ10pDQogICAgICAgICAgICAvL+S4tOaXtuS/ruaUueaKgOiDveetiee6pw0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMjAzOyArK2kpIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2lsbF9wdHIuYWRkKDIgKiAoaSArIDMyKSArIDYpLnJlYWRVOCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBvbGRfc2tpbGxfbGV2ZWwgPSB0aGlzLnNraWxsX3B0ci5hZGQoMiAqIChpICsgMzIpICsgNykucmVhZFU4KCk7DQogICAgICAgICAgICAgICAgICAgIC8v5omA5pyJ5oqA6IO9562J57qnKzUNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lsbF9wdHIuYWRkKDIgKiAoaSArIDMyKSArIDcpLndyaXRlVTgob2xkX3NraWxsX2xldmVsICsgNSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfSwNCiAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgIC8v6L+Y5Y6f5oqA6IO9562J57qnDQogICAgICAgIHRoaXMuc2tpbGxfcHRyLndyaXRlQnl0ZUFycmF5KHRoaXMub2xkX3NraWxsX2luZm8pOw0KICAgIH0NCn0pOw0K', '客户端临时提升技能等级', 'skillUpgrading', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '取消新账号送成长契约', 'Ly/lj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYNCmZ1bmN0aW9uIEludGVyY2VwdG9yX0ludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYiKQ0KICAgIC8v6L+Y5Y6fIEludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZDo6ZGlzcGF0Y2hfc2lnIOWHveaVsA0KICAgIHZhciBEZWZwdHIgPSBwdHIoMHgwODE2MTM4NCk7DQogICAgdmFyIHZhbHVlID0gRGVmcHRyLnJlYWRVOCgpDQogICAgaWYgKHZhbHVlICE9IDB4MEYpIHsNCg0KICAgICAgICBNZW1vcnkucHJvdGVjdChEZWZwdHIsIDEwLCAncnd4Jyk7DQogICAgICAgIERlZnB0ci53cml0ZVNob3J0KDB4ODQwRik7DQogICAgfQ0KICAgIC8v6YeN5YaZSW50ZXJTZWxlY3RNb2JpbGVBdXRoUmV3YXJkOjpkaXNwYXRjaF9zaWcg5Ye95pWwDQogICAgdmFyIEludGVyX0Rpc3BhdGNoUHIgPSBwdHIoMHgwODE2MTMyQSk7DQogICAgdmFyIEludGVyX0Rpc3BhdGNoID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKEludGVyX0Rpc3BhdGNoUHIsICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsgImFiaSI6ICJzeXN2IiB9KTsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKEludGVyX0Rpc3BhdGNoUHIsIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAoSW50ZXJTZWxlY3RNb2JpbGVBdXRoUmV3YXJkLCBDVXNlciwgYTMpIHsNCg0KICAgICAgICAvL3ZhciBJbnRlcl9EaXNwYXRjaE9wZW4gPSB0cnVlOw0KICAgICAgICB2YXIgSW50ZXJfRGlzcGF0Y2hPcGVuID0gZmFsc2U7DQogICAgICAgIGlmIChJbnRlcl9EaXNwYXRjaE9wZW4pIHsNCg0KICAgICAgICAgICAgYTMuYWRkKDQpLndyaXRlSW50KDApOw0KICAgICAgICAgICAgcmV0dXJuIEludGVyX0Rpc3BhdGNoKEludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCwgQ1VzZXIsIGEzKTsgLy/miafooYzljp/lh73mlbDlj5HpgIHmiJDplb/lpZHnuqYNCg0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIDA7IC8v5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmICAgIOi/lOWbnjDooajnpLrmraPluLjov5Tlm54gDQoNCiAgICB9LCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddKSk7DQp9', '取消新账号送成长契约', 'Interceptor_InterSelectMobileAuthReward', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('api_GameWorld_SendNotiPacketMessage,api_recharge_cash_cera_point,sever_base_funcation,load_json_config', '副本捡东西喊喇叭给点券', 'Ly/lia/mnKzmjaHkuJzopb/llorlloflj63nu5nngrnliLgNCiANCi8v5Ymv5pys5o2h5Lic6KW/5ZaK5ZaH5Y+t57uZ54K55Yi4DQpmdW5jdGlvbiBwcm9jZXNzaW5nX2RhdGEoaXRlbV9pZCwgdXNlcikgew0KICAgIGlmIChnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkdW5nZW9uc19hZGRfaXRlbV9ub3RpY2UnXSA9PT0gJ3RydWUnKSB7DQogICAgICAgIHZhciBpdGVtRGF0YSA9IENEYXRhTWFuYWdlcl9maW5kX2l0ZW0oR19DRGF0YU1hbmFnZXIoKSwgaXRlbV9pZCk7DQogICAgICAgIHZhciBlcXVSYXJpdHkgPSBDSXRlbV9HZXRSYXJpdHkoaXRlbURhdGEpOyAvLyDnqIDmnInluqYgID49MyDnsonoibLku6XkuIoNCiAgICAgICAgLy/lpJrlsJHnqIDmnInluqbmiY3kvJrop6blj5ENCiAgICAgICAgaWYgKGVxdVJhcml0eSA+PSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkdW5nZW9uc19hZGRfaXRlbV9ub3RpY2VfZXF1UmFyaXR5J10pIHsNCiAgICAgICAgICAgIHZhciBjaGFyYWNOYW1lID0gYXBpX0NVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNOYW1lKHVzZXIpOw0KICAgICAgICAgICAgY29uc3QgaXRlbU5hbWUgPSBhcGlfQ0l0ZW1fR2V0SXRlbU5hbWUoaXRlbV9pZCk7DQogICAgICAgICAgICAvL+aSreaKpeWGheWuuQ0KICAgICAgICAgICAgdmFyIHRleHQgPSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydkdW5nZW9uc19hZGRfaXRlbV9ub3RpY2VfdGV4dCddOw0KICAgICAgICAgICAgLy/lpZblirHngrnliLjmlrnlvI8NCiAgICAgICAgICAgIHZhciB0eXBlID0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnZHVuZ2VvbnNfYWRkX2l0ZW1fbm90aWNlX2Nhc2hfY2VyYSddOw0KICAgICAgICAgICAgaWYgKHR5cGUgPT0gMCkgew0KICAgICAgICAgICAgICAgIC8v5Y+q5pKt5oql5LiN5aWW5Yqx54K55Yi4DQogICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgiPzEiLCBjaGFyYWNOYW1lKS5yZXBsYWNlKCI/MiIsIGl0ZW1OYW1lKS5yZXBsYWNlKCI/MyIsIHR5cGUpOw0KICAgICAgICAgICAgICAgIGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHRleHQsIDE0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0eXBlID09IDEpIHsNCiAgICAgICAgICAgICAgICAvL+WlluWKsemaj+acuueCueWIuA0KICAgICAgICAgICAgICAgIGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHRleHQsIDE0KTsNCiAgICAgICAgICAgICAgICAvL+acgOWwj+eCueWIuOaVsOmHjw0KICAgICAgICAgICAgICAgIHZhciBtaW4gPSAxOw0KICAgICAgICAgICAgICAgIC8v5pyA5aSn54K55Yi45pWw6YePDQogICAgICAgICAgICAgICAgdmFyIG1heCA9IDg4ODsNCiAgICAgICAgICAgICAgICB0eXBlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluOw0KICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoIj8xIiwgY2hhcmFjTmFtZSkucmVwbGFjZSgiPzIiLCBpdGVtTmFtZSkucmVwbGFjZSgiPzMiLCB0eXBlKTsNCiAgICAgICAgICAgICAgICBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIHR5cGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHR5cGUgPiAxKSB7DQogICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgiPzEiLCBjaGFyYWNOYW1lKS5yZXBsYWNlKCI/MiIsIGl0ZW1OYW1lKS5yZXBsYWNlKCI/MyIsIHR5cGUpOw0KICAgICAgICAgICAgICAgIC8v5aWW5Yqx6K6+572u55qE54K55Yi45pWw6YePDQogICAgICAgICAgICAgICAgYXBpX0dhbWVXb3JsZF9TZW5kTm90aVBhY2tldE1lc3NhZ2UodGV4dCwgMTQpOw0KICAgICAgICAgICAgICAgIGFwaV9yZWNoYXJnZV9jYXNoX2NlcmEodXNlciwgdHlwZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgfQ0KICAgIENVc2VyX3NlbmRfaXRlbXNwYWNlKHVzZXIsIElOVkVOVE9SWV9UWVBFX0lURU0pOw0KfSAg', '副本捡东西喊喇叭给点券', 'processing_data', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '修复绝望之塔', 'DQovL+S/ruWkjee7neacm+S5i+WhlA0KLy9za2lwX3VzZXJfYXBjOiDkuLp0cnVl5pe2LCDot7Pov4fmr48xMOWxgueahFVzZXJBUEMNCmZ1bmN0aW9uIGZpeF9UT0Qoc2tpcF91c2VyX2FwYykgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuS/ruWkjee7neacm+S5i+WhlCIpDQogICAgLy/mr4/ml6Xov5vlhaXmrKHmlbDpmZDliLYNCiAgICAvL1RPRF9Vc2VyU3RhdGU6OmdldEVudGVyQ291bnQNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDg2NDM4NzIpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIC8v5LuK5pel5bey6L+b5YWl5qyh5pWw5by65Yi25riF6Zu2DQogICAgICAgICAgICBhcmdzWzBdLmFkZCgweDEwKS53cml0ZUludCgwKTsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICB9DQogICAgfSk7DQoNCiAgICAvL+avjzEw5bGC5oyR5oiY546p5a62QVBDIOacjeWKoeWZqOWGheinkuiJsuS4jei2szEw5Liq5peg5rOV6L+b5YWlDQogICAgaWYgKHNraXBfdXNlcl9hcGMpIHsNCiAgICAgICAgLy/ot7Pov4cxMC8yMC8uLi4vOTDlsYINCiAgICAgICAgLy9UT0RfVXNlclN0YXRlOjpnZXRUb2RheUVudGVyTGF5ZXINCiAgICAgICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4NjQzODNFKSwgew0KDQogICAgICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICAgICAgICAgIC8v57ud5pyb5LmL5aGU5b2T5YmN5bGC5pWwDQogICAgICAgICAgICAgICAgdmFyIHRvZGF5X2VudGVyX2xheWVyID0gYXJnc1sxXS5hZGQoMHgxNCkucmVhZFNob3J0KCk7DQoNCiAgICAgICAgICAgICAgICBpZiAoKCh0b2RheV9lbnRlcl9sYXllciAlIDEwKSA9PSA5KSAmJiAodG9kYXlfZW50ZXJfbGF5ZXIgPiAwKSAmJiAodG9kYXlfZW50ZXJfbGF5ZXIgPCAxMDApKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5b2T5YmN5bGC5pWw5Li6MTDnmoTlgI3mlbDml7YgIOebtOaOpei/m+WFpeS4i+S4gOWxgg0KICAgICAgICAgICAgICAgICAgICBhcmdzWzFdLmFkZCgweDE0KS53cml0ZVNob3J0KHRvZGF5X2VudGVyX2xheWVyICsgMSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCg0KICAgIC8v5L+u5aSN6YeR5biB5byC5bi4DQogICAgLy9DUGFydHk6OlVzZUFuY2llbnREdW5nZW9uSXRlbXMNCiAgICB2YXIgQ1BhcnR5X1VzZUFuY2llbnREdW5nZW9uSXRlbXNfcHRyID0gcHRyKDB4ODU5RUFDMik7DQogICAgdmFyIENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zX3B0ciwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ICJhYmkiOiAic3lzdiIgfSk7DQogICAgSW50ZXJjZXB0b3IucmVwbGFjZShDUGFydHlfVXNlQW5jaWVudER1bmdlb25JdGVtc19wdHIsIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAocGFydHksIGR1bmdlb24sIGludmVuX2l0ZW0sIGE0KSB7DQoNCiAgICAgICAgLy/lvZPliY3ov5vlhaXnmoTlnLDkuIvln45pZA0KICAgICAgICB2YXIgZHVuZ2Vvbl9pbmRleCA9IENEdW5nZW9uX2dldF9pbmRleChkdW5nZW9uKTsNCg0KICAgICAgICAvL+agueaNruWcsOS4i+Wfjmlk5Yik5pat5piv5ZCm5Li657ud5pyb5LmL5aGUDQogICAgICAgIGlmICgoZHVuZ2Vvbl9pbmRleCA+PSAxMTAwOCkgJiYgKGR1bmdlb25faW5kZXggPD0gMTExMDcpKSB7DQogICAgICAgICAgICAvL+e7neacm+S5i+WhlCDkuI3lho3miaPpmaTph5HluIENCiAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICB9DQoNCiAgICAgICAgLy/lhbbku5blia/mnKzmiafooYzljp/lp4vmiaPpmaTpgZPlhbfpgLvovpENCiAgICAgICAgcmV0dXJuIENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zKHBhcnR5LCBkdW5nZW9uLCBpbnZlbl9pdGVtLCBhNCk7DQogICAgfSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddKSk7DQp9', '修复绝望之塔', 'fix_TOD', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '史诗免确认', 'Ly/lj7Lor5flhY3noa7orqQNCmZ1bmN0aW9uIGNhbmNlbF9lcGljX29rKCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlj7Lor5flhY3noa7orqQiKQ0KICAgIE1lbW9yeS5wYXRjaENvZGUocHRyKDB4MDg1QTU2Q0UpLmFkZCgyKSwgMSwgZnVuY3Rpb24gKGNvZGUpIHsNCiAgICAgICAgdmFyIGN3ID0gbmV3IFg4NldyaXRlcihjb2RlLCB7IHBjOiBwdHIoMHgwODVBNTZDRSkuYWRkKDIpIH0pOw0KICAgICAgICBjdy5wdXRVOCg5KTsNCiAgICAgICAgY3cuZmx1c2goKTsNCiAgICB9KTsNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDgxNTBmMTgpLCB7DQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDApOw0KICAgICAgICB9DQogICAgfSk7DQp9', '史诗免确认', 'cancel_epic_ok', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '开启创建缔造', 'Ly/lvIDlkK/liJvlu7rnvJTpgKANCmZ1bmN0aW9uIGVuYWJsZV9jcmVhdGVDcmVhdG9yKCl7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+IOW8gOWQr+WIm+W7uue8lOmAoCIpDQogICAgTWVtb3J5LnBhdGNoQ29kZShwdHIoMHgwODFDMDI5RSkuYWRkKDEpLCAxLCBmdW5jdGlvbiAoY29kZSkgew0KICAgICAgICB2YXIgY3cgPSBuZXcgWDg2V3JpdGVyKGNvZGUsIHsgcGM6IHB0cigweDA4MUMwMjlFKS5hZGQoMSkgfSk7DQogICAgICAgIGN3LnB1dFU4KDExKTsNCiAgICAgICAgY3cuZmx1c2goKTsNCiAgICB9KTsNCn0=', '开启创建缔造', 'enable_createCreator', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config', '强制开启深渊模式', 'IC8v5byA5ZCv5rex5riK5qih5byPDQpJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDg1YTA5NTQpLCB7DQogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgaWYgKGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ3N0YXJ0SGVsbFBhcnR5J10gPT09ICd0cnVlJykgew0KICAgICAgICAgICAgYXJnc1szXSA9IHB0cigxKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlvLrliLblvIDlkK/mt7HmuIrmqKHlvI8iKQ0KICAgICAgICB9DQogICAgfQ0KfSk7DQo=', '强制开启深渊模式', 'startHellParty', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '+13以上强化券无需小退', 'Ly8rMTPku6XkuIrlvLrljJbliLjml6DpnIDlsI/pgIANCg0KZnVuY3Rpb24gZW5oYW5jZW1lbnRfbGV2ZWxfMTNfbm9fZXhpdCgpIHsNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDgwRkM4NTApLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB0aGlzLmVxdWlQb3MgPSBhcmdzWzJdLmFkZCgyNykucmVhZFUxNigpOw0KICAgICAgICAgICAgdGhpcy51c2VyID0gYXJnc1sxXTsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHRoaXMudXNlciwgMSwgMCwgdGhpcy5lcXVpUG9zKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '+13以上强化券无需小退', 'up_13_no_exit', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '跨界石(未完善）', 'DQovKioNCiAqIOi3qOeVjOefs++8miDlsIboo4XlpIfmoI/nmoTnrKzkuIDkuKrmoLzlrZDnmoToo4XlpIfnp7vlhaXliLDotKblj7fph5HlupPvvIzoh6rliqjmib7nqbrnmoTmoLzlrZDvvIzmiYDku6Xlj6/ku6XlkIzml7bnp7vlhaXlpJrku7YNCiAqIEBwYXJhbSB1c2VyDQogKi8NCmZ1bmN0aW9uIGNyb3Nzb3Zlcih1c2VyKXsNCiAgICAvLyDot6jnlYwgIOWwhuijheWkh+enu+WFpeWIsOi0puWPt+mHkeW6kw0KICAgIHZhciBhY2NvdW50Q2FyZ28gPSBDVXNlcl9HZXRBY2NvdW50Q2FyZ28odXNlcik7DQogICAgY29uc29sZS5sb2coJ2FjY291bnRDYXJnb++8micrYWNjb3VudENhcmdvKTsNCiAgICB2YXIgZW1wdHlJbmRleCA9IENBY2NvdW50Q2FyZ29fR2V0RW1wdHlTbG90X05FVyhhY2NvdW50Q2FyZ28pOw0KICAgIGNvbnNvbGUubG9nKCdhY2NvdW50Q2FyZ28gZW1wdHlJbmRleDonK2VtcHR5SW5kZXgpDQogICAgaWYoZW1wdHlJbmRleD09LTEpew0KICAgICAgICBhcGlfQ1VzZXJfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHVzZXIsIui3qOeVjOWksei0pe+8mui0puWPt+mHkeW6k+ayoeacieepuueahOagvOWtkO+8ge+8ge+8gSIsMCk7DQogICAgfQ0KICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQogICAgdmFyIGVxdSA9IENJbnZlbnRvcnlfR2V0SW52ZW5SZWYoaW52ZW4sIElOVkVOVE9SWV9UWVBFX0lURU0sIDkpOw0KICAgIHZhciBpdGVtSWQgPSBJbnZlbl9JdGVtX2dldEtleShlcXUpOw0KICAgIGlmKGl0ZW1JZCl7DQogICAgICAgIHZhciB0YWcgPSBDQWNjb3VudENhcmdvX0luc2VydEl0ZW1fTkVXKGFjY291bnRDYXJnbyxlcXUsZW1wdHlJbmRleCk7DQogICAgICAgIGlmKHRhZz09LTEpew0KICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZhaWwhISEnKTsNCiAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi6Leo55WM5aSx6LSl77ya56e75YWl6KOF5aSHZXJyb3IiLDApOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIEludmVuX0l0ZW1fcmVzZXQoZXF1KTsNCiAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCA5KTsNCiAgICAgICAgICAgIENBY2NvdW50Q2FyZ29fU2VuZEl0ZW1MaXN0X05FVyhhY2NvdW50Q2FyZ28pOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MhISEnKTsNCiAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodXNlciwi6Leo55WM5oiQ5Yqf77ya5bey5a2Y5YWl56ysICIrKGVtcHR5SW5kZXgrMSkrIiDkuKrmoLzlrZDvvIEiLDApOw0KICAgICAgICB9DQogICAgfQ0KfQ==', '将装备栏的第一个格子的装备移入到账号金库，自动找空的格子，所以可以同时移入多件', 'crossover', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '设置最大等级', '', '设置最大等级', 'setUserMaxLevel', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('api_GameWorld_SendNotiPacketMessage,sever_base_funcation,load_json_config', '角色登入登出处理', 'Ly/op5LoibLnmbvlhaXnmbvlh7rlpITnkIYNCiANCi8v6KeS6Imy55m75YWl55m75Ye65aSE55CGDQpmdW5jdGlvbiBob29rX3VzZXJfaW5vdXRfZ2FtZV93b3JsZCgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g5byA5ZCv6KeS6Imy55m75YWl55m75Ye65aSE55CGIik7DQogICAgLy/pgInmi6nop5LoibLlpITnkIblh73mlbAgSG9vayBHYW1lV29ybGQ6OnJlYWNoX2dhbWVfd29ybGQNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODZDNEU1MCksIHsNCiAgICAgICAgLy/lh73mlbDlhaXlj6MsIOaLv+WIsOWHveaVsOWPguaVsGFyZ3MNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIC8v5L+d5a2Y5Ye95pWw5Y+C5pWwDQogICAgICAgICAgICB0aGlzLnVzZXIgPSBhcmdzWzFdOyAgICAgICAgICANCiAgICAgICAgICAgIHZhciBjaGFyYWNfbm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTm8odGhpcy51c2VyKTsNCiAgICAgICAgICAgIHZhciBjaGFyYWNfTmFtZSA9IGFwaV9DVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTmFtZSh0aGlzLnVzZXIpOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ+inkuiJsjwnK2NoYXJhY19OYW1lKyc6JytjaGFyYWNfbm8rJz7nmbvlvZXmuLjmiI8nKTsNCiAgICAgICAgICAgIHZhciBnYW1lX2NvbmZpZyA9IGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ107DQogICAgICAgICAgICBpZihnYW1lX2NvbmZpZ1snZW5hYmxlX3VzZXJfbG9naW5fd2VsY29tZSddID09PSAndHJ1ZScpew0KICAgICAgICAgICAgIC8v57uZ6KeS6Imy5Y+R5raI5oGv6Zeu5YCZDQogICAgICAgICAgICAgYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh0aGlzLnVzZXIsIGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9sb2dpbl93ZWxjb21lX3RleHQnXS5yZXBsYWNlKCclcycsIGNoYXJhY19OYW1lKSwgMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvL+mikemBk+WFrOWRig0KICAgICAgICAgICAgaWYoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2xvZ2luX25vdGljZSddID09PSAndHJ1ZScpew0KICAgICAgICAgICAgIHB1c2hTZW5kTm90aVBhY2tldE1lc3NhZ2UoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2xvZ2luX25vdGljZV90ZXh0J10ucmVwbGFjZSgnJXMnLCBjaGFyYWNfTmFtZSksMTYpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdmFyIHVzZXJEdG89ew0KICAgICAgICAgICAgICAgICd0eXBlJzonZ2FtZV91c2VyX2xvZ2luJywNCiAgICAgICAgICAgICAgICAnZGF0YSc6IGNoYXJhY19ubw0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIHNlbmQoSlNPTi5zdHJpbmdpZnkodXNlckR0bykpOw0KICAgICAgICB9LA0KICAgICAgICAvL+WOn+WHveaVsOaJp+ihjOWujOavlSwg6L+Z6YeM5Y+v5Lul5b6X5Yiw5bm25L+u5pS56L+U5Zue5YC8cmV0dmFsDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgfQ0KICAgIH0pOw0KDQogICAgLy/op5LoibLpgIDlh7rml7blpITnkIblh73mlbAgSG9vayBHYW1lV29ybGQ6OmxlYXZlX2dhbWVfd29ybGQNCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODZDNTI4OCksIHsNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIHZhciB1c2VyID0gYXJnc1sxXTsNCiAgICAgICAgICAgIHRoaXMudXNlciA9IHVzZXI7DQogICAgICAgIH0NCiAgICB9KTsNCiAgICAvL+inkuiJsumAgOWHuuaXtuWkhOeQhuWHveaVsCBIb29rIENHYW1lTWFuYWdlcjo6dXNlcl9leGl0DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4Mjk4NWE4KSwgew0KDQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB2YXIgdXNlciA9IGFyZ3NbMV07DQogICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19ubyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNObyh0aGlzLnVzZXIpOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19OYW1lID0gYXBpX0NVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNOYW1lKHRoaXMudXNlcik7DQogICAgICAgICAgICBjb25zb2xlLmxvZygn6KeS6ImyPCcrY2hhcmFjX05hbWUrJzonK2NoYXJhY19ubysnPumAgOWHuua4uOaIjycpOw0KICAgICAgICAgICAgLy/popHpgZPlhazlkYoNCiAgICAgICAgICAgIGlmKGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9leGl0X25vdGljZSddID09PSAndHJ1ZScpew0KICAgICAgICAgICAgIHB1c2hTZW5kTm90aVBhY2tldE1lc3NhZ2UoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2V4aXRfbm90aWNlX3RleHQnXS5yZXBsYWNlKCclcycsIGNoYXJhY19OYW1lKSwxNik7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIC8vIHZhciBhY2NJZCA9IENVc2VyX2dldF9hY2NfaWQodGhpcy51c2VyKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '角色登入登出处理', 'hook_user_inout_game_world', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '魔法封印自动解封', 'Ly/prZTms5XlsIHljbDoh6rliqjop6PlsIENCmZ1bmN0aW9uIGF1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50KCkgew0KICAgIC8vQ0ludmVudG9yeTo6aW5zZXJ0SXRlbUludG9JbnZlbnRvcnkNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g6a2U5rOV5bCB5Y2w6Ieq5Yqo6Kej5bCBIik7DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg1MDJEODYpLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB0aGlzLnVzZXIgPSBhcmdzWzBdLnJlYWRQb2ludGVyKCk7DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCg0KICAgICAgICAgICAgLy/nianlk4HmoI/mlrDlop7nianlk4HnmoTkvY3nva4NCiAgICAgICAgICAgIHZhciBzbG90ID0gcmV0dmFsLnRvSW50MzIoKTsNCiAgICAgICAgICAgIGlmIChzbG90ID4gMCkgew0KICAgICAgICAgICAgICAgIC8v6I635Y+W6YGT5YW355qE6KeS6ImyDQogICAgICAgICAgICAgICAgdmFyIHVzZXIgPSB0aGlzLnVzZXI7DQoNCiAgICAgICAgICAgICAgICAvL+inkuiJsuiDjOWMhQ0KICAgICAgICAgICAgICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQoNCiAgICAgICAgICAgICAgICAvL+iDjOWMheS4reaWsOWinueahOmBk+WFtw0KICAgICAgICAgICAgICAgIHZhciBpbnZlbl9pdGVtID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgc2xvdCk7DQoNCiAgICAgICAgICAgICAgICAvL+i/h+a7pOmBk+WFt+exu+Weiw0KICAgICAgICAgICAgICAgIGlmICghSW52ZW5fSXRlbV9pc0VxdWlwYWJsZUl0ZW1UeXBlKGludmVuX2l0ZW0pKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQoNCiAgICAgICAgICAgICAgICAvL+ijheWkh2lkDQogICAgICAgICAgICAgICAgdmFyIGl0ZW1faWQgPSBJbnZlbl9JdGVtX2dldEtleShpbnZlbl9pdGVtKTsNCg0KICAgICAgICAgICAgICAgIC8vcHZm5Lit6I635Y+W6KOF5aSH5pWw5o2uDQogICAgICAgICAgICAgICAgdmFyIGNpdGVtID0gQ0RhdGFNYW5hZ2VyX2ZpbmRfaXRlbShHX0NEYXRhTWFuYWdlcigpLCBpdGVtX2lkKTsNCg0KICAgICAgICAgICAgICAgIC8v5qOA5p+l6KOF5aSH5piv5ZCm5Li66a2U5rOV5bCB5Y2w57G75Z6LDQogICAgICAgICAgICAgICAgaWYgKCFDRXF1aXBJdGVtX0lzUmFuZG9tT3B0aW9uKGNpdGVtKSkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAgICAgLy/mmK/lkKblt7Looqvop6PpmaTprZTms5XlsIHljbDvvIjprZTms5XlsIHljbDliY0xMOS4quWtl+iKguaYr+WQpuS4ujDvvIkNCiAgICAgICAgICAgICAgICB2YXIgcmFuZG9tX29wdGlvbiA9IGludmVuX2l0ZW0uYWRkKDM3KTsNCiAgICAgICAgICAgICAgICBpZiAocmFuZG9tX29wdGlvbi5yZWFkVTMyKCkgfHwgcmFuZG9tX29wdGlvbi5hZGQoNCkucmVhZFUzMigpIHx8IHJhbmRvbV9vcHRpb24uYWRkKDgpLnJlYWRTaG9ydCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvL+Wwneivleino+mZpOmtlOazleWwgeWNsA0KICAgICAgICAgICAgICAgIHZhciByZXQgPSByYW5kb21fb3B0aW9uX0NSYW5kb21PcHRpb25JdGVtSGFuZGxlX2dpdmVfb3B0aW9uKHB0cigweDk0MUY4MjApLnJlYWRQb2ludGVyKCksIGl0ZW1faWQsIENJdGVtX0dldFJhcml0eShjaXRlbSksIENJdGVtX0dldFVzYWJsZUxldmVsKGNpdGVtKQ0KICAgICAgICAgICAgICAgICAgICAsIENJdGVtX0dldEl0ZW1Hcm91cE5hbWUoY2l0ZW0pLCBDRXF1aXBJdGVtX0dldFJhbmRvbU9wdGlvbkdyYWRlKGNpdGVtKSwgaW52ZW5faXRlbS5hZGQoMzcpKTsNCiAgICAgICAgICAgICAgICBpZiAocmV0KSB7DQogICAgICAgICAgICAgICAgICAgIC8v6YCa55+l5a6i5oi356uv5pyJ6KOF5aSH5pu05pawDQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCBzbG90KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCn0=', '魔法封印自动解封', 'auto_unseal_random_option_equipment', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '发送邮件', 'DQoNCg0KLy/lj5Hns7vnu5/pgq7ku7Yo5aSa6YGT5YW3KSjop5LoibJjaGFyYWNfbm8sIOmCruS7tuagh+mimCwg6YKu5Lu25q2j5paHLCDph5HluIHmlbDph48sIOmBk+WFt+WIl+ihqCkNCmZ1bmN0aW9uIGFwaV9Xb25nV29ya19DTWFpbEJveEhlbHBlcl9SZXFEQlNlbmROZXdTeXN0ZW1NdWx0aU1haWwodGFyZ2V0X2NoYXJhY19ubywgdGl0bGUsIHRleHQsIGdvbGQsIGl0ZW1fbGlzdCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlj5Hns7vnu5/pgq7ku7Yo5aSa6YGT5YW3KSIpDQogICAgLy/mt7vliqDpgZPlhbfpmYTku7YNCiAgICB2YXIgdmVjdG9yID0gTWVtb3J5LmFsbG9jKDEwMCk7DQogICAgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X3ZlY3Rvcih2ZWN0b3IpOw0KICAgIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9jbGVhcih2ZWN0b3IpOw0KDQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtX2xpc3QubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgdmFyIGl0ZW1faWQgPSBNZW1vcnkuYWxsb2MoNCk7ICAgICAgICAgIC8v6YGT5YW3aWQNCiAgICAgICAgdmFyIGl0ZW1fY250ID0gTWVtb3J5LmFsbG9jKDQpOyAgICAgICAgIC8v6YGT5YW35pWw6YePDQoNCiAgICAgICAgaXRlbV9pZC53cml0ZUludChpdGVtX2xpc3RbaV1bMF0pOw0KICAgICAgICBpdGVtX2NudC53cml0ZUludChpdGVtX2xpc3RbaV1bMV0pOw0KDQogICAgICAgIHZhciBwYWlyID0gTWVtb3J5LmFsbG9jKDEwMCk7DQogICAgICAgIHN0ZF9tYWtlX3BhaXJfaW50X2ludChwYWlyLCBpdGVtX2lkLCBpdGVtX2NudCk7DQoNCiAgICAgICAgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X3B1c2hfYmFjayh2ZWN0b3IsIHBhaXIpOw0KICAgIH0NCg0KICAgIC8v6YKu5Lu25pSv5oyBMTDkuKrpgZPlhbfpmYTku7bmoLzlrZANCiAgICB2YXIgYWRkaXRpb25fc2xvdHMgPSBNZW1vcnkuYWxsb2MoMTAwMCk7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgKytpKSB7DQogICAgICAgIEludmVuX0l0ZW1fSW52ZW5fSXRlbShhZGRpdGlvbl9zbG90cy5hZGQoaSAqIDYxKSk7DQogICAgfQ0KICAgIFdvbmdXb3JrX0NNYWlsQm94SGVscGVyX01ha2VTeXN0ZW1NdWx0aU1haWxQb3N0YWwodmVjdG9yLCBhZGRpdGlvbl9zbG90cywgMTApOw0KDQoNCiAgICB2YXIgdGl0bGVfcHRyID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyh0aXRsZSk7ICAgICAgLy/pgq7ku7bmoIfpopgNCiAgICB2YXIgdGV4dF9wdHIgPSBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKHRleHQpOyAgICAgICAgLy/pgq7ku7bmraPmlocNCiAgICB2YXIgdGV4dF9sZW4gPSBzdHJsZW4odGV4dF9wdHIpOyAgICAgICAgICAgICAgICAgICAgLy/pgq7ku7bmraPmlofplb/luqYNCg0KICAgIC8v5Y+R6YKu5Lu257uZ6KeS6ImyDQogICAgV29uZ1dvcmtfQ01haWxCb3hIZWxwZXJfUmVxREJTZW5kTmV3U3lzdGVtTXVsdGlNYWlsKHRpdGxlX3B0ciwgYWRkaXRpb25fc2xvdHMsIGl0ZW1fbGlzdC5sZW5ndGgsIGdvbGQsIHRhcmdldF9jaGFyYWNfbm8sIHRleHRfcHRyLCB0ZXh0X2xlbiwgMCwgOTksIDEpOw0KfQ==', '发送邮件', 'send_mail_api', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('hook_TimerDispatcher_dispatch', '世界广播(频道内公告)', 'DQoNCi8v5Y+R6YCB5a2X56ym5Liy57uZ5a6i5oi356uvDQpmdW5jdGlvbiBhcGlfSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zdHJpbmcocGFja2V0X2d1YXJkLCBzKQ0Kew0KICAgIHZhciBwID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyhzKTsNCiAgICB2YXIgbGVuID0gc3RybGVuKHApOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaW50KHBhY2tldF9ndWFyZCwgbGVuKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2JpbmFyeShwYWNrZXRfZ3VhcmQsIHAsIGxlbik7DQoNCiAgICByZXR1cm47DQp9DQoNCiAvL+S4lueVjOW5v+aSrSjpopHpgZPlhoXlhazlkYopDQpmdW5jdGlvbiBhcGlfR2FtZVdvcmxkX1NlbmROb3RpUGFja2V0TWVzc2FnZShtc2csIG1zZ190eXBlKQ0Kew0KICAgIHZhciBwYWNrZXRfZ3VhcmQgPSBhcGlfUGFja2V0R3VhcmRfUGFja2V0R3VhcmQoKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2hlYWRlcihwYWNrZXRfZ3VhcmQsIDAsIDEyKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUocGFja2V0X2d1YXJkLCBtc2dfdHlwZSk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChwYWNrZXRfZ3VhcmQsIDApOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShwYWNrZXRfZ3VhcmQsIDApOw0KICAgIGFwaV9JbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3N0cmluZyhwYWNrZXRfZ3VhcmQsIG1zZyk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKHBhY2tldF9ndWFyZCwgMSk7DQogICAgR2FtZVdvcmxkX3NlbmRfYWxsX3dpdGhfc3RhdGUoR19HYW1lV29ybGQoKSwgcGFja2V0X2d1YXJkLCAzKTsgIC8v5Y+q57uZc3RhdGUgPj0gMyDnmoTnjqnlrrblj5HlhazlkYoNCiAgICBEZXN0cm95X1BhY2tldEd1YXJkX1BhY2tldEd1YXJkKHBhY2tldF9ndWFyZCk7DQp9DQoNCi8v5ZCR5a6a5pe25Lu75Yqh5YiX6KGo5re75Yqg5LiA5Liq5Y+R6YCB5YWs5ZGK55qE5a6a5pe25Lu75YqhDQpmdW5jdGlvbiBwdXNoU2VuZE5vdGlQYWNrZXRNZXNzYWdlKG1zZywgbXNnX3R5cGUpew0KICB2YXIgYXJncyA9IFtdOw0KICBhcmdzLnB1c2gobXNnKTsNCiAgYXJncy5wdXNoKG1zZ190eXBlKTsNCiAgYXBpX3NjaGVkdWxlT25NYWluVGhyZWFkKGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlLCBhcmdzKTsNCn0NCg==', '世界广播(频道内公告)', 'api_GameWorld_SendNotiPacketMessage', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '点券或代币券充值', 'Ly/ngrnliLjlhYXlgLwgKOemgeatouebtOaOpeS/ruaUuWJpbGxpbmflupPmiYDmnInooajlrZfmrrUsIOeCueWIuOebuOWFs+aTjeS9nOWKoeW/heiwg+eUqOaVsOaNruW6k+WtmOWCqOi/h+eoiyEpDQpmdW5jdGlvbiBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIGFtb3VudCkNCnsNCiAgICAvL+WFheWAvA0KICAgIFdvbmdXb3JrX0lQR19DSVBHSGVscGVyX0lQR0lucHV0KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIDUsIGFtb3VudCwgcHRyKDB4OEM3RkEyMCksIHB0cigweDhDN0ZBMjApLA0KICAgICAgICBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCdHTScpLCBwdHIoMCksIHB0cigwKSwgcHRyKDApKTsNCg0KICAgIC8v6YCa55+l5a6i5oi356uv5YWF5YC857uT5p6cDQogICAgV29uZ1dvcmtfSVBHX0NJUEdIZWxwZXJfSVBHUXVlcnkocHRyKDB4OTQxRjczNCkucmVhZFBvaW50ZXIoKSwgdXNlcik7DQp9DQoNCi8v5Luj5biB5YWF5YC8ICjnpoHmraLnm7TmjqXkv67mlLliaWxsaW5n5bqT5omA5pyJ6KGo5a2X5q61LCDngrnliLjnm7jlhbPmk43kvZzliqHlv4XosIPnlKjmlbDmja7lupPlrZjlgqjov4fnqIshKQ0KZnVuY3Rpb24gYXBpX3JlY2hhcmdlX2Nhc2hfY2VyYV9wb2ludCh1c2VyLCBhbW91bnQpDQp7DQogICAgLy/lhYXlgLwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdJbnB1dFBvaW50KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIGFtb3VudCwgNCwgcHRyKDApLCBwdHIoMCkpOw0KDQogICAgLy/pgJrnn6XlrqLmiLfnq6/lhYXlgLznu5PmnpwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdRdWVyeShwdHIoMHg5NDFGNzM0KS5yZWFkUG9pbnRlcigpLCB1c2VyKTsNCn0=', '点券或代币券充值', 'api_recharge_cash_cera_point', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('sever_base_funcation', '挂接消息分发线程', 'DQoNCg0KLy/pnIDopoHlnKhkaXNwYXRjaGVy57q/56iL5omn6KGM55qE5Lu75Yqh6Zif5YiXKOeDreWKoOi9veWQjuS8muiiq+a4heepuikNCnZhciB0aW1lcl9kaXNwYXRjaGVyX2xpc3QgPSBbXTsNCg0KLy/lnKhkaXNwYXRjaGVy57q/56iL5omn6KGMKGFyZ3PkuLrlh73mlbBm55qE5Y+C5pWw57uE5oiQ55qE5pWw57uELCDoi6Vm5peg5Y+C5pWwYXJnc+WPr+S4um51bGwpDQpmdW5jdGlvbiBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQoZiwgYXJncykNCnsNCiAgICAvL+e6v+eoi+WuieWFqA0KICAgIHZhciBndWFyZCA9IGFwaV9HdWFyZF9NdXRleF9HdWFyZCgpOw0KDQogICAgdGltZXJfZGlzcGF0Y2hlcl9saXN0LnB1c2goW2YsIGFyZ3NdKTsNCg0KICAgIERlc3Ryb3lfR3VhcmRfTXV0ZXhfR3VhcmQoZ3VhcmQpOw0KDQogICAgcmV0dXJuOw0KfQ0KDQovL+iuvue9ruWumuaXtuWZqCDliLDmnJ/lkI7lnKhkaXNwYXRjaGVy57q/56iL5omn6KGMDQpmdW5jdGlvbiBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWRfZGVsYXkoZiwgYXJncywgZGVsYXkpDQp7DQogICAgc2V0VGltZW91dChhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQsIGRlbGF5LCBmLCBhcmdzKTsNCn0NCg0KDQovL+eUs+ivt+mUgSjnlLPor7flkI7liqHlv4XmiYvliqjph4rmlL4hISEpDQpmdW5jdGlvbiBhcGlfR3VhcmRfTXV0ZXhfR3VhcmQoKQ0Kew0KICAgIHZhciBhMSA9IE1lbW9yeS5hbGxvYygxMDApOw0KICAgIEd1YXJkX011dGV4X0d1YXJkKGExLCBHX1RpbWVyUXVldWUoKS5hZGQoMTYpKTsNCg0KICAgIHJldHVybiBhMTsNCn0NCg0KLy/lpITnkIbliLDmnJ/nmoToh6rlrprkuYnlrprml7blmagNCmZ1bmN0aW9uIGRvX3RpbWVyX2Rpc3BhdGNoKCkNCnsNCiAgICAvL+W9k+WJjeW+heWkhOeQhueahOWumuaXtuWZqOS7u+WKoeWIl+ihqA0KICAgIHZhciB0YXNrX2xpc3QgPSBbXTsNCg0KICAgIC8v57q/56iL5a6J5YWoDQogICAgdmFyIGd1YXJkID0gYXBpX0d1YXJkX011dGV4X0d1YXJkKCk7DQoNCiAgICAvL+S+neasoeWPluWHuumYn+WIl+S4reeahOS7u+WKoQ0KICAgIHdoaWxlKHRpbWVyX2Rpc3BhdGNoZXJfbGlzdC5sZW5ndGggPiAwKQ0KICAgIHsNCiAgICAgICAgLy/lhYjlhaXlhYjlh7oNCiAgICAgICAgdmFyIHRhc2sgPSB0aW1lcl9kaXNwYXRjaGVyX2xpc3Quc2hpZnQoKTsNCiAgICAgICAgdGFza19saXN0LnB1c2godGFzayk7DQogICAgfQ0KDQogICAgRGVzdHJveV9HdWFyZF9NdXRleF9HdWFyZChndWFyZCk7DQoNCiAgICAvL+aJp+ihjOS7u+WKoQ0KICAgIGZvcih2YXIgaT0wOyBpPHRhc2tfbGlzdC5sZW5ndGg7ICsraSkNCiAgICB7DQogICAgICAgIHZhciB0YXNrID0gdGFza19saXN0W2ldOw0KDQogICAgICAgIHZhciBmID0gdGFza1swXTsNCiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrWzFdOw0KDQogICAgICAgIGYuYXBwbHkobnVsbCwgYXJncyk7DQogICAgfQ0KfQ0KDQoNCi8v5oyC5o6l5raI5oGv5YiG5Y+R57q/56iLIOehruS/neS7o+eggee6v+eoi+WuieWFqA0KZnVuY3Rpb24gaG9va19UaW1lckRpc3BhdGNoZXJfZGlzcGF0Y2goKQ0Kew0KICAgIC8vaG9vayBUaW1lckRpc3BhdGNoZXI6OmRpc3BhdGNoDQogICAgLy/mnI3liqHlmajlhoXnva7lrprml7blmagg5q+P56eS6Iez5bCR5omn6KGM5LiA5qyhDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2MzJBMTgpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KDQogICAgICAgICAgICAvL+a4heepuuetieW+heaJp+ihjOeahOS7u+WKoemYn+WIlw0KICAgICAgICAgICAgZG9fdGltZXJfZGlzcGF0Y2goKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ==', '挂接消息分发线程 执行需要在主线程运行的代码', 'hook_TimerDispatcher_dispatch', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('load_json_config', '深渊强制非常困难', 'DQoNCkludGVyY2VwdG9yLmF0dGFjaChwdHIoMHgwODJGRkEyRSksIHsNCiAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgIGlmIChnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddWydzdGFydEhlbGxQYXJ0eVZlcnltaXNlcmFibGUnXSA9PT0gJ3RydWUnKSB7DQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDmt7HmuIrlvLrliLbpnZ7luLjlm7Dpmr4iKQ0KICAgICAgICB9DQogICAgfQ0KfSkNCg0K', '深渊强制非常困难', 'startHellPartyVerymiserable', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('use_item_handler,processing_data', '捕获玩家游戏事件', 'Ly/mjZXojrfnjqnlrrbmuLjmiI/kuovku7YNCmZ1bmN0aW9uIGhvb2tfaGlzdG9yeV9sb2coKSB7DQogICAgLy9jSGlzdG9yeVRyYWNlOjpvcGVyYXRvcigpDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg1NEY5OTApLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCg0KICAgICAgICAgICAgLy/op6PmnpDml6Xlv5flhoXlrrk6ICIxODAwMDAwOCIsMTgwMDAwMDgsRCwxNDU2MzYsIm5pY2tuYW1lIiwxLDcyLDgsMCwxOTIuMTY4LjIwMC4xLDE5Mi4xNjguMjAwLjEsNTA5NjMsMTEsIER1bmdlb25MZWF2ZSwi6b6N5Lq65LmL5aGUIiwwLDAsImFhYmIiLCJhYWJiIiwiTi9BIiwiTi9BIiwiTi9BIg0KICAgICAgICAgICAgdmFyIGhpc3RvcnlfbG9nID0gYXJnc1sxXS5yZWFkVXRmOFN0cmluZygtMSk7DQogICAgICAgICAgICB2YXIgZ3JvdXAgPSBoaXN0b3J5X2xvZy5zcGxpdCgnLCcpOw0KDQogICAgICAgICAgICAvL+inkuiJsuS/oeaBrw0KICAgICAgICAgICAgdmFyIGFjY291bnRfaWQgPSBwYXJzZUludChncm91cFsxXSk7DQogICAgICAgICAgICB2YXIgdGltZV9oaF9tbV9zcyA9IGdyb3VwWzNdOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19uYW1lID0gZ3JvdXBbNF07DQogICAgICAgICAgICB2YXIgY2hhcmFjX25vID0gZ3JvdXBbNV07DQogICAgICAgICAgICB2YXIgY2hhcmFjX2xldmVsID0gZ3JvdXBbNl07DQogICAgICAgICAgICB2YXIgY2hhcmFjX2pvYiA9IGdyb3VwWzddOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19ncm93dHlwZSA9IGdyb3VwWzhdOw0KICAgICAgICAgICAgdmFyIHVzZXJfd2ViX2FkZHJlc3MgPSBncm91cFs5XTsNCiAgICAgICAgICAgIHZhciB1c2VyX3BlZXJfaXAyID0gZ3JvdXBbMTBdOw0KICAgICAgICAgICAgdmFyIHVzZXJfcG9ydCA9IGdyb3VwWzExXTsNCiAgICAgICAgICAgIHZhciBjaGFubmVsX2luZGV4ID0gZ3JvdXBbMTJdOyAgICAgICAgICAgICAgLy/lvZPliY3popHpgZNpZA0KDQogICAgICAgICAgICAvL+eOqeWutua4uOaIj+S6i+S7tg0KICAgICAgICAgICAgdmFyIGdhbWVfZXZlbnQgPSBncm91cFsxM10uc2xpY2UoMSk7ICAgICAgICAvL+WIoOmZpOWkmuS9meepuuagvA0KDQogICAgICAgICAgICAvL+inpuWPkea4uOaIj+S6i+S7tueahOinkuiJsg0KICAgICAgICAgICAgdmFyIHVzZXIgPSBHYW1lV29ybGRfZmluZF91c2VyX2Zyb21fd29ybGRfYnlhY2NpZChHX0dhbWVXb3JsZCgpLCBhY2NvdW50X2lkKTsNCg0KICAgICAgICAgICAgaWYgKHVzZXIuaXNOdWxsKCkpDQogICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAvL+mBk+WFt+WHj+WwkTogIEl0ZW0tLDEsMTAwMDAxMTMsNjMsMSwzLDYzLDAsMCwwLDAsMCwwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwLDAsMCwwMDAwMDAwMDAwMDAwMDAwMDAwMA0KICAgICAgICAgICAgaWYgKGdhbWVfZXZlbnQgPT0gJ0l0ZW0tJykgew0KICAgICAgICAgICAgICAgIHZhciBpdGVtX2lkID0gcGFyc2VJbnQoZ3JvdXBbMTVdKTsgICAgICAgICAgICAgICAgLy/mnKzmrKHmk43kvZzpgZPlhbdpZA0KICAgICAgICAgICAgICAgIHZhciBpdGVtX2NudCA9IHBhcnNlSW50KGdyb3VwWzE3XSk7ICAgICAgICAgICAgICAgLy/mnKzmrKHmk43kvZzpgZPlhbfmlbDph48NCiAgICAgICAgICAgICAgICB2YXIgcmVhc29uID0gcGFyc2VJbnQoZ3JvdXBbMThdKTsgICAgICAgICAgICAgICAgIC8v5pys5qyh5pON5L2c5Y6f5ZugDQoNCg0KICAgICAgICAgICAgICAgIC8vbG9nKCfnjqnlrrZbJyArIGNoYXJhY19uYW1lICsgJ13pgZPlhbflh4/lsJEsIOWOn+WboDonICsgcmVhc29uICsgJyjpgZPlhbdpZD0nICsgaXRlbV9pZCArICcsIOS9v+eUqOaVsOmHjz0nICsgaXRlbV9jbnQpOw0KDQogICAgICAgICAgICAgICAgaWYgKDUgPT0gcmVhc29uKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5Lii5byD6YGT5YW3DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKDMgPT0gcmVhc29uKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5L2/55So6YGT5YW3DQogICAgICAgICAgICAgICAgICAgIC8v6L+Z6YeM5bm25pyq5pS55Y+Y6YGT5YW35Y6f5aeL5pWI5p6cIOWOn+Wni+aViOaenOaIkOWKn+aJp+ihjOWQjuinpuWPkeS4i+mdoueahOS7o+eggQ0KICAgICAgICAgICAgICAgICAgICB1c2VfaXRlbV9oYW5kbGVyKHVzZXIsaXRlbV9pZCkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoOSA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/liIbop6PpgZPlhbcNCiAgICAgICAgICAgICAgICAgICAgLy9kaXNpbnRlZ3JhdGVfaXRlbV9oYW5kbGVyKGl0ZW1faWQpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKDEwID09IHJlYXNvbikgew0KICAgICAgICAgICAgICAgICAgICAvL+S9v+eUqOWxnuaAp+efs+WktA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVfZXZlbnQgPT0gJ0tpbGxNb2InKSB7DQogICAgICAgICAgICAgICAgLy/mnYDmrbvmgKrniakNCiAgICAgICAgICAgICAgICAvL+mtlOazleWwgeWNsOijheWkh+ivjeadoeWNh+e6pw0KICAgICAgICAgICAgICAgIC8vYm9vc3RfcmFuZG9tX29wdGlvbl9lcXUodXNlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdNb25leSsnKSB7DQogICAgICAgICAgICAgICAgdmFyIGN1cl9tb25leSA9IHBhcnNlSW50KGdyb3VwWzE0XSk7ICAgICAgICAgICAgICAgIC8v5b2T5YmN5oyB5pyJ55qE6YeR5biB5pWw6YePDQogICAgICAgICAgICAgICAgdmFyIGFkZF9tb25leSA9IHBhcnNlSW50KGdyb3VwWzE1XSk7ICAgICAgICAgICAgICAgIC8v5pys5qyh6I635b6X6YeR5biB5pWw6YePDQogICAgICAgICAgICAgICAgdmFyIHJlYXNvbiA9IHBhcnNlSW50KGdyb3VwWzE2XSk7ICAgICAgICAgICAgICAgICAgIC8v5pys5qyh6I635b6X6YeR5biB5Y6f5ZugDQoNCiAgICAgICAgICAgICAgICAvL2xvZygn546p5a62WycgKyBjaGFyYWNfbmFtZSArICdd6I635Y+W6YeR5biBLCDljp/lm6A6JyArIHJlYXNvbiArICco5b2T5YmN5oyB5pyJ6YeR5biBPScgKyBjdXJfbW9uZXkgKyAnLCDmnKzmrKHojrflvpfph5HluIHmlbDph489JyArIGFkZF9tb25leSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoNCA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lia/mnKzmi77lj5YNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoNSA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lia/mnKzpgJrlhbPnv7vniYzojrflj5bph5HluIENCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdEdW5nZW9uTGVhdmUnKSB7DQogICAgICAgICAgICAgICAgLy/nprvlvIDlia/mnKwNCiAgICAgICAgICAgICAgICAvL+WIt+WujOWJr+acrOWQjiwg6YeN572u5byC55WMK+aegemZkOelreWdm+asoeaVsA0KICAgICAgICAgICAgICAgIC8vQ1VzZXJfRGltZW5zaW9uSW5vdXRVcGRhdGUodXNlciwgMSwgMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdJdGVtKycpIHsNCiAgICAgICAgICAgICAgICB2YXIgaXRlbV9pZCA9IHBhcnNlSW50KGdyb3VwWzE1XSk7DQogICAgICAgICAgICAgICAgdmFyIGdyb3VwXzE4ID0gcGFyc2VJbnQoZ3JvdXBbMThdKTsNCiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBfMTggPT0gNCkgew0KICAgICAgICAgICAgICAgICAgICAvL+WJr+acrOaNoeS4nOilv+WWiuWWh+WPree7meeCueWIuA0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nX2RhdGEoaXRlbV9pZCwgdXNlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCg0KICAgICAgICB9DQogICAgfSk7DQp9DQo=', '捕获玩家游戏事件', 'hook_user_history_log', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('', '玩家使用道具回调', 'ZnVuY3Rpb24gdXNlX2l0ZW1faGFuZGxlcih1c2VyLCBpdGVtX2lkKXsNCiAgICAvLyDku7vliqHmuIXpmaTliLjvvIwgIOS7u+WKoeWujOaIkOWIuCDmiJDlsLHku7vliqHlrozmiJDliLgg5Li757q/562JDQoNCiAgICAvLyBpZignODA3MCcgPT0gaXRlbV9pZCkNCiAgICAvLyB7DQogICAgLy8gICAgIC8v5omA5pyJ55qE5Lu75Yqh5a6M5oiQ5Yi4DQogICAgLy8gICAgIGNsZWFyX2FsbF9xdWVzdF9ieV9jaGFyYWN0ZXJfbGV2ZWwodXNlcik7DQogICAgLy8gfQ0KICAgIC8vIGlmKCc2OTAwMDAxMTknID09PSBpdGVtX2lkKQ0KICAgIC8vIHsNCiAgICAvLyAgICAgLy/ku6XmjqXku7vliqHlrozmiJDliLgNCiAgICAvLyAgICAgZXF1SW5oZXJpdCh1c2VyKTsNCiAgICAvLyB9DQogICAgLy8gaWYoJzgwNzEnID09IGl0ZW1faWQpew0KICAgIC8vICAgICAvLyDoo4XlpIfnu6fmib8gIOWujOe+jue7p+aJv+W8uuWMlu+8jOWinuW5hSDvvIzlrp3nj6Ag77yM6ZS76YCg77yI6L+Y5Y+v5Lul5a6e546wICtu55qE6ZS76YCg5Yi477yJDQogICAgLy8gICAgIGVxdUluaGVyaXQodXNlcik7DQogICAgLy8gfQ0KDQogICAgLy8gaWYoJzgwNzMnID09IGl0ZW1faWQpew0KICAgIC8vICAgICAvLyDoo4XlpIfot6jnlYwNCiAgICAvLyAgICAgY3Jvc3NvdmVyKHVzZXIpOw0KICAgIC8vIH0NCiAgICAvLyBpZignMjAyMjA5MTInID09IGl0ZW1faWQpew0KICAgIC8vICAgICAvLyDliIbop6MNCiAgICAvLyAgICAgZGVjb21wb3NlKHVzZXIpDQogICAgLy8gfQ0KICAgIC8vIGlmKCcxMjMwJyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g6a2U5rOV5bCB5Y2w6YeN572uDQogICAgLy8gICAgIHFjKHVzZXIpDQogICAgLy8gfQ0KICAgIC8vIGlmKCcyNzQ5MTAxJyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g56ew5Y+35ZCI5oiQDQogICAgLy8gICAgIGNoaGModXNlcikNCiAgICAvLyB9DQogICAgLy8gaWYoJzYxMDAwMDAxJyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g5q+P5pel5Lu75Yqh5a6M5oiQDQogICAgLy8gICAgIGFwaV9mb3JjZV9jbGVhcl9xdWVzdF9saXN0KHVzZXIsIHF1ZXN0X2xpc3QpDQogICAgLy8gfQ0KICAgIC8vIGlmKCc4MDY4JyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g5Yid6Zi25byC55WM5YWl5Zy66YeN572uDQogICAgLy8gICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLDApDQogICAgLy8gICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLDEpDQogICAgLy8gICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLDIpDQogICAgLy8gfQ0KICAgIC8vIGlmKCc4MDY5JyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g6auY6Zi25byC55WM5YWl5Zy66YeN572uDQogICAgLy8gICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLDMpDQogICAgLy8gICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLDQpDQogICAgLy8gICAgIHJlc2V0UmVzZXREaW1lbnNpb25Jbm91dCh1c2VyLDUpDQogICAgLy8gfQ0KfQ==', '玩家使用道具回调', 'use_item_handler', 0);
            INSERT INTO da_frida_function (children_function, function_name, function_context, remark, function_key, is_system_fun) VALUES('debug_message_handler,fix_TOD,hook_TimerDispatcher_dispatch,hook_user_inout_game_world,init_for_game_config,json_message_exec,load_json_config,no_json_message_exec,skillUpgrading,startHellParty,startHellPartyVerymiserable,hook_user_history_log', 'dnf-admin的firda主函数', 'DQoNCg0KLy/liJ3lp4vljJbliqDovb3lh73mlbANCmZ1bmN0aW9uIHN0YXJ0KGNoYW5uZWwpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT09PnN0YXJ0IGluaXQgZnJpZGEiKTsNCiAgICAvL+aMguaOpea2iOaBr+WIhuWPkee6v+eoiyDmiafooYzpnIDopoHlnKjkuLvnur/nqIvov5DooYznmoTku6PnoIENCiAgICBob29rX1RpbWVyRGlzcGF0Y2hlcl9kaXNwYXRjaCgpOw0KICAgIGxvYWRfY29uZmlnKGNoYW5uZWwpOw0KICAgIGluaXRGb3JDb25maWcoKTsNCiAgICAvL+S/ruWkjee7neacm+S5i+WhlA0KICAgIGZpeF9UT0QoKTsNCiAgICAvL+inkuiJsueZu+WFpeeZu+WHuuWkhOeQhg0KICAgIGhvb2tfdXNlcl9pbm91dF9nYW1lX3dvcmxkKCkNCiAgICAvL+aNleiOt+eOqeWutua4uOaIj+S6i+S7tg0KICAgIGhvb2tfaGlzdG9yeV9sb2coKTsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT09PmZyaWRhIHN0YXJ0IHN1Y2Nlc3MiKTsNCn0NCg0KDQovL+WHveaVsOWvvOWHuuOAgeWPguaVsOiwg+ivlQ0KcnBjLmV4cG9ydHMgPSB7DQogICAgc3RhcnQ6IGZ1bmN0aW9uIChjaGFubmVsKSB7DQogICAgICAgIHN0YXJ0KGNoYW5uZWwpOw0KICAgIH0sDQogICAgaGFuZGxlckZjTWVzc2FnZTogZnVuY3Rpb24gKHBhcmFtKSB7DQogICAgICAgIHZhciBwYXJhbUpzb24gPSB1bmRlZmluZWQ7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBwYXJhbUpzb24gPSBKU09OLnBhcnNlKHBhcmFtKTsNCiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICAgIC8v6Z2eanNvbuagvOW8j+eahOa2iOaBrw0KICAgICAgICAgICAgZXhlY05vSnNvbk1lc3NhZ2UocGFyYW0pOw0KICAgICAgICB9DQogICAgICAgIGlmIChwYXJhbUpzb24gIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgaWYgKHBhcmFtSnNvbi50eXBlID09PSAnZGVidWcnKSB7DQogICAgICAgICAgICAgICAgZGVidWdmcmlkYShwYXJhbUpzb24uZGF0YSkNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZXhlY0pzb25NZXNzYWdlKHBhcmFtSnNvbikNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgfSwNCn07', '使用配套服务端和firda必选', 'da_frida_main', 1);
        </sql>
    </changeSet>

    <changeSet author="yuzhanfeng" id="20231217-2" dbms="mysql" failOnError="true">
    <sql dbms="mysql">
        INSERT INTO da_frida_script (script_name, script_context, children_function, remark) VALUES('菜逗逗-1204', '', '', '菜逗逗整理');
        INSERT INTO da_frida_script (script_name, script_context, children_function, remark) VALUES('最新脚本20231217', 'DQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tSU5UUk9EVUNFX0ZVTkNUSU9OU19CRUdJTi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiBkbmYtYWRtaW7nmoRmaXJkYeS4u+WHveaVsCwg6K+05piOOuS9v+eUqOmFjeWll+acjeWKoeerr+WSjGZpcmRh5b+F6YCJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIA0KDQoNCi8v5Yid5aeL5YyW5Yqg6L295Ye95pWwDQpmdW5jdGlvbiBzdGFydChjaGFubmVsKSB7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT09PT5zdGFydCBpbml0IGZyaWRhIik7DQogICAgLy/mjILmjqXmtojmga/liIblj5Hnur/nqIsg5omn6KGM6ZyA6KaB5Zyo5Li757q/56iL6L+Q6KGM55qE5Luj56CBDQogICAgaG9va19UaW1lckRpc3BhdGNoZXJfZGlzcGF0Y2goKTsNCiAgICBsb2FkX2NvbmZpZyhjaGFubmVsKTsNCiAgICBpbml0Rm9yQ29uZmlnKCk7DQogICAgLy/kv67lpI3nu53mnJvkuYvloZQNCiAgICBmaXhfVE9EKCk7DQogICAgLy/op5LoibLnmbvlhaXnmbvlh7rlpITnkIYNCiAgICBob29rX3VzZXJfaW5vdXRfZ2FtZV93b3JsZCgpDQogICAgLy/mjZXojrfnjqnlrrbmuLjmiI/kuovku7YNCiAgICBob29rX2hpc3RvcnlfbG9nKCk7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT09PT5mcmlkYSBzdGFydCBzdWNjZXNzIik7DQp9DQoNCg0KLy/lh73mlbDlr7zlh7rjgIHlj4LmlbDosIPor5UNCnJwYy5leHBvcnRzID0gew0KICAgIHN0YXJ0OiBmdW5jdGlvbiAoY2hhbm5lbCkgew0KICAgICAgICBzdGFydChjaGFubmVsKTsNCiAgICB9LA0KICAgIGhhbmRsZXJGY01lc3NhZ2U6IGZ1bmN0aW9uIChwYXJhbSkgew0KICAgICAgICB2YXIgcGFyYW1Kc29uID0gdW5kZWZpbmVkOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgcGFyYW1Kc29uID0gSlNPTi5wYXJzZShwYXJhbSk7DQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgICAvL+mdnmpzb27moLzlvI/nmoTmtojmga8NCiAgICAgICAgICAgIGV4ZWNOb0pzb25NZXNzYWdlKHBhcmFtKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAocGFyYW1Kc29uICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGlmIChwYXJhbUpzb24udHlwZSA9PT0gJ2RlYnVnJykgew0KICAgICAgICAgICAgICAgIGRlYnVnZnJpZGEocGFyYW1Kc29uLmRhdGEpDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGV4ZWNKc29uTWVzc2FnZShwYXJhbUpzb24pDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgIH0sDQp9OyANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIGRuZi1hZG1pbueahGZpcmRh5Li75Ye95pWwLOivtOaYjjrkvb/nlKjphY3lpZfmnI3liqHnq6/lkoxmaXJkYeW/hemAiS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4gZGVidWfmtojmga/lpITnkIYsIOivtOaYjjrosIPor5VmcmlkYS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiANCiANCi8v5omn6KGMZGVidWfmtojmga8NCmZ1bmN0aW9uIGRlYnVnZnJpZGEoZGVidWdEYXRhKSB7DQogICBjb25zb2xlLmxvZygi5o6l5pS25YiwZGVidWfmtojmga86IitkZWJ1Z0RhdGEpOw0KfSANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIGRlYnVn5raI5oGv5aSE55CGLOivtOaYjjrosIPor5VmcmlkYS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5L+u5aSN57ud5pyb5LmL5aGULCDor7TmmI465L+u5aSN57ud5pyb5LmL5aGULS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIA0KLy/kv67lpI3nu53mnJvkuYvloZQNCi8vc2tpcF91c2VyX2FwYzog5Li6dHJ1ZeaXtiwg6Lez6L+H5q+PMTDlsYLnmoRVc2VyQVBDDQpmdW5jdGlvbiBmaXhfVE9EKHNraXBfdXNlcl9hcGMpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7kv67lpI3nu53mnJvkuYvloZQiKQ0KICAgIC8v5q+P5pel6L+b5YWl5qyh5pWw6ZmQ5Yi2DQogICAgLy9UT0RfVXNlclN0YXRlOjpnZXRFbnRlckNvdW50DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4NjQzODcyKSwgew0KDQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICAvL+S7iuaXpeW3sui/m+WFpeasoeaVsOW8uuWItua4hembtg0KICAgICAgICAgICAgYXJnc1swXS5hZGQoMHgxMCkud3JpdGVJbnQoMCk7DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgfQ0KICAgIH0pOw0KDQogICAgLy/mr48xMOWxguaMkeaImOeOqeWutkFQQyDmnI3liqHlmajlhoXop5LoibLkuI3otrMxMOS4quaXoOazlei/m+WFpQ0KICAgIGlmIChza2lwX3VzZXJfYXBjKSB7DQogICAgICAgIC8v6Lez6L+HMTAvMjAvLi4uLzkw5bGCDQogICAgICAgIC8vVE9EX1VzZXJTdGF0ZTo6Z2V0VG9kYXlFbnRlckxheWVyDQogICAgICAgIEludGVyY2VwdG9yLmF0dGFjaChwdHIoMHgwODY0MzgzRSksIHsNCg0KICAgICAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgICAgICAvL+e7neacm+S5i+WhlOW9k+WJjeWxguaVsA0KICAgICAgICAgICAgICAgIHZhciB0b2RheV9lbnRlcl9sYXllciA9IGFyZ3NbMV0uYWRkKDB4MTQpLnJlYWRTaG9ydCgpOw0KDQogICAgICAgICAgICAgICAgaWYgKCgodG9kYXlfZW50ZXJfbGF5ZXIgJSAxMCkgPT0gOSkgJiYgKHRvZGF5X2VudGVyX2xheWVyID4gMCkgJiYgKHRvZGF5X2VudGVyX2xheWVyIDwgMTAwKSkgew0KICAgICAgICAgICAgICAgICAgICAvL+W9k+WJjeWxguaVsOS4ujEw55qE5YCN5pWw5pe2ICDnm7TmjqXov5vlhaXkuIvkuIDlsYINCiAgICAgICAgICAgICAgICAgICAgYXJnc1sxXS5hZGQoMHgxNCkud3JpdGVTaG9ydCh0b2RheV9lbnRlcl9sYXllciArIDEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQoNCiAgICAvL+S/ruWkjemHkeW4geW8guW4uA0KICAgIC8vQ1BhcnR5OjpVc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zDQogICAgdmFyIENQYXJ0eV9Vc2VBbmNpZW50RHVuZ2Vvbkl0ZW1zX3B0ciA9IHB0cigweDg1OUVBQzIpOw0KICAgIHZhciBDUGFydHlfVXNlQW5jaWVudER1bmdlb25JdGVtcyA9IG5ldyBOYXRpdmVGdW5jdGlvbihDUGFydHlfVXNlQW5jaWVudER1bmdlb25JdGVtc19wdHIsICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInXSwgeyAiYWJpIjogInN5c3YiIH0pOw0KICAgIEludGVyY2VwdG9yLnJlcGxhY2UoQ1BhcnR5X1VzZUFuY2llbnREdW5nZW9uSXRlbXNfcHRyLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKHBhcnR5LCBkdW5nZW9uLCBpbnZlbl9pdGVtLCBhNCkgew0KDQogICAgICAgIC8v5b2T5YmN6L+b5YWl55qE5Zyw5LiL5Z+OaWQNCiAgICAgICAgdmFyIGR1bmdlb25faW5kZXggPSBDRHVuZ2Vvbl9nZXRfaW5kZXgoZHVuZ2Vvbik7DQoNCiAgICAgICAgLy/moLnmja7lnLDkuIvln45pZOWIpOaWreaYr+WQpuS4uue7neacm+S5i+WhlA0KICAgICAgICBpZiAoKGR1bmdlb25faW5kZXggPj0gMTEwMDgpICYmIChkdW5nZW9uX2luZGV4IDw9IDExMTA3KSkgew0KICAgICAgICAgICAgLy/nu53mnJvkuYvloZQg5LiN5YaN5omj6Zmk6YeR5biBDQogICAgICAgICAgICByZXR1cm4gMTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8v5YW25LuW5Ymv5pys5omn6KGM5Y6f5aeL5omj6Zmk6YGT5YW36YC76L6RDQogICAgICAgIHJldHVybiBDUGFydHlfVXNlQW5jaWVudER1bmdlb25JdGVtcyhwYXJ0eSwgZHVuZ2VvbiwgaW52ZW5faXRlbSwgYTQpOw0KICAgIH0sICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInXSkpOw0KfSANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOS/ruWkjee7neacm+S5i+WhlCzor7TmmI465L+u5aSN57ud5pyb5LmL5aGULS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDmnI3liqHnq6/ln7rnoYBhcGnlh73mlbAsIOivtOaYjjrmnI3liqHnq6/ln7rnoYBhcGnlh73mlbAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/ojrflj5bns7vnu5/ml7bpl7QNCnZhciBDU3lzdGVtVGltZV9nZXRDdXJTZWMgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBDQkM5RSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEdsb2JhbERhdGFfc19zeXN0ZW1UaW1lXyA9IHB0cigweDk0MUY3MTQpOw0KLy/ojrflj5ZVVEPml7bpl7Qo56eSKQ0KdmFyIGdldEN1clNlYyA9IG5ldyBOYXRpdmVGdW5jdGlvbihNb2R1bGUuZ2V0RXhwb3J0QnlOYW1lKG51bGwsICd0aW1lJyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+S7juWuouaIt+err+WwgeWMheS4reivu+WPluaVsOaNrg0KdmFyIFBhY2tldEJ1Zl9nZXRfYnl0ZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NThDRjIyKSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBQYWNrZXRCdWZfZ2V0X3Nob3J0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg1OENGQzApLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFBhY2tldEJ1Zl9nZXRfaW50ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg1OEQyN0UpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFBhY2tldEJ1Zl9nZXRfYmluYXJ5ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg1OEQzQjIpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy/mnI3liqHlmajnu4TljIUNCnZhciBQYWNrZXRHdWFyZF9QYWNrZXRHdWFyZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NThERDRDKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBDQjhGQyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwQ0I5MjApLCAnaW50JywgWydwb2ludGVyJywgJ3VpbnQ4J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwRDlFQTQpLCAnaW50JywgWydwb2ludGVyJywgJ3VpbnQxNiddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9pbnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBDQjkzQyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2JpbmFyeSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTFERjA4KSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwQ0I5NTgpLCAnaW50JywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgRGVzdHJveV9QYWNrZXRHdWFyZF9QYWNrZXRHdWFyZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NThERTgwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBjYjhlNiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfcGFja2V0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MTUwOThlKSwgJ2ludCcsIFsncG9pbnRlcicsJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1OGRlODApLCAndm9pZCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgUGFja2V0X01vbml0b3JfTWF4X0xldmVsX0Jyb2FkQ2FzdF9QYWNrZXRfTW9uaXRvcl9NYXhfTGV2ZWxfQnJvYWRDYXN0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4Njk0NTYwKSwgJ3ZvaWQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+acjeWKoeWZqOe7hOWMhQ0KZnVuY3Rpb24gYXBpX1BhY2tldEd1YXJkX1BhY2tldEd1YXJkKCkNCnsNCiAgICB2YXIgcGFja2V0X2d1YXJkID0gTWVtb3J5LmFsbG9jKDB4MjAwMDApOw0KICAgIFBhY2tldEd1YXJkX1BhY2tldEd1YXJkKHBhY2tldF9ndWFyZCk7DQoNCiAgICByZXR1cm4gcGFja2V0X2d1YXJkOw0KfQ0KDQovL+acjeWKoeWZqOeOr+Wigw0KdmFyIEdfQ0Vudmlyb25tZW50ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MENDMTgxKSwgJ3BvaW50ZXInLCBbXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5blvZPliY3mnI3liqHlmajphY3nva7mlofku7blkI0NCnZhciBDRW52aXJvbm1lbnRfZ2V0X2ZpbGVfbmFtZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MERBMzlBKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5ZHYW1lV29ybGTlrp7kvosNCnZhciBHX0dhbWVXb3JsZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MERBM0E3KSwgJ3BvaW50ZXInLCBbXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/moLnmja5zZXJ2ZXJfaWTmn6Xmib51c2VyDQp2YXIgR2FtZVdvcmxkX2ZpbmRfZnJvbV93b3JsZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NkM0QjlDKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5Z+O6ZWH556s56e7DQp2YXIgR2FtZVdvcmxkX21vdmVfYXJlYSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NkM1QTg0KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCcsICdpbnQnLCAnaW50JywgJ2ludCcsICdpbnQnLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+agueaNrui0puWPt+afpeaJvuW3sueZu+W9leinkuiJsg0KdmFyIEdhbWVXb3JsZF9maW5kX3VzZXJfZnJvbV93b3JsZF9ieWFjY2lkID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg2QzRENDApLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/lsIbljY/orq7lj5Hnu5nmiYDmnInlnKjnur/njqnlrrYo5oWO55SoISDlub/mkq3nsbvmjqXlj6Plv4XpobvpmZDliLbosIPnlKjpopHnjocsIOmYsuatokND5pS75Ye7KQ0KLy/pmaTpnZ7lv4Xpobvkvb/nlKgsIOWQpuWImeaUueeUqOWvueixoeabtOWKoOaYjuehrueahENQYXJ0eTo6c2VuZF90b19wYXJ0eS9HYW1lV29ybGQ6OnNlbmRfdG9fYXJlYQ0KdmFyIEdhbWVXb3JsZF9zZW5kX2FsbCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NkM4QzE0KSwgICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgR2FtZVdvcmxkX3NlbmRfYWxsX3dpdGhfc3RhdGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODZDOTE4NCksICAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W5Zyo57q/546p5a625pWw6YePDQp2YXIgR2FtZVdvcmxkX2dldF9Vc2VyQ291bnRfSW5Xb3JsZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NkM0NTUwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+WcqOe6v+eOqeWutuWIl+ihqCjnlKjkuo5zdGQ6Om1hcOmBjeWOhikNCnZhciBHYW1ld29ybGRfdXNlcl9tYXBfYmVnaW4gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBGNzhBNiksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgR2FtZXdvcmxkX3VzZXJfbWFwX2VuZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MEY3OENDKSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBHYW1ld29ybGRfdXNlcl9tYXBfbm90X2VxdWFsID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwRjc4RjIpLCAnYm9vbCcsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBHYW1ld29ybGRfdXNlcl9tYXBfZ2V0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwRjc5NDQpLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgR2FtZXdvcmxkX3VzZXJfbWFwX25leHQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBGNzkwNiksICdwb2ludGVyJywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEdhbWVXb3JsZF9Jc0VuY2hhbnRSZXZpc2lvbkNoYW5uZWwgPW5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIzNDNmYyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEdhbWVXb3JsZF9nZXREdW5nZW9uTWluaW11bVJlcXVpcmVkTGV2ZWwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2YzkwNzYpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBHYW1lV29ybGRfc2VuZF91c2VyX2R1bmdlb25faW5vdXRfbWVzc2FnZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODZjOGZjOCksICd2b2lkJywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgR2FtZVdvcmxkX0lzUHZQU2tpbFRyZWVDaGFubmVsID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjM0NDFlKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBHX0NHYW1lTWFuYWdlciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBjYzE4ZSksICdwb2ludGVyJywgW10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDR2FtZU1hbmFnZXJfR2V0UHJlbWl1bUxldGhlTWFuYWdlciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODI5OGU4OCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENFdmVudE1hbmFnZXJfR2V0UmVwZWF0RXZlbnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMTU5OTgpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgRXZlbnRDbGFzc2lmeV9DRXZlbnRTY3JpcHRNbmdfcHJvY2Vzc19sZXZlbF91cF9yZXdhcmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMGJmNTYpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEd1aWxkUGFyYW1ldGVyU2NyaXB0X2dldEd1aWxkTGV2ZWxVcFBhcmFtID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4OTc5NjQ4KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEd1aWxkUGFyYW1ldGVyU2NyaXB0X2dldEd1aWxkRXhwQm9vayA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODk3OTY3MiksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+iOt+WPlkRhdGFNYW5hZ2Vy5a6e5L6L77yM55So5LqO5aSE55CGcHZm55qEDQp2YXIgR19DRGF0YU1hbmFnZXIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBDQzE5QiksICdwb2ludGVyJywgW10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5LuOcHZm5Lit6I635Y+W5Lu75Yqh5pWw5o2uDQp2YXIgQ0RhdGFNYW5hZ2VyX2ZpbmRfcXVlc3QgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODM1RkRDNiksICdwb2ludGVyJywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPluijheWkh3B2ZuaVsOaNrg0KdmFyIENEYXRhTWFuYWdlcl9maW5kX2l0ZW0gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODM1RkEzMiksICdwb2ludGVyJywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0RhdGFNYW5hZ2VyX2dldF9sZXZlbF9leHAgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MzYwNDQyKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0RhdGFNYW5hZ2VyX2dldERhaWx5VHJhaW5pbmdRdWVzdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODM2NDBmZSksICdwb2ludGVyJywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDRGF0YU1hbmFnZXJfR2V0U3BBdExldmVsVXAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgzNjBjYjgpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDRGF0YU1hbmFnZXJfZ2V0X2V2ZW50X3NjcmlwdF9tbmcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMTBiNjIpLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0RhdGFNYW5hZ2VyX0dldEV4cGVydEpvYlNjcmlwdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIyYjVmMiksICdwb2ludGVyJywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDRGF0YU1hbmFnZXJfZ2V0X2RpbWVuc2lvbklub3V0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJiNjEyKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQoNCi8v6YCa55+l5a6i5oi356uvUXVlc3RQaWVjZeabtOaWsA0KdmFyIEdFVF9VU0VSID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NGJiOWNmKSwgICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/nu5nop5LoibLlj5Hmtojmga8NCnZhciBDVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY4ODZDRSksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/op5LoibLlop7liqDnu4/pqowNCnZhciBDVXNlcl9nYWluX2V4cF9zcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NjZBM0ZFKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAncG9pbnRlcicsICdwb2ludGVyJywgJ2ludCcsICdpbnQnLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5Y+R6YCB6YGT5YW3DQp2YXIgQ1VzZXJfQWRkSXRlbSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NjdCNkQ0KSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCcsICdwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+mAmuefpeWuouaIt+err+mBk+WFt+abtOaWsCjlrqLmiLfnq6/mjIfpkogsIOmAmuefpeaWueW8j1vku4XlrqLmiLfnq689MSwg5LiW55WM5bm/5pKtPTAsIOWwj+mYnz0yLCB3YXIgcm9vbT0zXSwgaXRlbVNwYWNlW+ijheWkhz0wLCDml7boo4U9MV0sIOmBk+WFt+aJgOWcqOeahOiDjOWMheanvSkNCnZhciBDVXNlcl9TZW5kVXBkYXRlSXRlbUxpc3QgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY3QzY1QSksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy8g6YCa55+l5a6i5oi356uv5pu05paw6IOM5YyF5qCPDQp2YXIgQ1VzZXJfc2VuZF9pdGVtc3BhY2UgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY1REI2QyksICAnaW50JywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPlueOqeWutuS7u+WKoeS/oeaBrw0KdmFyIENVc2VyX2dldEN1ckNoYXJhY1F1ZXN0VyA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTRBQTVFKSwgICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5Lu75Yqh55u45YWz5pON5L2cKOesrOS6jOS4quWPguaVsOS4uuWNj+iurue8luWPtzogMzM95o6l5Y+X5Lu75YqhLCAzND3mlL7lvIPku7vliqEsIDM1PeS7u+WKoeWujOaIkOadoeS7tuW3sua7oei2sywgMzY95o+Q5Lqk5Lu75Yqh6aKG5Y+W5aWW5YqxKQ0KdmFyIENVc2VyX3F1ZXN0X2FjdGlvbiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY2REE4QSksICAnaW50JywgWydwb2ludGVyJywgJ2ludCcsICdpbnQnLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+WPkeWMhee7meWuouaIt+errw0KdmFyIENVc2VyX1NlbmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY0ODVCQSksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+iuvue9rkdN5a6M5oiQ5Lu75Yqh5qih5byPKOaXoOadoeS7tuWujOaIkOS7u+WKoSkNCnZhciBDVXNlcl9zZXRHbVF1ZXN0RmxhZyA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MjJGQzhFKSwgICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5piv5ZCmR03ku7vliqHmqKHlvI8NCnZhciBDVXNlcl9nZXRHbVF1ZXN0RmxhZyA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MjJGQzhFKSwgICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/pgJrnn6XlrqLmiLfnq6/mm7TmlrDlt7LlrozmiJDku7vliqHliJfooagNCnZhciBDVXNlcl9zZW5kX2NsZWFyX3F1ZXN0X2xpc3QgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY4QjA0NCksICAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6K6h566X5Lu75Yqh5Z+656GA5aWW5YqxKOS4jeWMheWQq+mBk+WFt+WlluWKsSkNCnZhciBDVXNlcl9xdWVzdF9iYXNpY19yZXdhcmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY2RTdBOCksICAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/pgJrnn6XlrqLmiLfnq69RUOabtOaWsA0KdmFyIENVc2VyX3NlbmRDaGFyYWNRcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NjhBQzI0KSwgICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/pgJrnn6XlrqLmiLfnq69RdWVzdFBpZWNl5pu05pawDQp2YXIgQ1VzZXJfc2VuZENoYXJhY1F1ZXN0UGllY2UgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY4QUYyQyksICAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy54q25oCBDQp2YXIgQ1VzZXJfZ2V0X3N0YXRlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwREEzOEMpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6YCa55+l5a6i5oi356uv6KeS6Imy5bGe5oCn5pu05pawDQp2YXIgQ1VzZXJfU2VuZE5vdGlQYWNrZXQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY3QkE1QyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy8g6I635Y+W6LSm5Y+36YeR5bqTDQp2YXIgQ1VzZXJfR2V0QWNjb3VudENhcmdvID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJmYzIyKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ph43nva7lvILnlYwv5p6B6ZmQ56Wt5Z2b5qyh5pWwDQp2YXIgQ1VzZXJfRGltZW5zaW9uSW5vdXRVcGRhdGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY1NkMxMiksICAnaW50JywgWydwb2ludGVyJywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/pgZPlhbfmmK/lkKbooqvplIENCnZhciBDVXNlcl9DaGVja0l0ZW1Mb2NrID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg2NDY5NDIpLCAnaW50JywgWydwb2ludGVyJywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy8g6K6+572u55So5oi35pyA5aSn562J57qnIGludOS4uuetiee6pw0KdmFyIENVc2VyX1NldFVzZXJNYXhMZXZlbCAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OGZlYzgpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX0NhbGN1cmF0ZVVzZXJNYXhMZXZlbCAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OGZmMDQpLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPluinkuiJsuaJgOWcqOmYn+S8jQ0KdmFyIENVc2VyX0dldFBhcnR5ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjU1MTRDKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5bop5LoibLmianlsZXmlbDmja4NCnZhciBDVXNlcl9HZXRDaGFyYWNFeHBhbmREYXRhID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MERENTg0KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy54K55Yi45L2Z6aKdDQp2YXIgQ1VzZXJfR2V0Q2VyYSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBGREY3QSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5bop5LoibLotKblj7dpZA0KdmFyIENVc2VyX2dldF9hY2NfaWQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBEQTM2RSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ov5Tlm57pgInmi6nop5LoibLnlYzpnaINCnZhciBDVXNlcl9SZXR1cm5Ub1NlbGVjdENoYXJhY0xpc3QgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODY4NkZFRSksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQgPW5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY3YmY0MiksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ3VpbnQ4J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9DaGVja01vbmV5ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjZhZjFjKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX0dldENoYXJhY0V4cGFuZERhdGFSID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjhiNWRlKSwgJ2ludCcsIFsnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9pc0dNVXNlciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODE0NTg5YyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX29uTGV2ZWxVcCA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NjMxMWEpLCAndm9pZCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfZ2V0SGFkZXMgID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjMwODAwKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2NoZWNrX2xldmVsX3VwICA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY2MmFlYSksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2dhaW5fc3AgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NmE5YTApLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9nYWluX3NmcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY2YWFkMiksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2hpc3RvcnlfbG9nX3NwID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjZhYzBlKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2hpc3RvcnlfbG9nX3NmcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY2YWNkMCksICdwb2ludGVyJywgWydwb2ludGVyJywnaW50JywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9HZXRUdXRvcmlhbFNraXBhYmxlICA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODRlY2FkNCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX1VwZGF0ZVR1dG9yaWFsU2tpcGFibGUgID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4Njk3MzE4KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfdXBkYXRlX2NoYXJhY19zdGF0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjY0NmM4KSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfR2V0U2VydmVyR3JvdXAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgwY2JjOTApLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9tYWtlR3VpbGRMZXZlbFVwTWVzc2FnZSA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2Nzk3NTQpLCAndm9pZCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfZ2V0Q3VyQ2hhcmFjUXVlc3RSPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxOWE4YTYpLCAgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX1VwZGF0ZVVzZXJJbmZvNEd1aWxkID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjdjZDIwKSwgJ3ZvaWQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2dldF9jaGFyYWNfbm8gPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MTU3NDFjKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfVmVyaWZ5UHJlc2VudEF2ZW5nZXJUaXRsZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4YjU1MiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX0FkZEN1ckNoYXJhY01lcmNlbmFyeUluZm8gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OGU1OTYpLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfZGVjaWRlX2dyb3d0aF9wb3dlcl9yZXdhcmRfc3lzdGVtID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjhkNzgwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfUmVDYWxjQ2hhdHRpbmdFbW90aWNvbiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4OWEyMiksICd2b2lkJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9TZW5kQ2hhdHRpbmdFbW90aWNvbiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4OWI5MCksICd2b2lkJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9pc0FmZmVjdGVkUHJlbWl1bSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBlNjAwZSksICdpbnQnLCBbJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX3Byb2Nlc3NOUENHaWZ0T25MZXZlbFVwID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjY0MDdhKSwgJ3ZvaWQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX3Byb2Nlc3NMZXZlbFVwRXZlbnRSZXdhcmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NjNjYzApLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9wcm9jZXNzTGV2ZWxVcEV2ZW50ICA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY5MTE1YSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2luY1BsYXlFeHBBZGQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OTcyOWEpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX0NoZWNrSW5UcmFkZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBkYTJmZSksICd1aW50MTYnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2dldEN1ckNoYXJhY1RvdGFsRmF0aWd1ZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY1Nzc2NiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX0lzR3VpbGRNYXN0ZXIgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjMwMTcyKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfR2V0R3VpbGREQkluZm8gPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjMwMTY0KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX0NhbExldmVsVXBJdGVtQ2hlY2sgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2ODlkMDYpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9DYWxMZXZlbFVwSXRlbVN0YXRlID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4OWQ3NCksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9HZXRDdXJFeHBlcnRKb2JMZXZlbCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4YmM3YyksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX3NlbmRfc2tpbGxfaW5mbyA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY2YzQ2YSksICd2b2lkJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9tYWtlX2Jhc2ljX2luZm8gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NWE0NGUpLCAnaW50JywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfR2V0V2FyUm9vbSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY1NTFkZSksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9hZGp1c3RfY2hhcmFjX3N0YXQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NjQ3NjYpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9pbmNyZWFzZV9zdGF0dXMgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NjU3ZmMpLCAndm9pZCcsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX1NlbmRUYWdDaGFyYWNJbmZvID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjkwM2Y4KSwgJ3ZvaWQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2dpdmVDaGFyYWNMaW5rQm9udXNFeHA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY1MjU2NCksICd2b2lkJywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfZ2V0X2NoYXJhY19ubyAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NGRmYTApLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9SZWNvdmVyRmF0aWd1ZSA9bmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjU3YWRhKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJfU2VuZEZhdGlndWUgPW5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY1NjU0MCksICd2b2lkJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9wcm9jZXNzTGV2ZWxSZXdhcmQgID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4Njg3NDVlKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyX2dpdmVQdlBTa2lsbFRyZWUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NjU0MDApLCAnaW50JywgWydwb2ludGVyJywnaW50JywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlcl9yZXdhcmRFeHAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OGIyMGMpLCAndm9pZCcsIFsncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCcsICdwb2ludGVyJywgJ3BvaW50ZXInLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KDQp2YXIgQ1VzZXJDaGFyYWNJbmZvX3NldERlbWVuc2lvbklub3V0VmFsdWUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMmYxODQpLCAnaW50JywgWydwb2ludGVyJywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy5ZCN5a2XDQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05hbWUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODEwMTAyOCksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy5LiK5qyh6YCA5Ye65ri45oiP5pe26Ze0DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0xhc3RQbGF5VGljayA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MkE2NkFBKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPluinkuiJsuetiee6pw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwREEyQjgpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy5b2T5YmN562J57qn5Y2H57qn5omA6ZyA57uP6aqMDQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldF9sZXZlbF91cF9leHAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NEUzQkEpLCAnaW50JywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPluinkuiJsuiDjOWMhQ0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBEQTI4RSksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy5Ymv6IGM5LiaDQp2YXIgQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY0V4cGVydEpvYiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MjJmOGQ0KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+iuvue9ruW5uOi/kOeCueaVsA0KdmFyIENVc2VyQ2hhcmFjSW5mb19TZXRDdXJDaGFyYWNMdWNrUG9pbnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NDY3MEEpLCAnaW50JywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPluinkuiJsuW9k+WJjeW5uOi/kOeCuQ0KdmFyIENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNMdWNrUG9pbnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODIyRjgyOCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/orr7nva7op5LoibLlsZ7mgKfmlLnlj5johI/moIforrAo6KeS6Imy5LiK57q/5pe25oqK5omA5pyJ5bGe5oCn5LuO5pWw5o2u5bqT57yT5a2Y5Yiw5YaF5a2Y5LitLCDlj6rmnInorr7nva7kuobohI/moIforrAsIOinkuiJsuS4i+e6v+aXtuaJjeiDveato+ehruWtmOaho+WIsOaVsOaNruW6kywg5ZCm5YiZ5Y+Y5Yqo55qE5bGe5oCn5LiL57q/5ZCO5Y+v6IO95Lya5Zue5qGjKQ0KdmFyIENVc2VyQ2hhcmFjSW5mb19lbmFibGVTYXZlQ2hhcmFjU3RhdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTlBODcwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+acrOasoeeZu+W9leaXtumXtA0KdmFyIENVc2VyQ2hhcmFjSW5mb19HZXRMb2dpblRpY2sgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODIyRjY5MiksICAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W5b2T5YmN6KeS6ImyaWQNCnZhciBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTm8gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBDQkM0RSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNNb25leT0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODE3YTE4OCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNNYXhFcXVpcExldmVsID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjQ2N2EwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX1NldEN1ckNoYXJhY01heEVxdWlwTGV2ZWwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NDY3YzIpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxSID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJmMTMwKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMmYxNDApLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1IgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NTRmNzE4KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfZXhwID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NGVjMDVjKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX3NldEN1ckNoYXJhY0V4cCA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxOWE4N2MpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fYWRkQ3VyQ2hhcmFjRXhwID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY5NjdiZSksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19pbmNDdXJDaGFyYWNMZXZlbCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY5Njc2MiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19zZXRDdXJDaGFyYWNFeHAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxOWE4N2MpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fcmVzZXRDaGFyYWNGYXRpZ3VlR3Jvd25VcEJ1ZmYgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OTYzODYpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjR3Jvd1R5cGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxNTc0MWMpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fc2V0X2NoYXJhY19mYXRpZ3VlX2J1Zl9ib251c19leHAgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NDY5YTAyKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNDcmVhdGVUaW1lID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJmMjAyKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX1Jlc2V0Q3VyQ2hhcmFjRHVuZ2VvblBsYXlDb3VudCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY5NjlmZSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNFeHBlcnRKb2JFeHAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgzNzUwMjYpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjRHVuZ2VvblBsYXlDb3VudCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODViZmM3OCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBmZGYyMCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRfcHZwX2dyYWRlID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODE5ZWU0YSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBmZGYyMCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyU2Vjb25kR3Jvd1R5cGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMmYyM2MpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhckZpcnN0R3Jvd1R5cGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMTBjOTQpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjRXhwZXJ0Sm9iVHlwZSA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMmY4OTQpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXggPW5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIyZjMzYyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19zZXRDdXJDaGFyYWNGYXRpZ3VlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJmMmNlKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2FkZF9ndWlsZF9leHAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NDVjNzYpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fc2V0Q3VyQ2hhcmFjU3RhbWluYSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODJmMDkxNCksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19JbmNyZWFzZVBvd2VyV2FyUG9pbnQgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4Njg3ZWZjKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1IgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMjA0MzIpLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ludmVuUiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBkYTI3ZSksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19ndWlsZGtleSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIyZjQ2YyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNGYXRpZ3VlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJmMmFlKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0FkZEluZm9SZWZXID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4Njk2MGQ4KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBDSW52ZW50b3J5X0dldEludmVuUmVmID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg0RkMxREUpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5YeP5bCR6YeR5biBDQp2YXIgQ0ludmVudG9yeV91c2VfbW9uZXkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODRGRjU0QyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/lop7liqDph5HluIENCnZhciBDSW52ZW50b3J5X2dhaW5fbW9uZXkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODRGRjI5QyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6KeS6Imy5b2T5YmN5oyB5pyJ6YeR5biB5pWw6YePDQp2YXIgQ0ludmVudG9yeV9nZXRfbW9uZXkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODEzNDdENiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5bml7boo4XnrqHnkIblmagNCnZhciBDSW52ZW50b3J5X0dldEF2YXRhckl0ZW1NZ3JSID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwREQ1NzYpLCAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+iDjOWMheS4reWIoOmZpOmBk+WFtyjog4zljIXmjIfpkogsIOiDjOWMheexu+Weiywg5qe9LCDmlbDph48sIOWIoOmZpOWOn+WboCwg6K6w5b2V5Yig6Zmk5pel5b+XKQ0KdmFyIENJbnZlbnRvcnlfZGVsZXRlX2l0ZW0gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODUwNDAwQyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0ludmVudG9yeV9HZXRJbnZlbkRhdGEgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg0ZmJmMmMpLCAnaW50JywgWydwb2ludGVyJywnaW50JywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0ludmVudG9yeV9HZXRJbnZlblNsb3QgID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NGZiOTE4KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJbnZlbnRvcnlfdXBkYXRlX2l0ZW09IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODUwMDBhZSksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJbnZlbnRvcnlfaW5zZXJ0SXRlbUludG9JbnZlbnRvcnkgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NTAyZDg2KSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0ludmVudG9yeV9HZXRFdmVudENvaW4gID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MTEwYzdhKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0ludmVudG9yeV9TZXRFdmVudENvaW4gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMTBjODYpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0ludmVudG9yeV9HZXRDb2luID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJkNjhhKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0ludmVudG9yeV9TZXRDb2luID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJkNjdjKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJbnZlbnRvcnlfZ2V0X2ludmVuX3Nsb3Rfbm89IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODUwY2Q2MiksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy8g5YiG6Kej5py6IOWPguaVsCDop5LoibIg5L2N572uIOiDjOWMheexu+WeiyAgMjM5ICDop5LoibLvvIjosIHnmoTvvIkgMHhGRkZGDQp2YXIgRGlzUGF0Y2hlcl9EaXNKb2ludEl0ZW1fZGlzam9pbnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODFmOTJjYSksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnLCdwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIEFjY291bnRDYXJnb1NjcmlwdF9HZXRDdXJyVXBncmFkZUluZm8gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg4YzgwYmEpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDQWNjb3VudENhcmdvX0NoZWNrVmFsaWRTbG90ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjhBNTU0KSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0FjY291bnRDYXJnb19SZXNldFNsb3QgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyODk4YzApLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDQWNjb3VudENhcmdvX0NoZWNrTW9uZXlMaW1pdCA9bmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjhhNGNhKSwgJ2ludCcsIFsncG9pbnRlcicsJ3VpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENBY2NvdW50Q2FyZ29fQWRkTW9uZXkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyOGE3NDIpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICd1aW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDQWNjb3VudENhcmdvX1NlbmROb3RpZnlNb25leSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODI4YTdkYyksICdwb2ludGVyJywgWydpbnQnLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDQWNjb3VudENhcmdvX1N1Yk1vbmV5ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjhhNzY0KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAndWludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0FjY291bnRDYXJnb19HZXRJdGVtQ291bnQgPW5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODI4YTc5NCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENBY2NvdW50Q2FyZ29fR2V0TW9uZXkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMmYwMjApLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDQWNjb3VudENhcmdvX1NldFN0YWJsZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODQ0ZGMxNiksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8vIOiOt+WPlui0puWPt+mHkeW6k+S4gOS4quepuueahOagvOWtkA0KdmFyIENBY2NvdW50Q2FyZ29fR2V0RW1wdHlTbG90PSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyOGE1ODApLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8vIOWwhuW3sue7j+eJqeWTgeenu+WKqOWIsOafkOS4quagvOWtkCDnrKzkuIDkuKrotKblj7fph5HlupPvvIznrKzkuozkuKrnp7vlhaXnmoTnianlk4HvvIznrKzkuInkuKrmoLzlrZDkvY3nva4NCnZhciBDQWNjb3VudENhcmdvX0luc2VydEl0ZW0gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyODljODIpLCAnaW50JywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovLyDlkJHlrqLmiLfnq6/lj5HpgIHotKblj7fph5HlupPliJfooagNCnZhciBDQWNjb3VudENhcmdvX1NlbmRJdGVtTGlzdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODI4YTg4YSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+WIoOmZpOiDjOWMheanveS4reeahOmBk+WFtw0KdmFyIEludmVuX0l0ZW1fcmVzZXQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgwQ0I3RDgpLCAgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+ajgOafpeiDjOWMheS4remBk+WFt+aYr+WQpuS4uuepug0KdmFyIEludmVuX0l0ZW1faXNFbXB0eSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTFFRDY2KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+iOt+WPluiDjOWMheS4remBk+WFt2l0ZW1faWQNCnZhciBJbnZlbl9JdGVtX2dldEtleSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NTBEMTRFKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+mBk+WFt+aYr+WQpuaYr+ijheWkhw0KdmFyIEludmVuX0l0ZW1faXNFcXVpcGFibGVJdGVtVHlwZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODE1MDgxMiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/og4zljIXpgZPlhbcNCnZhciBJbnZlbl9JdGVtX0ludmVuX0l0ZW0gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBDQjg1NCksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W6YGT5YW36ZmE5Yqg5L+h5oGvDQp2YXIgSW52ZW5fSXRlbV9nZXRfYWRkX2luZm8gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBGNzgzQSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQp2YXIgQ0l0ZW1fR2V0SW5kZXggPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODExMGM0OCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldEdyYWRlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgxMTBjNTQpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDSXRlbV9HZXRJdGVtTmFtZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTFlZDgyKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0UHJpY2UgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODIyYzg0YSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldEdlblJhdGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODIyYzg0YSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldE5lZWRMZXZlbCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NTQ1ZmRhKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0VXNhYmxlTGV2ZWwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBmMTJlZSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldFJhcml0eSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MGYxMmQ2KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0QXR0YWNoVHlwZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MGYxMmUyKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0SXRlbUdyb3VwTmFtZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MGYxMzEyKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0VXBTa2lsbFR5cGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODU0NWZjYyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldEdldEV4cGVydEpvYkNvbXBvdW5kTWF0ZXJpYWxWYXJpYXRpb24gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODUwZDI5MiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldEV4cGVydEpvYkNvbXBvdW5kUmF0ZVZhcmlhdGlvbiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NTBkMmFhKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0RXhwZXJ0Sm9iQ29tcG91bmRSZXN1bHRWYXJpYXRpb24gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODUwZDJjMiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldEV4cGVydEpvYlNlbGZEaXNqb2ludEJpZ1dpblJhdGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODUwZDJkZSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldEV4cGVydEpvYlNlbGZEaXNqb2ludFJlc3VsdFZhcmlhdGlvbiA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NTBkMmY2KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0RXhwZXJ0Sm9iQWRkaXRpb25hbEV4cCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NTBkMzBlKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+mBk+WFt+aYr+WQpuS4uua2iOiAl+WTgQ0KdmFyIENJdGVtX2lzX3N0YWNrYWJsZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MEYxMkZBKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1faXNQYWNrYWdhYmxlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjhiNWI0KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fZ2V0VXNhYmxlUGVyaW9kID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MTEwYzYwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fZ2V0RXhwaXJhdGlvbkRhdGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgwZjEzMDYpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDSXRlbV9HZXRJbmNyZWFzZVN0YXR1c0ludERhdGEgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OTQ2NTgpLCAnaW50JywgWydwb2ludGVyJywnaW50JywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0l0ZW1fR2V0SW5jcmVhc2VTdGF0dXNUeXBlID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY5NDZiNiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENJdGVtX0dldFVzYWJsZVB2UFJhbmsgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OTQ2YzQpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIENFcXVpcEl0ZW1fR2V0VXNhYmxlRXF1aXBtZW50VHlwZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODMyZTAzNiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENFcXVpcEl0ZW1fR2V0U3ViVHlwZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MzNlZWNjKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+aYr+WQpumtlOazleWwgeWNsOijheWkhw0KdmFyIENFcXVpcEl0ZW1fSXNSYW5kb21PcHRpb24gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODUxNEU1RSksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5boo4XlpIfprZTms5XlsIHljbDnrYnnuqcNCnZhciBDRXF1aXBJdGVtX0dldFJhbmRvbU9wdGlvbkdyYWRlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg1MTRFNkUpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIFVzZXJRdWVzdF9maW5pc2hfcXVlc3QgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODZBQzg1NCksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6YCa55+l5a6i5oi356uv5pu05paw6KeS6Imy5Lu75Yqh5YiX6KGoDQp2YXIgVXNlclF1ZXN0X2dldF9xdWVzdF9pbmZvID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg2QUJCQTgpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ph43nva7miYDmnInku7vliqHkuLrmnKrlrozmiJDnirbmgIENCnZhciBVc2VyUXVlc3RfcmVzZXQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODZBQjg5NCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFVzZXJRdWVzdF9nZXRfbWFpbF9xdWVzdF9pbmZvID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NmFiZDdhKSwgJ2ludCcsIFsnaW50JywnaW50JywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgVXNlclF1ZXN0X1Jlc2V0VXJnZW50UXVlc3RXYWl0aW5nTGlzdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODZhZDE3OCksICAncG9pbnRlcicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQoNCi8v6K6+572u5Lu75Yqh5Li65bey5a6M5oiQ54q25oCBDQp2YXIgV29uZ1dvcmtfQ1F1ZXN0Q2xlYXJfc2V0Q2xlYXJlZFF1ZXN0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwOEJBNzgpLCAnaW50JywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+mHjee9ruS7u+WKoeS4uuacquWujOaIkOeKtuaAgQ0KdmFyIFdvbmdXb3JrX0NRdWVzdENsZWFyX3Jlc2V0Q2xlYXJlZFF1ZXN0cyA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MDhCQUFDKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ku7vliqHmmK/lkKblt7LlrozmiJANCnZhciBXb25nV29ya19DUXVlc3RDbGVhcl9pc0NsZWFyZWRRdWVzdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MDhCQUUwKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ngrnliLjlhYXlgLwNCnZhciBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdJbnB1dCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MEZGQ0E0KSwgICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5Luj5biB5YWF5YC8DQp2YXIgV29uZ1dvcmtfSVBHX0NJUEdIZWxwZXJfSVBHSW5wdXRQb2ludCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MEZGRkMwKSwgICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsJ2ludCcsICdpbnQnLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v5ZCM5q2l54K55Yi45pWw5o2u5bqTDQp2YXIgV29uZ1dvcmtfSVBHX0NJUEdIZWxwZXJfSVBHUXVlcnkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODEwMDc5MCksICAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/ojrflj5bml7boo4Xmj5Lmp73mlbDmja4NCnZhciBXb25nV29ya19DQXZhdGFySXRlbU1ncl9nZXRKZXdlbFNvY2tldERhdGEgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODJGOThGOCksICdwb2ludGVyJywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQovL+WPkeezu+e7n+mCruS7tijlpJrpgZPlhbcpDQp2YXIgV29uZ1dvcmtfQ01haWxCb3hIZWxwZXJfUmVxREJTZW5kTmV3U3lzdGVtTXVsdGlNYWlsID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg1NTZCNjgpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnLCAncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFdvbmdXb3JrX0NNYWlsQm94SGVscGVyX01ha2VTeXN0ZW1NdWx0aU1haWxQb3N0YWwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODU1NkExNCksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/lj5Hns7vnu5/pgq7ku7Yo5pe26KOFKSjku4XmlK/mjIHlnKjnur/op5LoibLlj5Hkv6EpDQp2YXIgV29uZ1dvcmtfQ01haWxCb3hIZWxwZXJfUmVxREJTZW5kTmV3QXZhdGFyTWFpbCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NTU2MUIwKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnLCAnaW50JywgJ2ludCcsICdpbnQnLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFdvbmdXb3JrX0NVc2VyUHJlbWl1bV9HZXRHb2xkQm9udXMgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2OTRhNjQpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBXb25nV29ya19DVXNlclByZW1pdW1fUmVjYWxjQWRkaXRpb25hbEluZm8gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2YWU4YzYpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFdvbmdXb3JrX0NHTUFjY291bnRzX2lzR00gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMDkzNDYpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBXb25nV29ya19DU2tpbGxDaGFuZ2VyX0NoZWNrQ29uZGl0aW9uID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjA5ZDEwKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgV29uZ1dvcmtfQ1NraWxsQ2hhbmdlcl9kX0NTa2lsbENoYW5nZXIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMzRmYzQpLCAndm9pZCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgV29uZ1dvcmtfQ1NraWxsQ2hhbmdlcl9DU2tpbGxDaGFuZ2VyID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjM0ZmJlKSwgJ3ZvaWQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFdvbmdXb3JrX0NTa2lsbENoYW5nZXJfU2tpbGxJbml0aWFsaXplID1uZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2MDllOTApLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ3BvaW50ZXInLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFdvbmdXb3JrX0NNYWlsQm94SGVscGVyX1JlcURCU2VuZE5ld1N5c3RlbU1haWwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1NTU1ZTgpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy/mo4DmtYvlvZPliY3op5LoibLmmK/lkKblj6/mjqXor6Xku7vliqENCnZhciBzdFNlbGVjdFF1ZXN0UGFyYW1fc3RTZWxlY3RRdWVzdFBhcmFtID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgzNDgwQjQpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBRdWVzdF9jaGVja19wb3NzaWJsZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MzUyRDg2KSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy/ojrflj5blia/mnKxpZA0KdmFyIENEdW5nZW9uX2dldF9pbmRleCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBGRENGMCksICAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy/op6PlsIHprZTms5XlsIHljbANCnZhciByYW5kb21fb3B0aW9uX0NSYW5kb21PcHRpb25JdGVtSGFuZGxlX2dpdmVfb3B0aW9uID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg1RjJDQzYpLCAgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCcsICdpbnQnLCAnaW50JywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQp2YXIgQXZhdGFyQ29pbl9BZGQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxN2ZlZmEpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBBdmF0YXJDb2luX1NhdmVUb0RCID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MTgwMGQ2KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQXZhdGFyQ29pbl9TZW5kU3luY1BhY2tldCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODE3ZmZlNCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEF2YXRhckNvaW5fSGlzdG9yeUxvZ19BZGRMb2cgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxN2ZmOWMpLCAndm9pZCcsIFsncG9pbnRlcicsJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQp2YXIgQ1ByZW1pdW1MZXRoZU1hbmFnZXJfSW5pdExldGhlU2tpbGwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1YzQwMDgpLCAnaW50JywgWydpbnQnLCdwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDUHJlbWl1bUxldGhlTWFuYWdlcl9VcGRhdGVCYWNrdXBTa2lsbEZsYWcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1YzNmMzApLCAnaW50JywgWydpbnQnLCdwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDUHJlbWl1bUxldGhlTWFuYWdlcl9Db25maXJtU2tpbGxSZXEgPW5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODVjM2Q3MCksICdpbnQnLCBbJ3BvaW50ZXInLCdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIFNraWxsU2xvdF9nZXRfcmVtYWluX3NwX2F0X2luZGV4ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjAzNTI4KSwgJ2ludCcsIFsncG9pbnRlcicsJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFNraWxsU2xvdF9nZXRfcmVtYWluX3NmcF9hdF9pbmRleCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODYwMzVmMiksICdpbnQnLCBbJ3BvaW50ZXInLCdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBTa2lsbFNsb3RfZ3Jvd3R5cGVfc2tpbGwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2MDQwYmMpLCAnaW50JywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCcsJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgU2tpbGxTbG90X3NldF9yZW1haW5fc3BfYXRfaW5kZXggPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2MDM0ZjgpLCAnaW50JywgWydpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFNraWxsU2xvdF9jbGVhcl9zZnBfc2tpbGxzID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjA0ZTc4KSwgJ2ludCcsIFsnaW50JywnaW50JywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgU2tpbGxTbG90X2NsZWFyX2FsbF9za2lsbHMgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2MDRkOTApLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBTa2lsbFNsb3RfY2xlYXJfYWxsX3NraWxsc19ib3RoID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODYwNGUwOCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFNraWxsU2xvdF9zZXRfcGFyZW50ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MjJlZTJlKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBhZGRTa2lsbE9uQ3JlYXRlQ2hhcmFjdGVyID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NjA0ZmUyKSwgJ3ZvaWQnLCBbJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0NoYXJhY3Rlcl9nZXRfZ2l2ZV9za2lsbCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODM0ODc5OCksICdpbnQnLCBbJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBDUXVlc3RTaG9wX2NsZWFyUVAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1ZWY1NGMpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENRdWVzdFNob3Bfc2VuZENoYXJhY1FwID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NWVmNmZjKSwgJ3ZvaWQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQoNCi8v6I635Y+W5raI6ICX5ZOB57G75Z6LDQp2YXIgQ1N0YWNrYWJsZUl0ZW1fR2V0SXRlbVR5cGUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODUxNEE4NCksICAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCi8v6I635Y+W5b6956ug5pSv5oyB55qE6ZW25bWM5qe957G75Z6LDQp2YXIgQ1N0YWNrYWJsZUl0ZW1fZ2V0SmV3ZWxUYXJnZXRTb2NrZXQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyMkNBMjgpLCAgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBDTW9uaXRvclNlcnZlclByb3h5X1NlbmRDaGFyTGV2ZWxHcm93VHlwZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODQ3MGMwNCksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENNb25pdG9yU2VydmVyUHJveHlfU2VuZFBhY2tldCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODQ3MGRmNCksICdpbnQnLCBbJ3BvaW50ZXInLCdwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDU2VydmVyUHJveHlNZ3JfQ01vbml0b3JTZXJ2ZXJQcm94eV9HZXRTZXJ2ZXJQcm94eSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODExMjA4YSksICdwb2ludGVyJywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDU2VydmVyUHJveHlNZ3JfQ0d1aWxkU2VydmVyUHJveHlfR2V0U2VydmVyUHJveHkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMWQzYjgpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ0d1aWxkU2VydmVyUHJveHlfU2VuZENoYXJMZXZlbEdyb3dUeXBlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NDZkYTlhKSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCcsJ2ludCcsJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQoNCi8v5pe26KOF6ZW25bWM5pWw5o2u5a2Y55uYDQp2YXIgREJfVXBkYXRlQXZhdGFySmV3ZWxTbG90X21ha2VSZXF1ZXN0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDg0MzA4MUMpLCAncG9pbnRlcicsIFsnaW50JywgJ2ludCcsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy/ojrflj5blrZfnrKbkuLLplb/luqYNCnZhciBzdHJsZW4gPSBuZXcgTmF0aXZlRnVuY3Rpb24oTW9kdWxlLmdldEV4cG9ydEJ5TmFtZShudWxsLCAnc3RybGVuJyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+e6v+eoi+WuieWFqOmUgQ0KdmFyIEd1YXJkX011dGV4X0d1YXJkID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgxMDU0NEMpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIERlc3Ryb3lfR3VhcmRfTXV0ZXhfR3VhcmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODEwNTQ2OCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+acjeWKoeWZqOWGhee9ruWumuaXtuWZqOmYn+WIlw0KdmFyIEdfVGltZXJRdWV1ZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MEY2NDdDKSwgJ3BvaW50ZXInLCBbXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+aJp+ihjGRlYnVn5ZG95LukDQp2YXIgRG9Vc2VyRGVmaW5lQ29tbWFuZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIwQkE5MCksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+iuvue9ruinkuiJsuetiee6pyjmnIDpq5g3MOe6pykNCnZhciBEaXNQYXRjaGVyX0RlYnVnQ29tbWFuZF9fZGVidWdDb21tYW5kU2V0TGV2ZWwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1OEVGREUpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsvL+mcgOimgeS4tOaXtuW8gEdN5p2D6ZmQDQoNCi8vdmVjdG9y55u45YWz5pON5L2cDQp2YXIgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X3ZlY3RvciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTM0OUQ2KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9jbGVhciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTdBMzQyKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIHN0ZF9tYWtlX3BhaXJfaW50X2ludCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MUI4RDQxKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBzdGRfdmVjdG9yX3N0ZF9wYWlyX2ludF9pbnRfcHVzaF9iYWNrID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwREQ2MDYpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciB2ZWN0b3JfdW5zaWduZWRfaW50X29wZXJhdG9yPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MDhlMWRjKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9zaXplID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MGRkODE0KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X29wZXJhdG9yID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MGVhOGE0KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9kX3ZlY3RvciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODEzNDllYSksICd2b2lkJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBzdGRfdmVjdG9yX2NoYXJhY19pbmZvX3NpemUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxYTBiOWEpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBzdGRfdmVjdG9yX0NoYXJhY19pbmZvX29wZXJhdG9yQXJyID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MWEwYmI4KSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBMb2dNYW5hZ2VyX2xvZ0Zvcm1hdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwOGFkM2MwYSksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdwb2ludGVyJywncG9pbnRlcicsJ3BvaW50ZXInLCdwb2ludGVyJywnLi4uJywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgY1VzZXJIaXN0b3J5TG9nX0V2ZW50Q29pbkFkZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4M2M1OCksICdwb2ludGVyJywgWydwb2ludGVyJywnaW50JywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBjVXNlckhpc3RvcnlMb2dfQ29pbkFkZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4M2I5MCksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEhpc3RvcnlMb2dfV3JpdGVMZXZlbFVwID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NGI5ZTVlKSwgJ2ludCcsIFsncG9pbnRlcicsJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIGNVc2VySGlzdG9yeUxvZ19MZXZlbFVwICA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODY4NDViMiksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgY1VzZXJIaXN0b3J5TG9nX0l0ZW1BZGQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2ODJlODQpLCAnaW50JywgWydpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KLy/lvIDlkK/mgKrnianmlLvln44NCnZhciBJbnRlcl9WaWxsYWdlQXR0YWNrZWRTdGFydF9kaXNwYXRjaF9zaWcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODRERjQ3QSksICdwb2ludGVyJywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQovL+e7k+adn+aAqueJqeaUu+Wfjg0KdmFyIHZpbGxhZ2VfYXR0YWNrZWRfQ1ZpbGxhZ2VNb25zdGVyTWdyX09uRGVzdHJveVZpbGxhZ2VNb25zdGVyID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NkI0M0Q0KSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBHbG9iYWxEYXRhX3NfdmlsbGFnZU1vbnN0ZXJNZ3IgPSBwdHIoMHg5NDFGNzdDKTsNCg0KLy/ojrflj5bpmJ/kvI3kuK3njqnlrrYNCnZhciBDUGFydHlfZ2V0X3VzZXIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxNDU3NjQpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENQYXJ0eV9zZW5kX3RvX3BhcnR5ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NTlkMTRlKSwgJ2ludCcsIFsncG9pbnRlcicsJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+e7neacm+S5i+WhlOWxguaVsA0KdmFyIFRPRF9MYXllcl9UT0RfTGF5ZXIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg1RkU3QjQpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KLy/orr7nva7nu53mnJvkuYvloZTlsYLmlbANCnZhciBUT0RfVXNlclN0YXRlX3NldEVudGVyTGF5ZXIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2NDM4RkMpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIGNNeVRyYWNlX2NNeVRyYWNlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NTRmNzE4KSwgJ3ZvaWQnLCBbJ3BvaW50ZXInLCdwb2ludGVyJywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBjTXlUcmFjZV9vcGVyYXRvciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODU0Zjc4OCksICd2b2lkJywgWydpbnQnLCdwb2ludGVyJywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBNc2dRdWV1ZU1ncl9wdXQgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NTcwZmRlKSwgJ2ludCcsIFsnaW50JywnaW50JywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTnVtYmVyVG9TdHJpbmc9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODEwOTA0YiksICd1aW50JywgWyd1aW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIEdldEludGVncmF0ZWRQdlBJdGVtQXR0ciA9bmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4NGZjNWZmKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQVJBRF9TaW5nbGV0b25fU2VydmljZVJlc3RyaWN0TWFuYWdlcl9HZXQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxNjI1ZTYpLCAncG9pbnRlcicsIFtdLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgU2VydmljZVJlc3RyaWN0TWFuYWdlcl9pc1Jlc3RyaWN0ZWQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxNmU2YjgpLCAndWludDgnLCBbJ2ludCcsJ3BvaW50ZXInLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENTZWN1X1Byb3RlY3Rpb25GaWVsZF9DaGVjayA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyODhhMDIpLCAnaW50JywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBzdEFtcGxpZnlPcHRpb25fdF9nZXRBYmlsaXR5VHlwZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODE1MDczMiksICd1aW50OCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgc3RBbXBsaWZ5T3B0aW9uX3RfZ2V0QWJpbGl0eVZhbHVlID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MTUwNzcyKSwgJ3VpbnQxNicsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgc3RBbXBsaWZ5T3B0aW9uX3RfR2V0TG9jayA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgyOGI1YTgpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIFN0cmVhbVBvb2xfQWNxdWlyZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODI4ZmE4NiksICdwb2ludGVyJywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1N0cmVhbUd1YXJkX0NTdHJlYW1HdWFyZCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBjOGMyNiksICd2b2lkJywgWydwb2ludGVyJywncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1N0cmVhbUd1YXJkX29wZXJhdG9yID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBjOGM0NiksICdpbnQnLCBbJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQ1N0cmVhbUd1YXJkX29wZXJhdG9yX2ludCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBjOGM1NiksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIENTdHJlYW1HdWFyZF9vcGVyYXRvcl9wID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MGM4YzRlKSwgJ2ludCcsIFsnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDU3RyZWFtR3VhcmRfR2V0SW5CdWZmZXJfU0lHX0FDQ09VTlRfQ0FSR09fREFUQSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODQ1M2ExMCksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBEZXN0cm95X0NTdHJlYW1HdWFyZF9DU3RyZWFtR3VhcmQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2MWM4ZDIpLCAndm9pZCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQoNCnZhciBDU3RhY2thYmxlSXRlbV9nZXRTdGFja2FibGVMaW1pdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIyYzlmYyksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIGl0ZW1fbG9ja19DSXRlbUxvY2tfQ2hlY2tJdGVtTG9jayA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODU0MWE5NiksICdpbnQnLCBbJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgVXBncmFkZVNlcGFyYXRlSW5mb19Jc1RyYWRlUmVzdHJpY3Rpb24gPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgxMTBiMGEpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBTdHJlYW1fb3BlcmF0b3JfcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODYxYzc5NiksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFN0cmVhbV9HZXRPdXRCdWZmZXJfU0lHX0FDQ09VTlRfQ0FSR09fREFUQSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODQ1M2EyNiksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQp2YXIgQ0d1aWxkU2VydmVyUHJveHlfU2VuZEluY3JlYXNlR3VpbGRFeHAgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg0NmVjZTIpLCAnaW50JywgWydwb2ludGVyJywnaW50JywnaW50JywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBQdlBTa2lsbFRyZWVQYXJhbWV0ZXJTY3JpcHRfZ2V0UHZQU2tpbGxQb2ludCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwOGE1ZGQ2MiksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFNlcnZlclBhcmFtZXRlclNjcmlwdF9pc0R1bmdlb25PcGVuICA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODI2ODdmYyksICdpbnQnLCBbXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFhOdWNsZWFyX0NIYWRlc19FeHBVcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODRiOTUzZSksICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFdhclJvb21fU2VuZFRvUm9vbSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODZiZTBjYyksICdpbnQnLCBbJ3BvaW50ZXInLCdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIENDaGFyYWN0ZXJWaWV3X2VuYWJsZVNhdmVDaGFyYWNWaWV3ID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODIyZmJkYSksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBDTGV2ZWxEdW5nZW9uUGxheVN0YXRpc3RpY19JbmNyZWFzZUxldmVsRHVuZ2VvblBsYXkgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg2MGVjYzYpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ2ludCcsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgZXhwZXJ0X2pvYl9DRXhwZXJ0Sm9iX0luY3JlYXNlRXhwZXJ0Sm9iRXhwID0gIG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODM3NTAyNiksICd2b2lkJywgWydwb2ludGVyJywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgQVBTeXN0ZW1fQ1VzZXJQcm9jX0NsZWFyQWN0aW9uQW5kU2VuZHRvVXNlciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODEyMjM5MCksICd2b2lkJywgWydwb2ludGVyJywnaW50JywnaW50JywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBEQl9JbnNlcnRVbmxpbWl0U3VwcG9ydExvZ19tYWtlUmVxdWVzdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODBjYmM5ZSksICd2b2lkJywgWydwb2ludGVyJywnaW50JywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgREJfSW5zZXJ0QXJjaGlldmVFdmVudExvZ19tYWtlUmVxdWVzdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHgwODExNTk5OCksICd2b2lkJywgWydpbnQnLCdpbnQnLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIFJEQVJTY3JpcHRTdHJpbmdNYW5hZ2VyX2ZpbmRTdHJpbmcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDhhYTU3ZmUpLCAncG9pbnRlcicsIFsncG9pbnRlcicsJ2ludCcsJ3BvaW50ZXInLCdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIEltcG9ydFNwUGVyTGV2ZWxSZWZlcmVuY2VUYWJsZSA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDg5MTA1MDUpLCAnaW50JywgWydwb2ludGVyJywncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgc3RTcFBlckxldmVsVGFibGUgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDA4MzdmNTQ0KSwgJ3ZvaWQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+iOt+WPluiDjOWMheanveS4reeahOmBk+WFtw0KdmFyIElOVkVOVE9SWV9UWVBFX0JPRFkgPSAwOyAgICAgICAgICAgIC8v6Lqr5LiK56m/55qE6KOF5aSHKDAtMjYpDQp2YXIgSU5WRU5UT1JZX1RZUEVfSVRFTSA9IDE7ICAgICAgICAgICAgLy/nianlk4HmoI8oMC0zMTEpDQp2YXIgSU5WRU5UT1JZX1RZUEVfQVZBUlRBUiA9IDI7ICAgICAgICAgLy/ml7boo4XmoI8oMC0xMDQpDQp2YXIgSU5WRU5UT1JZX1RZUEVfQ1JFQVRVUkUgPSAzOyAgICAgICAgLy/lrqDnianoo4XlpIcoMC0yNDEpDQoNCi8v6YCa55+l5a6i5oi356uv5pu05paw6IOM5YyF5qCPDQp2YXIgRU5VTV9JVEVNU1BBQ0VfSU5WRU5UT1JZID0gMDsgICAgICAgLy/nianlk4HmoI8NCnZhciBFTlVNX0lURU1TUEFDRV9BVkFUQVIgPSAxOyAgICAgICAgICAvL+aXtuijheagjw0KdmFyIEVOVU1fSVRFTVNQQUNFX0NBUkdPID0gMjsgICAgICAgICAgIC8v5LuT5bqTDQp2YXIgRU5VTV9JVEVNU1BBQ0VfQ1JFQVRVUkUgPSA3OyAgICAgICAgLy/lrqDnianmoI8NCnZhciBFTlVNX0lURU1TUEFDRV9BQ0NPVU5UX0NBUkdPID0gMTI7ICAvL+i0puWPt+S7k+W6kw0KDQovL01ZU1FM5pON5L2cDQovL+a4uOaIj+S4reW3suaJk+W8gOeahOaVsOaNruW6k+e0ouW8lSjmuLjmiI/mlbDmja7lupPpnZ7nur/nqIvlronlhagg6LCo5oWO5pON5L2cKQ0KdmFyIFRBSVdBTl9DQUlOID0gMjsNCnZhciBEQk1ncl9HZXREQkhhbmRsZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4M0Y1MjNFKSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfTXlTUUwgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODNGM0FDOCksICdwb2ludGVyJywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBNeVNRTF9pbml0ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgzRjNDRTQpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBNeVNRTF9vcGVuID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgzRjQwMjQpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50JywgJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBNeVNRTF9jbG9zZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4M0YzRTc0KSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfc2V0X3F1ZXJ5XzIgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODNGNDFDMCksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfc2V0X3F1ZXJ5XzMgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODNGNDFDMCksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX3NldF9xdWVyeV80ID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgzRjQxQzApLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfc2V0X3F1ZXJ5XzUgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODNGNDFDMCksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfc2V0X3F1ZXJ5XzYgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODNGNDFDMCksICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdpbnQnLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX2V4ZWMgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODNGNDMyNiksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBNeVNRTF9leGVjX3F1ZXJ5PSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4MDgzRjUzNDgpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBNeVNRTF9nZXRfbl9yb3dzID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgwRTIzNkMpLCAnaW50JywgWydwb2ludGVyJ10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciBNeVNRTF9mZXRjaCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4M0Y0NEJDKSwgJ2ludCcsIFsncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfZ2V0X2ludCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTE2OTJDKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfZ2V0X3VpbnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODBFMjJGMiksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX2dldF91bG9uZ2xvbmcgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODE3NTRDOCksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX2dldF91c2hvcnQgPSBuZXcgTmF0aXZlRnVuY3Rpb24ocHRyKDB4ODExNjk5MCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX2dldF9mbG9hdCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NDRENkQwKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAncG9pbnRlciddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfZ2V0X2JpbmFyeSA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MTI1MzFBKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX2dldF9iaW5hcnlfbGVuZ3RoID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgxMjUzREUpLCAnaW50JywgWydwb2ludGVyJywgJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQp2YXIgTXlTUUxfZ2V0X3N0ciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4MEVDREVBKSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIE15U1FMX2Jsb2JfdG9fc3RyID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cigweDgzRjQ1MkEpLCAncG9pbnRlcicsIFsncG9pbnRlcicsICdpbnQnLCAncG9pbnRlcicsICdpbnQnXSwgeyJhYmkiOiJzeXN2In0pOw0KdmFyIGNvbXByZXNzX3ppcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NkIyMDFGKSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCnZhciB1bmNvbXByZXNzX3ppcCA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4NkIyMTAyKSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInLCAnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCg0KdmFyIE15U1FMX3NldF9xdWVyeV8zX3B0ciA9IG5ldyBOYXRpdmVGdW5jdGlvbihwdHIoMHg4M0Y0MUMwKSwgJ2ludCcsIFsncG9pbnRlcicsICdwb2ludGVyJywgJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KDQovL+W3suaJk+W8gOeahOaVsOaNruW6k+WPpeafhA0KdmFyIG15c3FsX3RhaXdhbl9jYWluID0gbnVsbDsNCnZhciBteXNxbF90YWl3YW5fY2Fpbl8ybmQgPSBudWxsOw0KdmFyIG15c3FsX3RhaXdhbl9iaWxsaW5nID0gbnVsbDsNCnZhciBteXNxbF9mcmlkYSA9IG51bGw7DQoNCg0KDQovKioNCiAqICDmnI3liqHnq6/lh73mlbBIb29r44CB5bCB6KOF5Y+K6Ieq5a6a5LmJ5Yqf6IO9DQogKi8NCi8v6I635Y+W57O757ufVVRD5pe26Ze0KOenkikNCmZ1bmN0aW9uIGFwaV9DU3lzdGVtVGltZV9nZXRDdXJTZWMoKQ0Kew0KICAgIHJldHVybiBnZXRDdXJTZWMocHRyKDApKTsNCn0NCg0KLy/nu5nop5LoibLlj5Hnu4/pqowNCmZ1bmN0aW9uIGFwaV9DVXNlcl9nYWluX2V4cF9zcCh1c2VyLCBleHApDQp7DQogICAgdmFyIGEyID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgIHZhciBhMyA9IE1lbW9yeS5hbGxvYyg0KTsNCiAgICBDVXNlcl9nYWluX2V4cF9zcCh1c2VyLCBleHAsIGEyLCBhMywgMCwgMCwgMCk7DQp9DQoNCi8v57uZ6KeS6Imy5Y+R6YGT5YW3DQpmdW5jdGlvbiBhcGlfQ1VzZXJfQWRkSXRlbSh1c2VyLCBpdGVtX2lkLCBpdGVtX2NudCkNCnsNCiAgICB2YXIgaXRlbV9zcGFjZSA9IE1lbW9yeS5hbGxvYyg0KTsNCiAgICB2YXIgc2xvdCA9IENVc2VyX0FkZEl0ZW0odXNlciwgaXRlbV9pZCwgaXRlbV9jbnQsIDYsIGl0ZW1fc3BhY2UsIDApOw0KDQogICAgaWYoc2xvdCA+PSAwKQ0KICAgIHsNCiAgICAgICAgLy/pgJrnn6XlrqLmiLfnq6/mnInmuLjmiI/pgZPlhbfmm7TmlrANCiAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHVzZXIsIDEsIGl0ZW1fc3BhY2UucmVhZEludCgpLCBzbG90KTsNCiAgICB9DQoNCiAgICByZXR1cm47DQp9DQoNCi8v6I635Y+W6KeS6Imy5ZCN5a2XDQpmdW5jdGlvbiBhcGlfQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05hbWUodXNlcikNCnsNCiAgICB2YXIgcCA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNOYW1lKHVzZXIpOw0KICAgIGlmKHAuaXNOdWxsKCkpDQogICAgew0KICAgICAgICByZXR1cm4gJyc7DQogICAgfQ0KDQogICAgcmV0dXJuIHAucmVhZFV0ZjhTdHJpbmcoLTEpOw0KfQ0KDQovL+e7meinkuiJsuWPkea2iOaBrw0KZnVuY3Rpb24gYXBpX0NVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh1c2VyLCBtc2csIG1zZ190eXBlKQ0Kew0KICAgIHZhciBwID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyhtc2cpOw0KICAgIENVc2VyX1NlbmROb3RpUGFja2V0TWVzc2FnZSh1c2VyLCBwLCBtc2dfdHlwZSk7DQoNCiAgICByZXR1cm47DQp9DQoNCg0KLy/ngrnliLjlhYXlgLwgKOemgeatouebtOaOpeS/ruaUuWJpbGxpbmflupPmiYDmnInooajlrZfmrrUsIOeCueWIuOebuOWFs+aTjeS9nOWKoeW/heiwg+eUqOaVsOaNruW6k+WtmOWCqOi/h+eoiyEpDQpmdW5jdGlvbiBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIGFtb3VudCkNCnsNCiAgICAvL+WFheWAvA0KICAgIFdvbmdXb3JrX0lQR19DSVBHSGVscGVyX0lQR0lucHV0KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIDUsIGFtb3VudCwgcHRyKDB4OEM3RkEyMCksIHB0cigweDhDN0ZBMjApLA0KICAgICAgICBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCdHTScpLCBwdHIoMCksIHB0cigwKSwgcHRyKDApKTsNCg0KICAgIC8v6YCa55+l5a6i5oi356uv5YWF5YC857uT5p6cDQogICAgV29uZ1dvcmtfSVBHX0NJUEdIZWxwZXJfSVBHUXVlcnkocHRyKDB4OTQxRjczNCkucmVhZFBvaW50ZXIoKSwgdXNlcik7DQp9DQoNCi8v5Luj5biB5YWF5YC8ICjnpoHmraLnm7TmjqXkv67mlLliaWxsaW5n5bqT5omA5pyJ6KGo5a2X5q61LCDngrnliLjnm7jlhbPmk43kvZzliqHlv4XosIPnlKjmlbDmja7lupPlrZjlgqjov4fnqIshKQ0KZnVuY3Rpb24gYXBpX3JlY2hhcmdlX2Nhc2hfY2VyYV9wb2ludCh1c2VyLCBhbW91bnQpDQp7DQogICAgLy/lhYXlgLwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdJbnB1dFBvaW50KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIGFtb3VudCwgNCwgcHRyKDApLCBwdHIoMCkpOw0KDQogICAgLy/pgJrnn6XlrqLmiLfnq6/lhYXlgLznu5PmnpwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdRdWVyeShwdHIoMHg5NDFGNzM0KS5yZWFkUG9pbnRlcigpLCB1c2VyKTsNCn0NCg0KLy/ojrflj5bpgZPlhbflkI3lrZcNCmZ1bmN0aW9uIGFwaV9DSXRlbV9HZXRJdGVtTmFtZShpdGVtX2lkKQ0Kew0KICAgIHZhciBjaXRlbSA9IENEYXRhTWFuYWdlcl9maW5kX2l0ZW0oR19DRGF0YU1hbmFnZXIoKSwgaXRlbV9pZCk7DQogICAgaWYoIWNpdGVtLmlzTnVsbCgpKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIHB0cihDSXRlbV9HZXRJdGVtTmFtZShjaXRlbSkpLnJlYWRVdGY4U3RyaW5nKC0xKTsNCiAgICB9DQoNCiAgICByZXR1cm4gaXRlbV9pZC50b1N0cmluZygpOw0KfQ0KIA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9FTkQg5pyN5Yqh56uv5Z+656GAYXBp5Ye95pWwLOivtOaYjjrmnI3liqHnq6/ln7rnoYBhcGnlh73mlbAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KIA0KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0JFR0lOIOaMguaOpea2iOaBr+WIhuWPkee6v+eoiywg6K+05piOOuaMguaOpea2iOaBr+WIhuWPkee6v+eoiyDmiafooYzpnIDopoHlnKjkuLvnur/nqIvov5DooYznmoTku6PnoIEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogDQoNCg0KLy/pnIDopoHlnKhkaXNwYXRjaGVy57q/56iL5omn6KGM55qE5Lu75Yqh6Zif5YiXKOeDreWKoOi9veWQjuS8muiiq+a4heepuikNCnZhciB0aW1lcl9kaXNwYXRjaGVyX2xpc3QgPSBbXTsNCg0KLy/lnKhkaXNwYXRjaGVy57q/56iL5omn6KGMKGFyZ3PkuLrlh73mlbBm55qE5Y+C5pWw57uE5oiQ55qE5pWw57uELCDoi6Vm5peg5Y+C5pWwYXJnc+WPr+S4um51bGwpDQpmdW5jdGlvbiBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQoZiwgYXJncykNCnsNCiAgICAvL+e6v+eoi+WuieWFqA0KICAgIHZhciBndWFyZCA9IGFwaV9HdWFyZF9NdXRleF9HdWFyZCgpOw0KDQogICAgdGltZXJfZGlzcGF0Y2hlcl9saXN0LnB1c2goW2YsIGFyZ3NdKTsNCg0KICAgIERlc3Ryb3lfR3VhcmRfTXV0ZXhfR3VhcmQoZ3VhcmQpOw0KDQogICAgcmV0dXJuOw0KfQ0KDQovL+iuvue9ruWumuaXtuWZqCDliLDmnJ/lkI7lnKhkaXNwYXRjaGVy57q/56iL5omn6KGMDQpmdW5jdGlvbiBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWRfZGVsYXkoZiwgYXJncywgZGVsYXkpDQp7DQogICAgc2V0VGltZW91dChhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQsIGRlbGF5LCBmLCBhcmdzKTsNCn0NCg0KDQovL+eUs+ivt+mUgSjnlLPor7flkI7liqHlv4XmiYvliqjph4rmlL4hISEpDQpmdW5jdGlvbiBhcGlfR3VhcmRfTXV0ZXhfR3VhcmQoKQ0Kew0KICAgIHZhciBhMSA9IE1lbW9yeS5hbGxvYygxMDApOw0KICAgIEd1YXJkX011dGV4X0d1YXJkKGExLCBHX1RpbWVyUXVldWUoKS5hZGQoMTYpKTsNCg0KICAgIHJldHVybiBhMTsNCn0NCg0KLy/lpITnkIbliLDmnJ/nmoToh6rlrprkuYnlrprml7blmagNCmZ1bmN0aW9uIGRvX3RpbWVyX2Rpc3BhdGNoKCkNCnsNCiAgICAvL+W9k+WJjeW+heWkhOeQhueahOWumuaXtuWZqOS7u+WKoeWIl+ihqA0KICAgIHZhciB0YXNrX2xpc3QgPSBbXTsNCg0KICAgIC8v57q/56iL5a6J5YWoDQogICAgdmFyIGd1YXJkID0gYXBpX0d1YXJkX011dGV4X0d1YXJkKCk7DQoNCiAgICAvL+S+neasoeWPluWHuumYn+WIl+S4reeahOS7u+WKoQ0KICAgIHdoaWxlKHRpbWVyX2Rpc3BhdGNoZXJfbGlzdC5sZW5ndGggPiAwKQ0KICAgIHsNCiAgICAgICAgLy/lhYjlhaXlhYjlh7oNCiAgICAgICAgdmFyIHRhc2sgPSB0aW1lcl9kaXNwYXRjaGVyX2xpc3Quc2hpZnQoKTsNCiAgICAgICAgdGFza19saXN0LnB1c2godGFzayk7DQogICAgfQ0KDQogICAgRGVzdHJveV9HdWFyZF9NdXRleF9HdWFyZChndWFyZCk7DQoNCiAgICAvL+aJp+ihjOS7u+WKoQ0KICAgIGZvcih2YXIgaT0wOyBpPHRhc2tfbGlzdC5sZW5ndGg7ICsraSkNCiAgICB7DQogICAgICAgIHZhciB0YXNrID0gdGFza19saXN0W2ldOw0KDQogICAgICAgIHZhciBmID0gdGFza1swXTsNCiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrWzFdOw0KDQogICAgICAgIGYuYXBwbHkobnVsbCwgYXJncyk7DQogICAgfQ0KfQ0KDQoNCi8v5oyC5o6l5raI5oGv5YiG5Y+R57q/56iLIOehruS/neS7o+eggee6v+eoi+WuieWFqA0KZnVuY3Rpb24gaG9va19UaW1lckRpc3BhdGNoZXJfZGlzcGF0Y2goKQ0Kew0KICAgIC8vaG9vayBUaW1lckRpc3BhdGNoZXI6OmRpc3BhdGNoDQogICAgLy/mnI3liqHlmajlhoXnva7lrprml7blmagg5q+P56eS6Iez5bCR5omn6KGM5LiA5qyhDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2MzJBMTgpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgfSwNCiAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KDQogICAgICAgICAgICAvL+a4heepuuetieW+heaJp+ihjOeahOS7u+WKoemYn+WIlw0KICAgICAgICAgICAgZG9fdGltZXJfZGlzcGF0Y2goKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfSANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOaMguaOpea2iOaBr+WIhuWPkee6v+eoiyzor7TmmI465oyC5o6l5raI5oGv5YiG5Y+R57q/56iLIOaJp+ihjOmcgOimgeWcqOS4u+e6v+eoi+i/kOihjOeahOS7o+eggS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g6KeS6Imy55m75YWl55m75Ye65aSE55CGLCDor7TmmI466KeS6Imy55m75YWl55m75Ye65aSE55CGLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8v6KeS6Imy55m75YWl55m75Ye65aSE55CGDQogDQovL+inkuiJsueZu+WFpeeZu+WHuuWkhOeQhg0KZnVuY3Rpb24gaG9va191c2VyX2lub3V0X2dhbWVfd29ybGQoKSB7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+IOW8gOWQr+inkuiJsueZu+WFpeeZu+WHuuWkhOeQhiIpOw0KICAgIC8v6YCJ5oup6KeS6Imy5aSE55CG5Ye95pWwIEhvb2sgR2FtZVdvcmxkOjpyZWFjaF9nYW1lX3dvcmxkDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2QzRFNTApLCB7DQogICAgICAgIC8v5Ye95pWw5YWl5Y+jLCDmi7/liLDlh73mlbDlj4LmlbBhcmdzDQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICAvL+S/neWtmOWHveaVsOWPguaVsA0KICAgICAgICAgICAgdGhpcy51c2VyID0gYXJnc1sxXTsgICAgICAgICAgDQogICAgICAgICAgICB2YXIgY2hhcmFjX25vID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05vKHRoaXMudXNlcik7DQogICAgICAgICAgICB2YXIgY2hhcmFjX05hbWUgPSBhcGlfQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05hbWUodGhpcy51c2VyKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfop5LoibI8JytjaGFyYWNfTmFtZSsnOicrY2hhcmFjX25vKyc+55m75b2V5ri45oiPJyk7DQogICAgICAgICAgICB2YXIgZ2FtZV9jb25maWcgPSBnbG9iYWxfY29uZmlnWydnYW1lX2NvbmZpZyddOw0KICAgICAgICAgICAgaWYoZ2FtZV9jb25maWdbJ2VuYWJsZV91c2VyX2xvZ2luX3dlbGNvbWUnXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgICAgICAvL+e7meinkuiJsuWPkea2iOaBr+mXruWAmQ0KICAgICAgICAgICAgIGFwaV9DVXNlcl9TZW5kTm90aVBhY2tldE1lc3NhZ2UodGhpcy51c2VyLCBnYW1lX2NvbmZpZ1snZW5hYmxlX3VzZXJfbG9naW5fd2VsY29tZV90ZXh0J10ucmVwbGFjZSgnJXMnLCBjaGFyYWNfTmFtZSksIDEpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLy/popHpgZPlhazlkYoNCiAgICAgICAgICAgIGlmKGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9sb2dpbl9ub3RpY2UnXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgICAgICBwdXNoU2VuZE5vdGlQYWNrZXRNZXNzYWdlKGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9sb2dpbl9ub3RpY2VfdGV4dCddLnJlcGxhY2UoJyVzJywgY2hhcmFjX05hbWUpLDE2KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHZhciB1c2VyRHRvPXsNCiAgICAgICAgICAgICAgICAndHlwZSc6J2dhbWVfdXNlcl9sb2dpbicsDQogICAgICAgICAgICAgICAgJ2RhdGEnOiBjaGFyYWNfbm8NCiAgICAgICAgICAgIH07DQogICAgICAgICAgICBzZW5kKEpTT04uc3RyaW5naWZ5KHVzZXJEdG8pKTsNCiAgICAgICAgfSwNCiAgICAgICAgLy/ljp/lh73mlbDmiafooYzlrozmr5UsIOi/memHjOWPr+S7peW+l+WIsOW5tuS/ruaUuei/lOWbnuWAvHJldHZhbA0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgIH0NCiAgICB9KTsNCg0KICAgIC8v6KeS6Imy6YCA5Ye65pe25aSE55CG5Ye95pWwIEhvb2sgR2FtZVdvcmxkOjpsZWF2ZV9nYW1lX3dvcmxkDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2QzUyODgpLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB2YXIgdXNlciA9IGFyZ3NbMV07DQogICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyOw0KICAgICAgICB9DQogICAgfSk7DQogICAgLy/op5LoibLpgIDlh7rml7blpITnkIblh73mlbAgSG9vayBDR2FtZU1hbmFnZXI6OnVzZXJfZXhpdA0KICAgIEludGVyY2VwdG9yLmF0dGFjaChwdHIoMHgwODI5ODVhOCksIHsNCg0KICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICAgICAgdmFyIHVzZXIgPSBhcmdzWzFdOw0KICAgICAgICAgICAgdGhpcy51c2VyID0gdXNlcjsNCiAgICAgICAgICAgIHZhciBjaGFyYWNfbm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTm8odGhpcy51c2VyKTsNCiAgICAgICAgICAgIHZhciBjaGFyYWNfTmFtZSA9IGFwaV9DVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTmFtZSh0aGlzLnVzZXIpOw0KICAgICAgICAgICAgY29uc29sZS5sb2coJ+inkuiJsjwnK2NoYXJhY19OYW1lKyc6JytjaGFyYWNfbm8rJz7pgIDlh7rmuLjmiI8nKTsNCiAgICAgICAgICAgIC8v6aKR6YGT5YWs5ZGKDQogICAgICAgICAgICBpZihnYW1lX2NvbmZpZ1snZW5hYmxlX3VzZXJfZXhpdF9ub3RpY2UnXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgICAgICBwdXNoU2VuZE5vdGlQYWNrZXRNZXNzYWdlKGdhbWVfY29uZmlnWydlbmFibGVfdXNlcl9leGl0X25vdGljZV90ZXh0J10ucmVwbGFjZSgnJXMnLCBjaGFyYWNfTmFtZSksMTYpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgICAgICAvLyB2YXIgYWNjSWQgPSBDVXNlcl9nZXRfYWNjX2lkKHRoaXMudXNlcik7DQogICAgICAgIH0NCiAgICB9KTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDop5LoibLnmbvlhaXnmbvlh7rlpITnkIYs6K+05piOOuinkuiJsueZu+WFpeeZu+WHuuWkhOeQhi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5LiW55WM5bm/5pKtKOmikemBk+WGheWFrOWRiiksIOivtOaYjjrkuJbnlYzlub/mkq0o6aKR6YGT5YaF5YWs5ZGKKS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiANCiANCg0KLy/lj5HpgIHlrZfnrKbkuLLnu5nlrqLmiLfnq68NCmZ1bmN0aW9uIGFwaV9JbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3N0cmluZyhwYWNrZXRfZ3VhcmQsIHMpDQp7DQogICAgdmFyIHAgPSBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKHMpOw0KICAgIHZhciBsZW4gPSBzdHJsZW4ocCk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9pbnQocGFja2V0X2d1YXJkLCBsZW4pOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYmluYXJ5KHBhY2tldF9ndWFyZCwgcCwgbGVuKTsNCg0KICAgIHJldHVybjsNCn0NCg0KIC8v5LiW55WM5bm/5pKtKOmikemBk+WGheWFrOWRiikNCmZ1bmN0aW9uIGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKG1zZywgbXNnX3R5cGUpDQp7DQogICAgdmFyIHBhY2tldF9ndWFyZCA9IGFwaV9QYWNrZXRHdWFyZF9QYWNrZXRHdWFyZCgpOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaGVhZGVyKHBhY2tldF9ndWFyZCwgMCwgMTIpOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShwYWNrZXRfZ3VhcmQsIG1zZ190eXBlKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KHBhY2tldF9ndWFyZCwgMCk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKHBhY2tldF9ndWFyZCwgMCk7DQogICAgYXBpX0ludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc3RyaW5nKHBhY2tldF9ndWFyZCwgbXNnKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfZmluYWxpemUocGFja2V0X2d1YXJkLCAxKTsNCiAgICBHYW1lV29ybGRfc2VuZF9hbGxfd2l0aF9zdGF0ZShHX0dhbWVXb3JsZCgpLCBwYWNrZXRfZ3VhcmQsIDMpOyAgLy/lj6rnu5lzdGF0ZSA+PSAzIOeahOeOqeWutuWPkeWFrOWRig0KICAgIERlc3Ryb3lfUGFja2V0R3VhcmRfUGFja2V0R3VhcmQocGFja2V0X2d1YXJkKTsNCn0NCg0KLy/lkJHlrprml7bku7vliqHliJfooajmt7vliqDkuIDkuKrlj5HpgIHlhazlkYrnmoTlrprml7bku7vliqENCmZ1bmN0aW9uIHB1c2hTZW5kTm90aVBhY2tldE1lc3NhZ2UobXNnLCBtc2dfdHlwZSl7DQogIHZhciBhcmdzID0gW107DQogIGFyZ3MucHVzaChtc2cpOw0KICBhcmdzLnB1c2gobXNnX3R5cGUpOw0KICBhcGlfc2NoZWR1bGVPbk1haW5UaHJlYWQoYXBpX0dhbWVXb3JsZF9TZW5kTm90aVBhY2tldE1lc3NhZ2UsIGFyZ3MpOw0KfQ0KIA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9FTkQg5LiW55WM5bm/5pKtKOmikemBk+WGheWFrOWRiiks6K+05piOOuS4lueVjOW5v+aSrSjpopHpgZPlhoXlhazlkYopLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDliqDovb3mnKzlnLBqc29u6YWN572u5paH5Lu2LCDor7TmmI46ZnJpZGHkuLvlh73mlbDkvp3otZbvvIzor7vlj5ZkbmYtYWRtaW7phY3lpZfnmoRqc29u6YWN572u5paH5Lu2LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KICANCg0KDQovL+WKoOi9veacrOWcsOmFjee9ruaWh+S7tihqc29u5qC85byPKQ0KdmFyIGdsb2JhbF9jaGFubmVsID0gJyc7DQp2YXIgZ2xvYmFsX2NvbmZpZyA9IHt9Ow0KZnVuY3Rpb24gbG9hZF9jb25maWcoY2hhbm5lbCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuWKoOi9vWpzb27phY3nva7mlofku7YiKQ0KICAgIGdsb2JhbF9jaGFubmVsPWNoYW5uZWw7DQogICAgdmFyIGRhdGEgPSBhcGlfcmVhZF9maWxlKCcvZGF0YS9mcmlkYS8nICsgY2hhbm5lbCArICcvZnJpZGFfY29uZi5qc29uJywgJ3InLCAxMCAqIDEwMjQgKiAxMDI0KTsNCiAgICBnbG9iYWxfY29uZmlnID0gSlNPTi5wYXJzZShkYXRhKTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDliqDovb3mnKzlnLBqc29u6YWN572u5paH5Lu2LOivtOaYjjpmcmlkYeS4u+WHveaVsOS+nei1lu+8jOivu+WPlmRuZi1hZG1pbumFjeWll+eahGpzb27phY3nva7mlofku7YtLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KIA0KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0JFR0lOIOivu+WPluacrOWcsOaWh+S7tiwg6K+05piOOuivu+WPluacrOWcsOaWh+S7tizliqDovb3mnKzlnLBqc29u6YWN572u5paH5Lu25L6d6LWWLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8vbGludXjor7vmnKzlnLDmlofku7YNCnZhciBmb3BlbiA9IG5ldyBOYXRpdmVGdW5jdGlvbihNb2R1bGUuZ2V0RXhwb3J0QnlOYW1lKG51bGwsICdmb3BlbicpLCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInXSwgeyAiYWJpIjogInN5c3YiIH0pOw0KdmFyIGZyZWFkID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKE1vZHVsZS5nZXRFeHBvcnRCeU5hbWUobnVsbCwgJ2ZyZWFkJyksICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCcsICdpbnQnXSwgeyAiYWJpIjogInN5c3YiIH0pOw0KdmFyIGZjbG9zZSA9IG5ldyBOYXRpdmVGdW5jdGlvbihNb2R1bGUuZ2V0RXhwb3J0QnlOYW1lKG51bGwsICdmY2xvc2UnKSwgJ2ludCcsIFsnaW50J10sIHsgImFiaSI6ICJzeXN2IiB9KTsNCmZ1bmN0aW9uIGFwaV9yZWFkX2ZpbGUocGF0aCwgbW9kZSwgbGVuKSB7DQogICAgdmFyIHBhdGhfcHRyID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyhwYXRoKTsNCiAgICB2YXIgbW9kZV9wdHIgPSBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKG1vZGUpOw0KICAgIHZhciBmID0gZm9wZW4ocGF0aF9wdHIsIG1vZGVfcHRyKTsNCiAgICBpZiAoZiA9PSAwKQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB2YXIgZGF0YSA9IE1lbW9yeS5hbGxvYyhsZW4pOw0KICAgIHZhciBmcmVhZF9yZXQgPSBmcmVhZChkYXRhLCAxLCBsZW4sIGYpOw0KICAgIGZjbG9zZShmKTsNCiAgICAvL+i/lOWbnuWtl+espuS4sg0KICAgIGlmIChtb2RlID09ICdyJykNCiAgICAgICAgcmV0dXJuIGRhdGEucmVhZFV0ZjhTdHJpbmcoZnJlYWRfcmV0KTsNCiAgICAvL+i/lOWbnuS6jOi/m+WItmJ1ZmbmjIfpkogNCiAgICByZXR1cm4gZGF0YTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDor7vlj5bmnKzlnLDmlofku7Ys6K+05piOOuivu+WPluacrOWcsOaWh+S7tizliqDovb3mnKzlnLBqc29u6YWN572u5paH5Lu25L6d6LWWLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDmoLnmja7phY3nva7liJ3lp4vljJbnm7jlhbPlip/og70sIOivtOaYjjrmoLnmja7phY3nva7liJ3lp4vljJbnm7jlhbPlip/og70tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/moLnmja7muLjmiI/phY3nva7mjqfliLbnm7jlhbPlip/og70NCg0KLy/moLnmja7phY3nva7liJ3lp4vljJbnm7jlhbPlip/og70JDQpmdW5jdGlvbiBpbml0Rm9yQ29uZmlnKCl7DQogICAgdmFyIGdhbWVfY29uZmlnID0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXTsNCiAgICBpZihnYW1lX2NvbmZpZ1snZW5hYmxlX2dhbWVfbWFzdGVyJ10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v5omA5pyJ6LSm5Y+36KeS6Imy5byA5ZCvR03mnYPpmZANCiAgICAgICAgaG9va19jaGVja19nbSgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snZGlzYWJsZV9jaGVja19jcmVhdGVfY2hhcmFjdGVyX2xpbWl0J10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v6Kej6Zmk5q+P5pel5Yib5bu66KeS6Imy5pWw6YeP6ZmQ5Yi2DQogICAgICAgIGRpc2FibGVfY2hlY2tfY3JlYXRlX2NoYXJhY3Rlcl9saW1pdCgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snc2hhcmVfc2VyaWFfcm9vbSddID09PSAndHJ1ZScpew0KICAgICAgICAvL+WFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingQ0KICAgICAgICBzaGFyZV9zZXJpYV9yb29tKCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydQcml2YXRlc3RvcmVfSWdub3JlTmVhckR1bmdlb24nXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgLy/lv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYoNCiAgICAgICAgUHJpdmF0ZXN0b3JlX0lnbm9yZU5lYXJEdW5nZW9uKCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydlbmFibGVfY3JlYXRvciddID09PSAndHJ1ZScpew0KICAgICAgICAvL+W8gOWQr+WIm+W7uue8lOmAoA0KICAgICAgICBlbmFibGVfY3JlYXRlQ3JlYXRvcigpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snY2FuY2VsX2VwaWNfb2snXSA9PT0gJ3RydWUnKXsNCiAgICAgICAgLy/lj7Lor5flhY3noa7orqQNCiAgICAgICAgY2FuY2VsX2VwaWNfb2soKTsNCiAgICB9DQogICAgaWYoZ2FtZV9jb25maWdbJ2F1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50J10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v6a2U5rOV5bCB5Y2w6Ieq5Yqo6Kej5bCBDQogICAgICAgIGF1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50KCk7DQogICAgfQ0KICAgIGlmKGdhbWVfY29uZmlnWydkaXNhYmxlX21vYmlsZV9yZXdhcmRzJ10gPT09ICd0cnVlJyl7DQogICAgICAgIC8v5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmDQogICAgICAgIEludGVyY2VwdG9yX0ludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCgpOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snbWF4X2xldmVsJ10gPiAwKXsNCiAgICAgICAgLy/orr7nva7mnIDlpKfnrYnnuqcNCiAgICAgICAgc2V0TWF4VXBHcmFkZShnYW1lX2NvbmZpZ1snbWF4X2xldmVsJ10pOw0KICAgIH0NCiAgICBpZihnYW1lX2NvbmZpZ1snZW5oYW5jZW1lbnRfbGV2ZWxfMTNfbm9fZXhpdCddID09PSAndHJ1ZScpew0KICAgICAgICAvLysxM+S7peS4iuW8uuWMluWIuOaXoOmcgOWwj+mAgA0KICAgICAgICBlbmhhbmNlbWVudF9sZXZlbF8xM19ub19leGl0KCk7DQogICAgfQ0KICAgIA0KfSANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOagueaNrumFjee9ruWIneWni+WMluebuOWFs+WKn+iDvSzor7TmmI465qC55o2u6YWN572u5Yid5aeL5YyW55u45YWz5Yqf6IO9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDprZTms5XlsIHljbDoh6rliqjop6PlsIEsIOivtOaYjjrprZTms5XlsIHljbDoh6rliqjop6PlsIEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/prZTms5XlsIHljbDoh6rliqjop6PlsIENCmZ1bmN0aW9uIGF1dG9fdW5zZWFsX3JhbmRvbV9vcHRpb25fZXF1aXBtZW50KCkgew0KICAgIC8vQ0ludmVudG9yeTo6aW5zZXJ0SXRlbUludG9JbnZlbnRvcnkNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g6a2U5rOV5bCB5Y2w6Ieq5Yqo6Kej5bCBIik7DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg1MDJEODYpLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgICAgICB0aGlzLnVzZXIgPSBhcmdzWzBdLnJlYWRQb2ludGVyKCk7DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCg0KICAgICAgICAgICAgLy/nianlk4HmoI/mlrDlop7nianlk4HnmoTkvY3nva4NCiAgICAgICAgICAgIHZhciBzbG90ID0gcmV0dmFsLnRvSW50MzIoKTsNCiAgICAgICAgICAgIGlmIChzbG90ID4gMCkgew0KICAgICAgICAgICAgICAgIC8v6I635Y+W6YGT5YW355qE6KeS6ImyDQogICAgICAgICAgICAgICAgdmFyIHVzZXIgPSB0aGlzLnVzZXI7DQoNCiAgICAgICAgICAgICAgICAvL+inkuiJsuiDjOWMhQ0KICAgICAgICAgICAgICAgIHZhciBpbnZlbiA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNJbnZlblcodXNlcik7DQoNCiAgICAgICAgICAgICAgICAvL+iDjOWMheS4reaWsOWinueahOmBk+WFtw0KICAgICAgICAgICAgICAgIHZhciBpbnZlbl9pdGVtID0gQ0ludmVudG9yeV9HZXRJbnZlblJlZihpbnZlbiwgSU5WRU5UT1JZX1RZUEVfSVRFTSwgc2xvdCk7DQoNCiAgICAgICAgICAgICAgICAvL+i/h+a7pOmBk+WFt+exu+Weiw0KICAgICAgICAgICAgICAgIGlmICghSW52ZW5fSXRlbV9pc0VxdWlwYWJsZUl0ZW1UeXBlKGludmVuX2l0ZW0pKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQoNCiAgICAgICAgICAgICAgICAvL+ijheWkh2lkDQogICAgICAgICAgICAgICAgdmFyIGl0ZW1faWQgPSBJbnZlbl9JdGVtX2dldEtleShpbnZlbl9pdGVtKTsNCg0KICAgICAgICAgICAgICAgIC8vcHZm5Lit6I635Y+W6KOF5aSH5pWw5o2uDQogICAgICAgICAgICAgICAgdmFyIGNpdGVtID0gQ0RhdGFNYW5hZ2VyX2ZpbmRfaXRlbShHX0NEYXRhTWFuYWdlcigpLCBpdGVtX2lkKTsNCg0KICAgICAgICAgICAgICAgIC8v5qOA5p+l6KOF5aSH5piv5ZCm5Li66a2U5rOV5bCB5Y2w57G75Z6LDQogICAgICAgICAgICAgICAgaWYgKCFDRXF1aXBJdGVtX0lzUmFuZG9tT3B0aW9uKGNpdGVtKSkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAgICAgLy/mmK/lkKblt7Looqvop6PpmaTprZTms5XlsIHljbDvvIjprZTms5XlsIHljbDliY0xMOS4quWtl+iKguaYr+WQpuS4ujDvvIkNCiAgICAgICAgICAgICAgICB2YXIgcmFuZG9tX29wdGlvbiA9IGludmVuX2l0ZW0uYWRkKDM3KTsNCiAgICAgICAgICAgICAgICBpZiAocmFuZG9tX29wdGlvbi5yZWFkVTMyKCkgfHwgcmFuZG9tX29wdGlvbi5hZGQoNCkucmVhZFUzMigpIHx8IHJhbmRvbV9vcHRpb24uYWRkKDgpLnJlYWRTaG9ydCgpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvL+Wwneivleino+mZpOmtlOazleWwgeWNsA0KICAgICAgICAgICAgICAgIHZhciByZXQgPSByYW5kb21fb3B0aW9uX0NSYW5kb21PcHRpb25JdGVtSGFuZGxlX2dpdmVfb3B0aW9uKHB0cigweDk0MUY4MjApLnJlYWRQb2ludGVyKCksIGl0ZW1faWQsIENJdGVtX0dldFJhcml0eShjaXRlbSksIENJdGVtX0dldFVzYWJsZUxldmVsKGNpdGVtKQ0KICAgICAgICAgICAgICAgICAgICAsIENJdGVtX0dldEl0ZW1Hcm91cE5hbWUoY2l0ZW0pLCBDRXF1aXBJdGVtX0dldFJhbmRvbU9wdGlvbkdyYWRlKGNpdGVtKSwgaW52ZW5faXRlbS5hZGQoMzcpKTsNCiAgICAgICAgICAgICAgICBpZiAocmV0KSB7DQogICAgICAgICAgICAgICAgICAgIC8v6YCa55+l5a6i5oi356uv5pyJ6KOF5aSH5pu05pawDQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh1c2VyLCAxLCAwLCBzbG90KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDprZTms5XlsIHljbDoh6rliqjop6PlsIEs6K+05piOOumtlOazleWwgeWNsOiHquWKqOino+WwgS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5Y+y6K+X5YWN56Gu6K6kLCDor7TmmI465Y+y6K+X5YWN56Gu6K6kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8v5Y+y6K+X5YWN56Gu6K6kDQpmdW5jdGlvbiBjYW5jZWxfZXBpY19vaygpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g5Y+y6K+X5YWN56Gu6K6kIikNCiAgICBNZW1vcnkucGF0Y2hDb2RlKHB0cigweDA4NUE1NkNFKS5hZGQoMiksIDEsIGZ1bmN0aW9uIChjb2RlKSB7DQogICAgICAgIHZhciBjdyA9IG5ldyBYODZXcml0ZXIoY29kZSwgeyBwYzogcHRyKDB4MDg1QTU2Q0UpLmFkZCgyKSB9KTsNCiAgICAgICAgY3cucHV0VTgoOSk7DQogICAgICAgIGN3LmZsdXNoKCk7DQogICAgfSk7DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4MTUwZjE4KSwgew0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgwKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfSANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOWPsuivl+WFjeehruiupCzor7TmmI465Y+y6K+X5YWN56Gu6K6kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDop6PpmaTmr4/ml6XliJvlu7rop5LoibLmlbDph4/pmZDliLYsIOivtOaYjjrop6PpmaTmr4/ml6XliJvlu7rop5LoibLmlbDph4/pmZDliLYtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogDQovL+ino+mZpOavj+aXpeWIm+W7uuinkuiJsuaVsOmHj+mZkOWItg0KZnVuY3Rpb24gZGlzYWJsZV9jaGVja19jcmVhdGVfY2hhcmFjdGVyX2xpbWl0KCkgew0KICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7op6PpmaTmr4/ml6XliJvlu7rop5LoibLmlbDph4/pmZDliLYiKQ0KICAgIC8vREJfQ3JlYXRlQ2hhcmFjOjpDaGVja0xpbWl0Q3JlYXRlTmV3Q2hhcmFjDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg0MDE5MjIpLCB7DQogICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIC8v5by65Yi26L+U5Zue5YWB6K645Yib5bu6DQogICAgICAgICAgICByZXR2YWwucmVwbGFjZSgxKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfSANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOino+mZpOavj+aXpeWIm+W7uuinkuiJsuaVsOmHj+mZkOWItizor7TmmI466Kej6Zmk5q+P5pel5Yib5bu66KeS6Imy5pWw6YeP6ZmQ5Yi2LS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDlvIDlkK/liJvlu7rnvJTpgKAsIOivtOaYjjrlvIDlkK/liJvlu7rnvJTpgKAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/lvIDlkK/liJvlu7rnvJTpgKANCmZ1bmN0aW9uIGVuYWJsZV9jcmVhdGVDcmVhdG9yKCl7DQogICAgY29uc29sZS5sb2coIj09PT09PT09PT09PT09PT09PT09PT0+IOW8gOWQr+WIm+W7uue8lOmAoCIpDQogICAgTWVtb3J5LnBhdGNoQ29kZShwdHIoMHgwODFDMDI5RSkuYWRkKDEpLCAxLCBmdW5jdGlvbiAoY29kZSkgew0KICAgICAgICB2YXIgY3cgPSBuZXcgWDg2V3JpdGVyKGNvZGUsIHsgcGM6IHB0cigweDA4MUMwMjlFKS5hZGQoMSkgfSk7DQogICAgICAgIGN3LnB1dFU4KDExKTsNCiAgICAgICAgY3cuZmx1c2goKTsNCiAgICB9KTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDlvIDlkK/liJvlu7rnvJTpgKAs6K+05piOOuW8gOWQr+WIm+W7uue8lOmAoC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5omA5pyJ6LSm5Y+36KeS6Imy5byA5ZCvR03mnYPpmZAsIOivtOaYjjrmiYDmnInotKblj7fop5LoibLlvIDlkK9HTeadg+mZkC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiANCiAvL+aJgOaciei0puWPt+inkuiJsuW8gOWQr0dN5p2D6ZmQDQpmdW5jdGlvbiBob29rX2NoZWNrX2dtKCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuW8gOWQr0dN5p2D6ZmQIikNCiAgICAvL0dN6LSm5oi3DQogICAgLy9Xb25nV29yazo6Q0dNQWNjb3VudHM6OmlzR00NCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODEwOTM0NiksIHsNCg0KICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICB9LA0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgICAgICAvL+W8uuWItui/lOWbnnRydWUNCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDEpOw0KICAgICAgICB9DQogICAgfSk7DQoNCiAgICAvL0dN6KeS6ImyDQogICAgLy9DVXNlcjo6aXNHTVVzZXINCiAgICBJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4ODE0NTg5QyksIHsNCg0KICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICB9LA0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgICAgICAvL+W8uuWItui/lOWbnnRydWUNCiAgICAgICAgICAgIHJldHZhbC5yZXBsYWNlKDEpOw0KICAgICAgICB9DQogICAgfSk7DQp9IA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9FTkQg5omA5pyJ6LSm5Y+36KeS6Imy5byA5ZCvR03mnYPpmZAs6K+05piOOuaJgOaciei0puWPt+inkuiJsuW8gOWQr0dN5p2D6ZmQLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDlj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYsIOivtOaYjjrlj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/lj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYNCmZ1bmN0aW9uIEludGVyY2VwdG9yX0ludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCgpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT7lj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYiKQ0KICAgIC8v6L+Y5Y6fIEludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZDo6ZGlzcGF0Y2hfc2lnIOWHveaVsA0KICAgIHZhciBEZWZwdHIgPSBwdHIoMHgwODE2MTM4NCk7DQogICAgdmFyIHZhbHVlID0gRGVmcHRyLnJlYWRVOCgpDQogICAgaWYgKHZhbHVlICE9IDB4MEYpIHsNCg0KICAgICAgICBNZW1vcnkucHJvdGVjdChEZWZwdHIsIDEwLCAncnd4Jyk7DQogICAgICAgIERlZnB0ci53cml0ZVNob3J0KDB4ODQwRik7DQogICAgfQ0KICAgIC8v6YeN5YaZSW50ZXJTZWxlY3RNb2JpbGVBdXRoUmV3YXJkOjpkaXNwYXRjaF9zaWcg5Ye95pWwDQogICAgdmFyIEludGVyX0Rpc3BhdGNoUHIgPSBwdHIoMHgwODE2MTMyQSk7DQogICAgdmFyIEludGVyX0Rpc3BhdGNoID0gbmV3IE5hdGl2ZUZ1bmN0aW9uKEludGVyX0Rpc3BhdGNoUHIsICdpbnQnLCBbJ3BvaW50ZXInLCAncG9pbnRlcicsICdwb2ludGVyJ10sIHsgImFiaSI6ICJzeXN2IiB9KTsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKEludGVyX0Rpc3BhdGNoUHIsIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAoSW50ZXJTZWxlY3RNb2JpbGVBdXRoUmV3YXJkLCBDVXNlciwgYTMpIHsNCg0KICAgICAgICAvL3ZhciBJbnRlcl9EaXNwYXRjaE9wZW4gPSB0cnVlOw0KICAgICAgICB2YXIgSW50ZXJfRGlzcGF0Y2hPcGVuID0gZmFsc2U7DQogICAgICAgIGlmIChJbnRlcl9EaXNwYXRjaE9wZW4pIHsNCg0KICAgICAgICAgICAgYTMuYWRkKDQpLndyaXRlSW50KDApOw0KICAgICAgICAgICAgcmV0dXJuIEludGVyX0Rpc3BhdGNoKEludGVyU2VsZWN0TW9iaWxlQXV0aFJld2FyZCwgQ1VzZXIsIGEzKTsgLy/miafooYzljp/lh73mlbDlj5HpgIHmiJDplb/lpZHnuqYNCg0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIDA7IC8v5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmICAgIOi/lOWbnjDooajnpLrmraPluLjov5Tlm54gDQoNCiAgICB9LCAnaW50JywgWydwb2ludGVyJywgJ3BvaW50ZXInLCAncG9pbnRlciddKSk7DQp9IA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9FTkQg5Y+W5raI5paw6LSm5Y+36YCB5oiQ6ZW/5aWR57qmLOivtOaYjjrlj5bmtojmlrDotKblj7fpgIHmiJDplb/lpZHnuqYtLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KIA0KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0JFR0lOIOW/veeVpeWJr+acrOmXqOWPo+emgeatouaRhuaRiiwg6K+05piOOuW/veeVpeWJr+acrOmXqOWPo+emgeatouaRhuaRii0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiANCiAvL+W/veeVpeWJr+acrOmXqOWPo+emgeatouaRhuaRig0KZnVuY3Rpb24gUHJpdmF0ZXN0b3JlX0lnbm9yZU5lYXJEdW5nZW9uKCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuW/veeVpeWJr+acrOmXqOWPo+emgeatouaRhuaRiiIpDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4NUM1MDgyKSwgew0KICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICB9LA0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgICAgICAvL+iOt+WPlui/lOWbnuWAvA0KICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gcmV0dmFsLnRvSW50MzIoKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXR1cm4gVmFsdWU6JyArIHJldHVyblZhbHVlKTsNCiAgICAgICAgICAgIC8v5by65Yi26L+U5ZueMQ0KICAgICAgICAgICAgcmV0dmFsLnJlcGxhY2UoMSk7DQogICAgICAgIH0NCiAgICB9KTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDlv73nlaXlia/mnKzpl6jlj6PnpoHmraLmkYbmkYos6K+05piOOuW/veeVpeWJr+acrOmXqOWPo+emgeatouaRhuaRii0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g6K6+572u5pyA5aSn562J57qnLCDor7TmmI466K6+572u5pyA5aSn562J57qnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8qKg0KICog6K6+572u5pyA5aSn562J57qnDQogKiBAcGFyYW0gbWF4TGV2ZWwNCiAqLw0KZnVuY3Rpb24gc2V0VXNlck1heExldmVsKG1heExldmVsKXsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKHB0cigweDA4NjhmZWM4KSwgbmV3IE5hdGl2ZUNhbGxiYWNrKGZ1bmN0aW9uIChpbmZvLCBsZXZlbCkgew0KICAgICAgICB2YXIgd3JpdGVMZXZlbCA9IG1heExldmVsOw0KICAgICAgICBpZiAobGV2ZWwgPD0gbWF4TGV2ZWwpIHsNCiAgICAgICAgICAgIGlmIChsZXZlbCA+IDApIHsNCiAgICAgICAgICAgICAgICB3cml0ZUxldmVsID0gbGV2ZWw7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHdyaXRlTGV2ZWwgPSAxOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIC8vIDU4NDY2NA0KICAgICAgICBpbmZvLmFkZCgweDhFQkQ4KS53cml0ZUludCh3cml0ZUxldmVsKTsNCiAgICAgICAgcmV0dXJuIGluZm87DQogICAgfSwgJ3BvaW50ZXInLCBbJ3BvaW50ZXInLCAnaW50J10pKTsNCn0NCg0KLyoqDQogKiDph43mlrDorqHnrpfnrYnnuqcNCiAqIEBwYXJhbSBtYXhMZXZlbA0KICovDQpmdW5jdGlvbiBjYWxjdXJhdGVVc2VyTWF4TGV2ZWwobWF4TGV2ZWwpew0KICAgIEludGVyY2VwdG9yLnJlcGxhY2UocHRyKDB4MDg2OGZmMDQpLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKGExKSB7DQogICAgICAgIHZhciBpbmZvID0gYTE7DQogICAgICAgIHZhciBjYWxNYXhMZXZlbCA9IDA7DQogICAgICAgIC8vIOiOt+WPluinkuiJsuaVsOmHjw0KICAgICAgICB2YXIgaW5mb1NpemUgPSBzdGRfdmVjdG9yX2NoYXJhY19pbmZvX3NpemUoaW5mby5hZGQoMHg3OTZFOCkpOw0KICAgICAgICBmb3IodmFyIGk9MDtpPGluZm9TaXplO2krKyl7DQogICAgICAgICAgICAvLyDor7vlj5bmr4/kuKrop5LoibLnmoTnrYnnuqcNCiAgICAgICAgICAgIHZhciByZWFkTGV2ZWwgPSBwdHIoc3RkX3ZlY3Rvcl9DaGFyYWNfaW5mb19vcGVyYXRvckFycihpbmZvLmFkZCg0OTczODQpLGkpKS5hZGQoMzkpLnJlYWRVMTYoKTsNCiAgICAgICAgICAgIGlmKHJlYWRMZXZlbCA+IGNhbE1heExldmVsKXsNCiAgICAgICAgICAgICAgICBjYWxNYXhMZXZlbCA9IHJlYWRMZXZlbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZihjYWxNYXhMZXZlbCA+IG1heExldmVsKXsNCiAgICAgICAgICAgIGNhbE1heExldmVsCT0gbWF4TGV2ZWw7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIENVc2VyX1NldFVzZXJNYXhMZXZlbChpbmZvLGNhbE1heExldmVsKTsNCiAgICB9LCAncG9pbnRlcicsIFsncG9pbnRlciddKSk7DQp9DQoNCi8qKg0KICogdG9kbyDmr4/ml6XnmoTml6XluLjku7vliqENCiAqIEBwYXJhbSBtYXhMZXZlbA0KICovDQpmdW5jdGlvbiBpc1RoZXJlRGFpbHlUcmFpbmluZ1F1ZXN0TGlzdChtYXhMZXZlbCl7DQogICAgSW50ZXJjZXB0b3IucmVwbGFjZShwdHIoMHgwODM2NDExZSksIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAoaW5mbywgYTEsIGEyKSB7DQogICAgICAgIHZhciBsZXZlbCA9IGExOw0KICAgICAgICBpZihsZXZlbDw9MCB8fCBsZXZlbCA+IG1heExldmVsKXsNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9DQogICAgICAgIHZhciBxdWVyc3QgPSBhMjsNCiAgICAgICAgLy8gY29uc29sZS5sb2coInVzZXIgYW5kIGxldmVsIDoiK2luZm8rIiAsIitsZXZlbCsnICwnK3F1ZXJzdCk7DQogICAgICAgIHZhciBxdWVzdExpc3QgPSBDRGF0YU1hbmFnZXJfZ2V0RGFpbHlUcmFpbmluZ1F1ZXN0KGluZm8sbGV2ZWwpOw0KDQogICAgICAgIHZhciBpID0gMDsNCiAgICAgICAgZm9yIChpID0gMDsgaSA8IDY7IGkrKykgew0KICAgICAgICAgICAgdmFyIHZhbCA9IHF1ZXN0TGlzdC5hZGQoaSoyKS5yZWFkVTE2KCk7DQogICAgICAgICAgICBpZihxdWVyc3QgPT0gdmFsKXsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaXNUaGVyZURhaWx5VHJhaW5pbmdRdWVzdExpc3QgIHZhbDonK3ZhbCsnICAnK2kpOw0KICAgICAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiAwOw0KICAgIH0sICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCddKSk7DQp9DQoNCg0KZnVuY3Rpb24gZ2V0UmV0dXJuVXNlckxldmVsS2V5KG1heExldmVsKXsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKHB0cigweDA4NjkyMzBhKSwgbmV3IE5hdGl2ZUNhbGxiYWNrKGZ1bmN0aW9uIChzdE5vdGlmeUluZ2FtZUFESW5mbywgYTIsIGEzKSB7DQogICAgICAgIGNvbnNvbGUubG9nKCdnZXRSZXR1cm5Vc2VyTGV2ZWxLZXkgJytzdE5vdGlmeUluZ2FtZUFESW5mbysnICcrYTIrJyAnK2EzKTsNCiAgICAgICAgaWYoYTMhPTApew0KICAgICAgICAgICAgaWYoYTIgPD0xOSl7DQogICAgICAgICAgICAgICAgcmV0dXJuIDE1Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIGlmKGEyIDw9OSl7DQogICAgICAgICAgICAgICAgcmV0dXJuIDU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihhMiA8PTE0KXsNCiAgICAgICAgICAgICAgICByZXR1cm4gMTA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihhMiA8PTE5KXsNCiAgICAgICAgICAgICAgICByZXR1cm4gMTU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD0yOSl7DQogICAgICAgICAgICByZXR1cm4gMjA7DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD0zOSl7DQogICAgICAgICAgICByZXR1cm4gMzA7DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD00OSl7DQogICAgICAgICAgICByZXR1cm4gNDA7DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD01OSl7DQogICAgICAgICAgICByZXR1cm4gNTA7DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD02OSl7DQogICAgICAgICAgICByZXR1cm4gNjA7DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD03OSl7DQogICAgICAgICAgICByZXR1cm4gNzA7DQogICAgICAgIH0NCiAgICAgICAgaWYoYTIgPD04Nil7DQogICAgICAgICAgICByZXR1cm4gODA7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIDYwOw0KICAgIH0sICdpbnQnLCBbJ3BvaW50ZXInLCAnaW50JywgJ2ludCddKSk7DQp9DQoNCi8qKg0KICog6I635Y+W562J57qn5q6157uP6aqMIO+8jOWKoOi9veWIsOS6hjIwMA0KICovDQpmdW5jdGlvbiBnZXRMZXZlbFNlY3Rpb25FeHAoKXsNCiAgICAvLyAwODM2MDRCNg0KICAgIEludGVyY2VwdG9yLnJlcGxhY2UocHRyKDB4MDgzNjA0QjYpLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKGNoYXJhY0FkdmFuY2VBbHRhck1hbmFnZXIsIGV4cCkgew0KICAgICAgICBpZihleHAgPjEgJiYgZXhwIDw9IDIwMCl7DQogICAgICAgICAgICAvLyDov5Tlm57ku4DkuYjotZ7mmK/kuI3nnIsNCiAgICAgICAgICAgIHZhciBleHBTZWN0aW9uID0gY2hhcmFjQWR2YW5jZUFsdGFyTWFuYWdlci5hZGQoKGV4cCsxMDkxMikqNCkucmVhZFUzMigpLWNoYXJhY0FkdmFuY2VBbHRhck1hbmFnZXIuYWRkKChleHArMTA5MTEpKjQpLnJlYWRVMzIoKQ0KICAgICAgICAgICAgcmV0dXJuIGV4cFNlY3Rpb247DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIDA7DQogICAgfSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnXSkpOw0KfQ0KDQovKioNCiAqIOajgOafpeaYr+WQpuaYr+WNh+e6p+mhuSDkvovlpoLljYfnuqfliLgs55So5aSE5LiN5aSnDQogKiBAcGFyYW0gbWF4TGV2ZWwNCiAqLw0KZnVuY3Rpb24gY2FsTGV2ZWxVcEl0ZW1DaGVjayhtYXhMZXZlbCl7DQogICAgSW50ZXJjZXB0b3IucmVwbGFjZShwdHIoMHgwODY4OWQwNiksIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAodXNlciwgaXRlbV9pZCkgew0KICAgICAgICBjb25zb2xlLmxvZygiY2FsTGV2ZWxVcEl0ZW1DaGVjayBleGVjIikNCiAgICAgICAgdmFyIGNoYXJhY19sZXZlbCA9IENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHVzZXIpOw0KICAgICAgICBpZihhMj09MjY3NTM4OCl7DQogICAgICAgICAgICByZXR1cm4gY2hhcmFjX2xldmVsID4gMCAmJiBjaGFyYWNfbGV2ZWwgPD0gNjk7DQogICAgICAgIH0NCiAgICAgICAgaWYoaXRlbV9pZCA+IDB4MjhEMkJDKXsNCiAgICAgICAgICAgIGlmICggaXRlbV9pZCAhPSAxMDAwMDkxNSAmJiBpdGVtX2lkICE9IDY5MDAwMDA5NyApDQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICByZXR1cm4gY2hhcmFjX2xldmVsID4gMCAmJiBjaGFyYWNfbGV2ZWwgPD0gbWF4TGV2ZWw7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGl0ZW1faWQgPT0gODA0OSAmJiBjaGFyYWNfbGV2ZWwgPiAxOCAmJiBjaGFyYWNfbGV2ZWwgPD0gNTk7DQogICAgfSwgJ2ludCcsIFsncG9pbnRlcicsICdpbnQnXSkpOw0KfQ0KDQoNCg0KLyoqDQogKiBzcOeCuSDlkoxwdmbmnInlhbPns7sNCiAqIEBwYXJhbSBtYXhMZXZlbA0KICovDQpmdW5jdGlvbiBnZXRTcEF0TGV2ZWxVcChtYXhMZXZlbCl7DQogICAgSW50ZXJjZXB0b3IucmVwbGFjZShwdHIoMHgwODM2MGNiOCksIG5ldyBOYXRpdmVDYWxsYmFjayhmdW5jdGlvbiAoY2hhcmFjQWR2YW5jZUFsdGFyTWFuYWdlciwgbGV2ZWwpIHsNCiAgICAgICAgaWYobGV2ZWwgPjAgJiYgbGV2ZWwgPD0gbWF4TGV2ZWwpew0KICAgICAgICAgICAgdmFyIHJlcyA9IGNoYXJhY0FkdmFuY2VBbHRhck1hbmFnZXIuYWRkKChsZXZlbCsxMzk4OCkqNCkucmVhZFUxNigpOw0KICAgICAgICAgICAgcmV0dXJuIHJlczsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gMDsNCiAgICB9LCAnaW50JywgWydwb2ludGVyJywgJ2ludCddKSk7DQp9DQoNCi8qKg0KICog5pyq55+lDQogKiBAcGFyYW0gbWF4TGV2ZWwNCiAqLw0KZnVuY3Rpb24gc2V0TGV2ZWxFeHAobWF4TGV2ZWwpew0KICAgIC8vIEludGVyY2VwdG9yLnJlcGxhY2UocHRyKDB4MDgzNjA0MDApLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKGNoYXJhY0FkdmFuY2VBbHRhck1hbmFnZXIpIHsNCiAgICAvLyAgICAgY29uc29sZS5sb2coInNldExldmVsRXhwIGV4ZWMiKQ0KICAgIC8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDIwMDsgaSsrKSB7DQogICAgLy8gICAgICAgICBjaGFyYWNBZHZhbmNlQWx0YXJNYW5hZ2VyLmFkZCgoaSsxMDkxMykqNCkud3JpdGVVSW50KDEwMDAwMCtpKTsNCiAgICAvLyAgICAgfQ0KICAgIC8vICAgICByZXR1cm4gMTsNCiAgICAvLyB9LCAnaW50JywgWydwb2ludGVyJ10pKTsNCn0NCg0KLyoqDQogKiDorr7nva7mr4/kuKrnrYnnuqfpgIHnmoRzcCAs5LuO5paH5Lu25Lit6K+75Y+W5Ye65p2l77yM5aSn5qaC5pyA5aSa5YiwMjAwDQogKiBAcGFyYW0gbWF4TGV2ZWwNCiAqLw0KZnVuY3Rpb24gc2V0UmV3YXJkU3AobWF4TGV2ZWwpew0KICAgIEludGVyY2VwdG9yLnJlcGxhY2UocHRyKDB4MDgzNjBiZGUpLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKGNoYXJhY0FkdmFuY2VBbHRhck1hbmFnZXIpIHsNCiAgICAgICAgdmFyIHJlczsNCiAgICAgICAgdmFyIHJlZkxpc3QgPSBNZW1vcnkuYWxsb2MoMTIpOw0KICAgICAgICBzdFNwUGVyTGV2ZWxUYWJsZShyZWZMaXN0KTsNCiAgICAgICAgdmFyIG1zZyA9IE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoIkV0Yy9zcFRhYmxlLmV0YyIpOw0KICAgICAgICBpZihJbXBvcnRTcFBlckxldmVsUmVmZXJlbmNlVGFibGUobXNnLHJlZkxpc3QpIT0wKXsNCiAgICAgICAgICAgIHJlcyA9IDA7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD1tYXhMZXZlbDsgaSsrKSB7DQogICAgICAgICAgICAgICAgY2hhcmFjQWR2YW5jZUFsdGFyTWFuYWdlci5hZGQoKGkrMTM5ODgpKjQpLndyaXRlVUludCgwKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZvciAodmFyIGk9MDtpPD1tYXhMZXZlbDtpKyspew0KICAgICAgICAgICAgICAgIHZhciByZWFkVmFsID0gdmVjdG9yX3Vuc2lnbmVkX2ludF9vcGVyYXRvcihyZWZMaXN0LGkpLnJlYWRVSW50KCk7DQogICAgICAgICAgICAgICAgY2hhcmFjQWR2YW5jZUFsdGFyTWFuYWdlci5hZGQoKGkrMTM5ODgpKjQpLndyaXRlVUludChyZWFkVmFsKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmVzID0gMTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gcmVzOw0KICAgIH0sICdpbnQnLCBbJ3BvaW50ZXInXSkpOw0KfQ0KDQovKioNCiAqIOajgOafpeetiee6p+WNh+e6pw0KICogZmxhZyAwIOe7j+mqjOS5puWNh+e6pyAgMSDmnYDmgKrljYfnuqcgMiDpgJrlhbMgIDEzIOS7u+WKoQ0KICogcmV0dXJuICDljYfnuqcxIOS4jeWNh+e6pzANCiAqLw0KZnVuY3Rpb24gY2hlY2tMZXZlbFVwKG1heExldmVsKXsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKHB0cigweDA4NjYyYWVhKSwgbmV3IE5hdGl2ZUNhbGxiYWNrKGZ1bmN0aW9uIChzdE5vdGlmeUluZ2FtZUFESW5mbyxhZGRFeHAsYXJnc0EsYXJnc0IsZmxhZykgew0KICAgICAgICB2YXIgYXJnczIgPSBwdHIoYXJnc0EpOw0KICAgICAgICB2YXIgYXJnczMgPSBwdHIoYXJnc0IpOw0KICAgICAgICB2YXIgdmxvZyA9IE1lbW9yeS5hbGxvYygxNik7DQogICAgICAgIHZhciB2bG9nMiA9IE1lbW9yeS5hbGxvYygxNik7DQogICAgICAgIHZhciB2bG9nMyA9IE1lbW9yeS5hbGxvYygxNik7DQogICAgICAgIHZhciB2bG9nNCA9IE1lbW9yeS5hbGxvYygxNik7DQogICAgICAgIHZhciB2NDEgPSBNZW1vcnkuYWxsb2MoMTApOw0KICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tMZXZlbFVwIGFyZ3M6JysgIHN0Tm90aWZ5SW5nYW1lQURJbmZvKycsJythZGRFeHArJywnK2FyZ3NBKycsJythcmdzQisnLCcrZmxhZykNCiAgICAgICAgdmFyIG5leHRMZXZlbCA9IENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSsxOw0KICAgICAgICB2YXIgcmVzVmFsID0gMDsNCiAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1Ioc3ROb3RpZnlJbmdhbWVBREluZm8pIT0wKXsNCiAgICAgICAgICAgIGlmKENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSA+IDApew0KICAgICAgICAgICAgICAgIHdoaWxlICggYWRkRXhwID4wICYmIG5leHRMZXZlbCA8PSBtYXhMZXZlbCApew0KICAgICAgICAgICAgICAgICAgICB2YXIgbm93TGV2ZWxFeHAgPSBDRGF0YU1hbmFnZXJfZ2V0X2xldmVsX2V4cChHX0NEYXRhTWFuYWdlcigpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBuZXh0TGV2ZWxFeHAgPSBDRGF0YU1hbmFnZXJfZ2V0X2xldmVsX2V4cChHX0NEYXRhTWFuYWdlcigpLG5leHRMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBjaGFyYWNFeHAgPSBDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19leHAoc3ROb3RpZnlJbmdhbWVBREluZm8pOw0KICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygidXNlciBub3dMZXZlbCBuZXh0TGV2ZWwgbm93RXhwIG5vd0xldmVsRXhwIG5leHRMZXZlbEV4cCA6IiArIENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHN0Tm90aWZ5SW5nYW1lQURJbmZvKQ0KICAgICAgICAgICAgICAgICAgICAvLyAgICAgKycsJytuZXh0TGV2ZWwrJywnK2NoYXJhY0V4cCsnLCcrbm93TGV2ZWxFeHArJywnK25leHRMZXZlbEV4cCk7DQogICAgICAgICAgICAgICAgICAgIC8vIOmZjee6p+aIluWNh+e6pw0KICAgICAgICAgICAgICAgICAgICBpZihjaGFyYWNFeHA8bm93TGV2ZWxFeHAgfHwgY2hhcmFjRXhwPm5leHRMZXZlbEV4cCl7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyDlkozlvZPliY3nu4/pqozkuI3ljLnphY0g5LuO5paw6K6+572u57uP6aqMDQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcmNOYW1lID0gJyc7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcmNOYW1lVmFsID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05hbWUoc3ROb3RpZnlJbmdhbWVBREluZm8pOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWNoYXJjTmFtZVZhbC5pc051bGwoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyY05hbWUgPSAgY2hhcmNOYW1lVmFsLnJlYWRVdGY4U3RyaW5nKC0xKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGNNeVRyYWNlX2NNeVRyYWNlKHZsb2czLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoImJvb2wgQ1VzZXI6Ol9jaGVja19sZXZlbF91cChpbnQsIGludCYsIGludCYsIGVFeHBBZGRSZWFzb24sIGludCkiKSwxNjQ0Myw1KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNNeVRyYWNlX29wZXJhdG9yKHZsb2czLnRvSW50MzIoKSxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCIlcyBpcyBMZXZlbCglZCkgYW5kIEV4cCglZCkgSW5jb25zaXN0ZW5jeShib3R0b20oJWQpLCB0b3AoJWQpKSIpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoY2hhcmNOYW1lKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyDov5nlupTor6XlsLHmmK/kuLrku4DkuYjlh7rnjrDljYfnuqflkI7nu4/pqoznmb7liIbmr5TkuLowDQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlckNoYXJhY0luZm9fc2V0Q3VyQ2hhcmFjRXhwKHN0Tm90aWZ5SW5nYW1lQURJbmZvLG5vd0xldmVsRXhwKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiggbmV4dExldmVsRXhwLSBub3dMZXZlbEV4cCA8PTApew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8g5ruh57qn5LqGIOS4i+S4quetiee6p+aciemXrumimA0KICAgICAgICAgICAgICAgICAgICAgICAgY015VHJhY2VfY015VHJhY2UodmxvZzQsTWVtb3J5LmFsbG9jVXRmOFN0cmluZygiYm9vbCBDVXNlcjo6X2NoZWNrX2xldmVsX3VwKGludCwgaW50JiwgaW50JiwgZUV4cEFkZFJlYXNvbiwgaW50KSIpLDE2NDU0LDUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY015VHJhY2Vfb3BlcmF0b3IodmxvZzQudG9JbnQzMigpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoIkNVc2VyOjpfY2hlY2tfbGV2ZWxfdXAsIExFVkVMOiVkIFRPUDolZCBCT1RUT006JWQiKSxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKG5leHRMZXZlbCsnJykpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjRXhwID0gQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfZXhwKHN0Tm90aWZ5SW5nYW1lQURJbmZvKTsNCiAgICAgICAgICAgICAgICAgICAgLy8g57uP6aqM5YC85Yik5patDQogICAgICAgICAgICAgICAgICAgIGlmKCBOdW1iZXIoYWRkRXhwK2NoYXJhY0V4cCkgPCBuZXh0TGV2ZWxFeHAgKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIENVc2VyQ2hhcmFjSW5mb19hZGRDdXJDaGFyYWNFeHAoc3ROb3RpZnlJbmdhbWVBREluZm8sIGFkZEV4cCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihmbGFnICE9IDApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYWRlcyA9IENVc2VyX2dldEhhZGVzKHN0Tm90aWZ5SW5nYW1lQURJbmZvKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYTnVjbGVhcl9DSGFkZXNfRXhwVXAoaGFkZXMsYWRkRXhwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV4cCA9IDA7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Y2H57qn5LqGDQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdjE0ID0gYXJnczIucmVhZFUxNigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8g6I635Y+W562J57qn5o+Q5Y2H55qEIHNw54K5DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BBdExldmVsVXAgPSBDRGF0YU1hbmFnZXJfR2V0U3BBdExldmVsVXAoR19DRGF0YU1hbmFnZXIoKSxuZXh0TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u5b2T5YmN562J57qn55qEc3DngrkNCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MyLndyaXRlVTE2KHYxNCtzcEF0TGV2ZWxVcCk7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpznrYnnuqflnKg0Oee6p+S7peS4ig0KICAgICAgICAgICAgICAgICAgICAgICAgaWYobmV4dExldmVsPjQ5KXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzMyA9IGFyZ3MzLmFkZCg0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaWZmRXhwICA9IG5leHRMZXZlbEV4cCAtIENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2V4cChzdE5vdGlmeUluZ2FtZUFESW5mbyk7DQogICAgICAgICAgICAgICAgICAgICAgICArK25leHRMZXZlbDsNCiAgICAgICAgICAgICAgICAgICAgICAgIENVc2VyQ2hhcmFjSW5mb19pbmNDdXJDaGFyYWNMZXZlbChzdE5vdGlmeUluZ2FtZUFESW5mbyk7DQogICAgICAgICAgICAgICAgICAgICAgICBhZGRFeHAgPSBhZGRFeHAgKyAoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfZXhwKHN0Tm90aWZ5SW5nYW1lQURJbmZvKS1uZXh0TGV2ZWxFeHApOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwoc3ROb3RpZnlJbmdhbWVBREluZm8pID45ICYmIENVc2VyX0dldFR1dG9yaWFsU2tpcGFibGUoc3ROb3RpZnlJbmdhbWVBREluZm8pIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9VcGRhdGVUdXRvcmlhbFNraXBhYmxlKHN0Tm90aWZ5SW5nYW1lQURJbmZvKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIENVc2VyQ2hhcmFjSW5mb19zZXRDdXJDaGFyYWNFeHAoc3ROb3RpZnlJbmdhbWVBREluZm8sbmV4dExldmVsRXhwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIENVc2VyX3VwZGF0ZV9jaGFyYWNfc3RhdChzdE5vdGlmeUluZ2FtZUFESW5mbywxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc1ZhbCA9IDE7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyB0b2RvIOiusOW9leaXpeW/lyAg5paH5Lu25oyH6ZKIIOWFs+azqOaYr+WQpuWPr+S7peato+W4uA0KICAgICAgICAgICAgICAgICAgICAgICAgSGlzdG9yeUxvZ19Xcml0ZUxldmVsVXAoc3ROb3RpZnlJbmdhbWVBREluZm8uYWRkKDQqMTI0MzUwKSxwdHIoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfZXhwKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdvbGRCb251cyA9ICBXb25nV29ya19DVXNlclByZW1pdW1fR2V0R29sZEJvbnVzKHN0Tm90aWZ5SW5nYW1lQURJbmZvLmFkZCg0NjMzODgpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihnb2xkQm9udXMhPTApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBDdXJDaGFyYWNJbnZlblcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5XKHN0Tm90aWZ5SW5nYW1lQURJbmZvKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDSW52ZW50b3J5X2dhaW5fbW9uZXkoQ3VyQ2hhcmFjSW52ZW5XLGdvbGRCb251cywxMywxLDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdChzdE5vdGlmeUluZ2FtZUFESW5mbywxLDAsMCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNJbnZlbnRvcnlfZ2Fpbl9tb25leSBpcyBzdWNjZXNzISEhIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBXb25nV29ya19DVXNlclByZW1pdW1fUmVjYWxjQWRkaXRpb25hbEluZm8oc3ROb3RpZnlJbmdhbWVBREluZm8uYWRkKDQ2MzM4OCksc3ROb3RpZnlJbmdhbWVBREluZm8pOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmxhZyAhPSAwKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFkZXMgPSBDVXNlcl9nZXRIYWRlcyhzdE5vdGlmeUluZ2FtZUFESW5mbyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgWE51Y2xlYXJfQ0hhZGVzX0V4cFVwKGhhZGVzLGRpZmZFeHApOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY1VzZXJIaXN0b3J5TG9nX0xldmVsVXAoc3ROb3RpZnlJbmdhbWVBREluZm8uYWRkKDQ5NzQwOCksQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwoc3ROb3RpZnlJbmdhbWVBREluZm8pLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbChzdE5vdGlmeUluZ2FtZUFESW5mbykgPiA1OSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyA2MOe6pyAg5byC55WMICAgIOi/mOacieWkqeeVjD8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9EaW1lbnNpb25Jbm91dFVwZGF0ZShzdE5vdGlmeUluZ2FtZUFESW5mbywxLDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwoc3ROb3RpZnlJbmdhbWVBREluZm8pID09IG1heExldmVsKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihXb25nV29ya19DR01BY2NvdW50c19pc0dNKHB0cihwdHIoMHgwOTQxRjcxMCkucmVhZFUzMigpKSxDVXNlcl9nZXRfYWNjX2lkKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSkhPTApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYWNrZXRfTW9uaXRvcl9NYXhfTGV2ZWxfQnJvYWRDYXN0X1BhY2tldF9Nb25pdG9yX01heF9MZXZlbF9Ccm9hZENhc3QodjQxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZlclByb3h5ID0gQ1NlcnZlclByb3h5TWdyX0NNb25pdG9yU2VydmVyUHJveHlfR2V0U2VydmVyUHJveHkocHRyKHB0cigweDA5NDBCRTI4KS5yZWFkVTMyKCkpLENVc2VyX0dldFNlcnZlckdyb3VwKHN0Tm90aWZ5SW5nYW1lQURJbmZvKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENNb25pdG9yU2VydmVyUHJveHlfU2VuZFBhY2tldChzZXJ2ZXJQcm94eSx2NDEsNDApOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwoc3ROb3RpZnlJbmdhbWVBREluZm8pID09IEdhbWVXb3JsZF9nZXREdW5nZW9uTWluaW11bVJlcXVpcmVkTGV2ZWwoR19HYW1lV29ybGQoKSwyNTUpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihTZXJ2ZXJQYXJhbWV0ZXJTY3JpcHRfaXNEdW5nZW9uT3BlbigpIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2FtZVdvcmxkX3NlbmRfdXNlcl9kdW5nZW9uX2lub3V0X21lc3NhZ2UoR19HYW1lV29ybGQoKSxzdE5vdGlmeUluZ2FtZUFESW5mbywxMTAwNywxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2FtZVdvcmxkX3NlbmRfdXNlcl9kdW5nZW9uX2lub3V0X21lc3NhZ2UoR19HYW1lV29ybGQoKSxzdE5vdGlmeUluZ2FtZUFESW5mbywxMTAwNywwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9tYWtlR3VpbGRMZXZlbFVwTWVzc2FnZShzdE5vdGlmeUluZ2FtZUFESW5mbyxDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbChzdE5vdGlmeUluZ2FtZUFESW5mbykpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VzZXIgbGV2ZWwgc3VjY2VzcycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Yiw6L+Z6YeM5bey57uP5Y2H57qn5a6M5oiQ5LqGICDmiafooYzljYfnuqfkuovku7YNCiAgICAgICAgICAgICAgICAgICAgICAgIENVc2VyX29uTGV2ZWxVcChzdE5vdGlmeUluZ2FtZUFESW5mbyk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9DVXNlcl9TZW5kTm90aVBhY2tldChzdE5vdGlmeUluZ2FtZUFESW5mbywxLDM3LDApOw0KICAgICAgICAgICAgICAgIHJldHVybiByZXNWYWw7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBjTXlUcmFjZV9jTXlUcmFjZSh2bG9nMixNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCJib29sIENVc2VyOjpfY2hlY2tfbGV2ZWxfdXAoaW50LCBpbnQmLCBpbnQmLCBlRXhwQWRkUmVhc29uLCBpbnQpIiksMTY0MTgsNSk7DQogICAgICAgICAgICAgICAgY015VHJhY2Vfb3BlcmF0b3IodmxvZzIudG9JbnQzMigpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoIkNVc2VyOjpfY2hlY2tfbGV2ZWxfdXAgbV9zZWxlY3RlZC0+bV9sZXZlbCBpcyAwIiksJ1UwMDAwJyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgY015VHJhY2VfY015VHJhY2UodmxvZyxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCJib29sIENVc2VyOjpfY2hlY2tfbGV2ZWxfdXAoaW50LCBpbnQmLCBpbnQmLCBlRXhwQWRkUmVhc29uLCBpbnQpIiksMTY0MTEsNSk7DQogICAgICAgICAgICBjTXlUcmFjZV9vcGVyYXRvcih2bG9nLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoIkNVc2VyOjpfY2hlY2tfbGV2ZWxfdXAgbV9zZWxlY3RlZCBpcyBOVUxMIiksJ1UwMDAwJyk7DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgIH0sICdpbnQnLCBbJ3BvaW50ZXInLCdpbnQnLCdpbnQnLCdpbnQnLCdpbnQnXSkpOw0KfQ0KDQovKioNCiAqIOiOt+W+l+e7j+mqjOWSjHNw54K5DQogKiBhNiDmgKrnialpZCAgYTMgc3DngrkNCiAqIEBwYXJhbSBtYXhMZXZlbA0KICovDQpmdW5jdGlvbiBnYWluRXhwU3AobWF4TGV2ZWwpew0KICAgIEludGVyY2VwdG9yLnJlcGxhY2UocHRyKDB4MDg2NmEzZmUpLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKHVzZXJJbmZvLGFkZEV4cCxhMyxhNCxzb3VyY2VUeXBlLGE2LGE3KSB7DQogICAgICAgIC8vIGNvbnNvbGUubG9nKCdnYWluRXhwU3AgYXJnczonK3VzZXJJbmZvKycsJythZGRFeHArJywnK2EzKycsJythNCsnLCcrc291cmNlVHlwZSsnLCcrYTYrJywnK2E3KQ0KICAgICAgICB2YXIgb25tZW50ID0gR19DRW52aXJvbm1lbnQoKS5hZGQoNDI0KjQpLnJlYWRVMTYoKTsNCiAgICAgICAgaWYob25tZW50ID09IDIgJiYgQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwodXNlckluZm8pID4gNDkpew0KICAgICAgICAgICAgYWRkRXhwID0gMDsNCiAgICAgICAgfQ0KICAgICAgICBpZiggKGFkZEV4cCAmIDB4ODAwMDAwMDApICE9MCApew0KICAgICAgICAgICAgYWRkRXhwID0gMDsNCiAgICAgICAgfQ0KICAgICAgICB2YXIgYWRkVmFsVGVtcCA9IHVzZXJJbmZvLmFkZCgxNDU0MzQqNCk7DQogICAgICAgIGlmKHNvdXJjZVR5cGU9PTEgfHwgc291cmNlVHlwZT09Mil7DQogICAgICAgICAgICB2YXIgYWRkVmFsID0gYWRkVmFsVGVtcC5yZWFkVTE2KCk7DQogICAgICAgICAgICB1c2VySW5mby5hZGQoMTQ1NDM0KjQpLndyaXRlVTE2KGFkZFZhbCthZGRFeHApOw0KICAgICAgICB9DQogICAgICAgIHZhciBhZGRWYWwgPSBhZGRWYWxUZW1wLnJlYWRVMTYoKTsNCiAgICAgICAgdXNlckluZm8uYWRkKDE0NTQzMSo0KS53cml0ZVUxNihhZGRWYWwrYWRkRXhwKTsNCiAgICAgICAgQ1VzZXJfaW5jUGxheUV4cEFkZCh1c2VySW5mbyxhZGRFeHApOw0KICAgICAgICB2YXIgdXBMZXZlbFRhZyA9IDA7DQogICAgICAgIGlmKENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHVzZXJJbmZvKSA8PSBtYXhMZXZlbC0xKXsNCiAgICAgICAgICAgIHVwTGV2ZWxUYWcgPSBDVXNlcl9jaGVja19sZXZlbF91cCh1c2VySW5mbywgYWRkRXhwLCBhMyxhNCxzb3VyY2VUeXBlKTsNCiAgICAgICAgICAgIHZhciBjdXJDaGFyYWNTa2lsbFIgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxSKHVzZXJJbmZvKTsNCiAgICAgICAgICAgIHZhciByZWFtaW5TcEF0SW5kZXggPSBTa2lsbFNsb3RfZ2V0X3JlbWFpbl9zcF9hdF9pbmRleChjdXJDaGFyYWNTa2lsbFIsTWVtb3J5LmFsbG9jVXRmOFN0cmluZygnMCcpKTsNCiAgICAgICAgICAgIHZhciBhM1ZhbCA9IHB0cihhMykucmVhZFVJbnQoKTsNCiAgICAgICAgICAgIENVc2VyX2dhaW5fc3AodXNlckluZm8sYTNWYWwpOw0KICAgICAgICAgICAgQ1VzZXJfaGlzdG9yeV9sb2dfc3AodXNlckluZm8scmVhbWluU3BBdEluZGV4LGEzLDApOw0KICAgICAgICAgICAgY3VyQ2hhcmFjU2tpbGxSID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1NraWxsUih1c2VySW5mbyk7DQogICAgICAgICAgICB2YXIgcmVhbWluU3RwQXRJbmRleCA9IFNraWxsU2xvdF9nZXRfcmVtYWluX3NmcF9hdF9pbmRleChjdXJDaGFyYWNTa2lsbFIsTWVtb3J5LmFsbG9jVXRmOFN0cmluZygnMicpKTsNCiAgICAgICAgICAgIHZhciBhNFZhbCA9IHB0cihhNCkucmVhZFVJbnQoKTsNCiAgICAgICAgICAgIENVc2VyX2dhaW5fc2ZwKHVzZXJJbmZvLGE0VmFsKTsNCiAgICAgICAgICAgIENVc2VyX2hpc3RvcnlfbG9nX3NmcCh1c2VySW5mbyxyZWFtaW5TdHBBdEluZGV4LGE0LDApOw0KICAgICAgICB9DQogICAgICAgIHZhciB2MzMgPSBNZW1vcnkuYWxsb2MoMTIpOw0KICAgICAgICBQYWNrZXRHdWFyZF9QYWNrZXRHdWFyZCh2MzMpOw0KICAgICAgICAvLyDorr7nva7op5LoibLlj6/pl6/liLDnrYnnuqcNCiAgICAgICAgaWYodXBMZXZlbFRhZz09MSl7DQogICAgICAgICAgICBDVXNlcl9DYWxjdXJhdGVVc2VyTWF4TGV2ZWwodXNlckluZm8pOw0KICAgICAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY01heEVxdWlwTGV2ZWwodXNlckluZm8pICE9MCl7DQogICAgICAgICAgICAgICAgdmFyIHVzZXJDdXJMZXZlbCA9IENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHVzZXJJbmZvKTsNCiAgICAgICAgICAgICAgICBpZih1c2VyQ3VyTGV2ZWwgPT0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY01heEVxdWlwTGV2ZWwodXNlckluZm8pKXsNCiAgICAgICAgICAgICAgICAgICAgQ1VzZXJDaGFyYWNJbmZvX1NldEN1ckNoYXJhY01heEVxdWlwTGV2ZWwodXNlckluZm8sMCk7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDVXNlckNoYXJhY0luZm9fU2V0Q3VyQ2hhcmFjTWF4RXF1aXBMZXZlbCBpcyAwJyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdmFyIGN1ckNoYXJhY1F1ZXN0VyA9IENVc2VyX2dldEN1ckNoYXJhY1F1ZXN0Vyh1c2VySW5mbyk7DQogICAgICAgICAgICBVc2VyUXVlc3RfUmVzZXRVcmdlbnRRdWVzdFdhaXRpbmdMaXN0KGN1ckNoYXJhY1F1ZXN0Vyk7DQogICAgICAgICAgICB2YXIgY3VyQ2hhcmFjUXVlc3RSID1DVXNlcl9nZXRDdXJDaGFyYWNRdWVzdFIodXNlckluZm8pOw0KICAgICAgICAgICAgVXNlclF1ZXN0X2dldF9xdWVzdF9pbmZvKGN1ckNoYXJhY1F1ZXN0Uix2MzMpOw0KICAgICAgICAgICAgQ0NoYXJhY3RlclZpZXdfZW5hYmxlU2F2ZUNoYXJhY1ZpZXcodXNlckluZm8uYWRkKDQ5NzM5NikpOw0KICAgICAgICAgICAgQ1VzZXJfU2VuZCh1c2VySW5mbyx2MzMpOw0KICAgICAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwodXNlckluZm8pID09IG1heExldmVsKXsNCiAgICAgICAgICAgICAgICBDVXNlckNoYXJhY0luZm9fcmVzZXRDaGFyYWNGYXRpZ3VlR3Jvd25VcEJ1ZmYodXNlckluZm8pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgQ1VzZXJfVXBkYXRlVXNlckluZm80R3VpbGQodXNlckluZm8pOw0KICAgICAgICAgICAgdmFyIGN1ckNoYXJhR3Jvd1R5cGUgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjR3Jvd1R5cGUodXNlckluZm8pOw0KICAgICAgICAgICAgdmFyIGN1ckNoYXJhTGV2ZWwgPSBDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbCh1c2VySW5mbyk7DQogICAgICAgICAgICB2YXIgY2hhcmFjTm8gPSBDVXNlcl9nZXRfY2hhcmFjX25vKHVzZXJJbmZvLC0xKTsNCiAgICAgICAgICAgIHZhciBhY2NJZCA9IENVc2VyX2dldF9hY2NfaWQodXNlckluZm8pOw0KICAgICAgICAgICAgdmFyIHNlcnZlckdyb3VwID0gQ1VzZXJfR2V0U2VydmVyR3JvdXAodXNlckluZm8pOw0KICAgICAgICAgICAgdmFyIHNlcnZlclByb3h5ID0gQ1NlcnZlclByb3h5TWdyX0NHdWlsZFNlcnZlclByb3h5X0dldFNlcnZlclByb3h5KHB0cihwdHIoMHgwOTQwQkUyQykucmVhZFUzMigpKSxzZXJ2ZXJHcm91cCk7DQogICAgICAgICAgICBDR3VpbGRTZXJ2ZXJQcm94eV9TZW5kQ2hhckxldmVsR3Jvd1R5cGUoc2VydmVyUHJveHksYWNjSWQsY2hhcmFjTm8sY3VyQ2hhcmFMZXZlbCxjdXJDaGFyYUdyb3dUeXBlKTsNCiAgICAgICAgICAgIHNlcnZlclByb3h5ID0gQ1NlcnZlclByb3h5TWdyX0NNb25pdG9yU2VydmVyUHJveHlfR2V0U2VydmVyUHJveHkocHRyKHB0cigweDA5NDBCRTI4KS5yZWFkVTMyKCkpLHNlcnZlckdyb3VwKTsNCiAgICAgICAgICAgIENNb25pdG9yU2VydmVyUHJveHlfU2VuZENoYXJMZXZlbEdyb3dUeXBlKHNlcnZlclByb3h5LGFjY0lkLGNoYXJhY05vLGN1ckNoYXJhTGV2ZWwsY3VyQ2hhcmFHcm93VHlwZSk7DQogICAgICAgICAgICB2YXIgdmVyaWZ5ID0gQ1VzZXJfVmVyaWZ5UHJlc2VudEF2ZW5nZXJUaXRsZSh1c2VySW5mbyk7DQogICAgICAgICAgICBpZih2ZXJpZnkgIT0gMSl7DQogICAgICAgICAgICAgICAgdmFyIHYzNCA9IE1lbW9yeS5hbGxvYygxNik7DQogICAgICAgICAgICAgICAgdmFyIGFjY0lkID0gQ1VzZXJfZ2V0X2FjY19pZCh1c2VySW5mbyk7DQogICAgICAgICAgICAgICAgY015VHJhY2VfY015VHJhY2UodjM0LE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoImJvb2wgQ1VzZXI6OmdhaW5fZXhwX3NwKGludCwgaW50JiwgaW50JiwgZUV4cEFkZFJlYXNvbiwgaW50LCBib29sKSIpLDIwNTUwLDApOw0KICAgICAgICAgICAgICAgIGNNeVRyYWNlX29wZXJhdG9yKHYzNC50b0ludDMyKCksTWVtb3J5LmFsbG9jVXRmOFN0cmluZygiQ1VzZXI6OlZlcmlmeVByZXNlbnRBdmVuZ2VyVGl0bGUoKSBtX2lkKCVzKSwgY2hhcmFjX25vKCV1KSIpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoYWNjSWQrJycpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIENVc2VyX0FkZEN1ckNoYXJhY01lcmNlbmFyeUluZm8odXNlckluZm8pOw0KICAgICAgICB9DQogICAgICAgIHZhciByZWFkVGVtcFZhbCA9IHVzZXJJbmZvLmFkZCgxNDQzNjkqNCkucmVhZFUxNigpOw0KICAgICAgICBpZihyZWFkVGVtcFZhbD09NSB8fCByZWFkVGVtcFZhbD09OCB8fCByZWFkVGVtcFZhbD09NyB8fCByZWFkVGVtcFZhbD09MTAgfHwgcmVhZFRlbXBWYWw9PTEyICl7DQogICAgICAgICAgICBpZihhNyAhPSAxKXsNCiAgICAgICAgICAgICAgICBDVXNlcl9TZW5kTm90aVBhY2tldCh1c2VySW5mbywxLDM3LDApOw0KICAgICAgICAgICAgICAgIENVc2VyQ2hhcmFjSW5mb19zZXRfY2hhcmFjX2ZhdGlndWVfYnVmX2JvbnVzX2V4cCh1c2VySW5mbywwKTsNCiAgICAgICAgICAgIH1lbHNlIGlmKHVwTGV2ZWxUYWcgPT0xKXsNCiAgICAgICAgICAgICAgICBDVXNlcl9TZW5kTm90aVBhY2tldCh1c2VySW5mbywxLDM3LDApOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYodXBMZXZlbFRhZz09MSl7DQogICAgICAgICAgICAgICAgQ1VzZXJfZGVjaWRlX2dyb3d0aF9wb3dlcl9yZXdhcmRfc3lzdGVtKHVzZXJJbmZvKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZih1cExldmVsVGFnID09IDEpew0KICAgICAgICAgICAgdmFyIHBsYXlDb3VudCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNEdW5nZW9uUGxheUNvdW50KHVzZXJJbmZvKTsNCiAgICAgICAgICAgIHZhciBjdXJDaGFyYUxldmVsID0gQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwodXNlckluZm8pOw0KICAgICAgICAgICAgQ0xldmVsRHVuZ2VvblBsYXlTdGF0aXN0aWNfSW5jcmVhc2VMZXZlbER1bmdlb25QbGF5KHB0cihwdHIoMHgwOTQxRjc2NCkucmVhZFUzMigpKSxjdXJDaGFyYUxldmVsLHBsYXlDb3VudCk7DQogICAgICAgICAgICBDVXNlckNoYXJhY0luZm9fUmVzZXRDdXJDaGFyYWNEdW5nZW9uUGxheUNvdW50KHVzZXJJbmZvKTsNCiAgICAgICAgICAgIC8vIOWJr+iBjOS4mg0KICAgICAgICAgICAgdmFyIGV4cGVydEpvYkV4cCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNFeHBlcnRKb2JFeHAodXNlckluZm8pOw0KICAgICAgICAgICAgZXhwZXJ0X2pvYl9DRXhwZXJ0Sm9iX0luY3JlYXNlRXhwZXJ0Sm9iRXhwKHVzZXJJbmZvLHB0cihleHBlcnRKb2JFeHApKTsNCiAgICAgICAgICAgIENVc2VyX1JlQ2FsY0NoYXR0aW5nRW1vdGljb24odXNlckluZm8pOw0KICAgICAgICAgICAgQ1VzZXJfU2VuZENoYXR0aW5nRW1vdGljb24odXNlckluZm8pOw0KICAgICAgICB9DQogICAgICAgIGlmKHVwTGV2ZWxUYWcgPT0gMSl7DQogICAgICAgICAgICBpZihDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbCh1c2VySW5mbykgPT0gbWF4TGV2ZWwpew0KICAgICAgICAgICAgICAgIEFQU3lzdGVtX0NVc2VyUHJvY19DbGVhckFjdGlvbkFuZFNlbmR0b1VzZXIodXNlckluZm8sMzMsMCwwKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBDVXNlcl9TZW5kTm90aVBhY2tldCh1c2VySW5mbywxLDM3LDApOw0KICAgICAgICAvLyDph4rmlL4gdjMzOw0KICAgICAgICByZXR1cm4gdXBMZXZlbFRhZzsNCiAgICB9LCAnaW50JywgWydwb2ludGVyJywnaW50JywnaW50JywnaW50JywnaW50JywnaW50JywnaW50J10pKTsNCn0NCg0KLyoqDQogKiDop5LoibLljYfnuqflpITnkIYNCiAqIOWOn+acieeahOaWueW8j+aaguaXtuayoeacieWunueOsCDjgILjgILjgIIg5Y+q6IO95puy57q/5pWR5Zu9DQogKiBAcGFyYW0gbWF4TGV2ZWwNCiAqLw0KZnVuY3Rpb24gb25MZXZlbFVwKG1heExldmVsKXsNCiAgICBJbnRlcmNlcHRvci5yZXBsYWNlKHB0cigweDA4NjYzMTFhKSwgbmV3IE5hdGl2ZUNhbGxiYWNrKGZ1bmN0aW9uICh1c2VySW5mbykgew0KICAgICAgICB2YXIgY3VyTGV2ZWwgPSBDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbCh1c2VySW5mbyk7DQogICAgICAgIHZhciBjcmVhdGVUaW1lID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0NyZWF0ZVRpbWUodXNlckluZm8pOw0KICAgICAgICB2YXIgY3VyU2VjID0gQ1N5c3RlbVRpbWVfZ2V0Q3VyU2VjKHB0cigweDA5NDFGNzE0KSk7DQogICAgICAgIGNvbnNvbGUubG9nKCJvbkxldmVsVXAgYXJnczoiK2N1ckxldmVsKycsJytjcmVhdGVUaW1lKycsJytjdXJTZWMpOw0KICAgICAgICAvLyAyMDI0LTEyLTExIDExOjA2OjQ5DQogICAgICAgIGlmKGN1ckxldmVsPT0xNSAmJiBjcmVhdGVUaW1lPjEyMDM1NDExOTkgJiYgY3VyU2VjPD0gMTczMzg4NjQwOSl7DQogICAgICAgICAgICB2YXIgY2hhcmNOYW1lID0gJyc7DQogICAgICAgICAgICB2YXIgY2hhcmNOYW1lVmFsID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05hbWUodXNlckluZm8pOw0KICAgICAgICAgICAgaWYoIWNoYXJjTmFtZVZhbC5pc051bGwoKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjaGFyY05hbWUgPSAgY2hhcmNOYW1lVmFsLnJlYWRVdGY4U3RyaW5nKC0xKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHZhciBjaGFyY05vID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05vKHVzZXJJbmZvKTsNCiAgICAgICAgICAgIHZhciBhY2NJZCA9IENVc2VyX2dldF9hY2NfaWQodXNlckluZm8pOw0KICAgICAgICAgICAgREJfSW5zZXJ0VW5saW1pdFN1cHBvcnRMb2dfbWFrZVJlcXVlc3QoTWVtb3J5LmFsbG9jVXRmOFN0cmluZyhhY2NJZCsnJyksY2hhcmNObyxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKGNoYXJjTmFtZSkpDQogICAgICAgIH0NCiAgICAgICAgdmFyIGNoYXJjSm9iID0gQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfam9iKHVzZXJJbmZvKTsNCiAgICAgICAgdmFyIGNoYXJjTm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTm8odXNlckluZm8pOw0KICAgICAgICBDVXNlcl9wcm9jZXNzTGV2ZWxSZXdhcmQodXNlckluZm8sY3VyTGV2ZWwsY2hhcmNObyxjaGFyY0pvYik7DQogICAgICAgIHZhciBmaW5kU3RyaW5nTGVuZ3RoID0gMDsNCiAgICAgICAgdmFyIGlzQWZmZWN0ZWRQcmVtaXVtID0gQ1VzZXJfaXNBZmZlY3RlZFByZW1pdW0odXNlckluZm8udG9JbnQzMigpLDE2KTsNCiAgICAgICAgaWYoaXNBZmZlY3RlZFByZW1pdW0hPTAgJiYgQ1N5c3RlbVRpbWVfZ2V0Q3VyU2VjKHB0cigweDA5NDFGNzE0KSkgPD0gdWludDY0KDB4NDc4RTcwNTApKXsNCg0KICAgICAgICB9DQogICAgICAgIENVc2VyX3Byb2Nlc3NOUENHaWZ0T25MZXZlbFVwKHVzZXJJbmZvKTsNCiAgICAgICAgQ1VzZXJfcHJvY2Vzc0xldmVsVXBFdmVudFJld2FyZCh1c2VySW5mbywwKTsNCiAgICAgICAgQ1VzZXJfcHJvY2Vzc0xldmVsVXBFdmVudCh1c2VySW5mbyk7DQogICAgICAgIGlmKENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHVzZXJJbmZvKSA9PSBtYXhMZXZlbCl7DQoNCiAgICAgICAgfQ0KICAgICAgICBpZihDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbCh1c2VySW5mbykgPD0gbWF4TGV2ZWwpew0KICAgICAgICAgICAgY29uc29sZS5sb2coInF1ZXJ5LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS03NjE2IikNCiAgICAgICAgICAgIHZhciBpdGVtSWQgPSA3NjE2Ow0KICAgICAgICAgICAgdmFyIGl0ZW1OdW0gPSAxMDsNCiAgICAgICAgICAgIHZhciBpdGVtX3NwYWNlID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgICAgICAgICAgdmFyIGl0ZW0gPSBDRGF0YU1hbmFnZXJfZmluZF9pdGVtKEdfQ0RhdGFNYW5hZ2VyKCksNzYxNik7DQogICAgICAgICAgICBpZighaXRlbS5pc051bGwoKSl7DQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImZpbmQgaXRlbSA3NjE2Iik7DQogICAgICAgICAgICAgICAgdmFyIGl0ZW1BZGRyID0gTWVtb3J5LmFsbG9jKDExNik7DQogICAgICAgICAgICAgICAgLy8g6YCB6YKA6K+35Ye9DQogICAgICAgICAgICAgICAgSW52ZW5fSXRlbV9JbnZlbl9JdGVtKGl0ZW1BZGRyKTsNCiAgICAgICAgICAgICAgICB2YXIgaW52ZW5SZWYgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5SKHVzZXJJbmZvKTsNCiAgICAgICAgICAgICAgICAvLyAvLyBpbnZlbkRhVEEg5piv5qC85a2Q55qE5L2N572uDQogICAgICAgICAgICAgICAgdmFyIGludmVuRGF0YSA9IENJbnZlbnRvcnlfR2V0SW52ZW5EYXRhKGludmVuUmVmLDc2MTYsaXRlbUFkZHIpOw0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJpbnZlbkRhdGEgOiIraW52ZW5EYXRhKTsNCiAgICAgICAgICAgICAgICBpZihpbnZlbkRhdGEgPj0wKXsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coImludmVuIHVzZXIgaGF2ZSBpdGVtICA3NjE2Iik7DQogICAgICAgICAgICAgICAgICAgIC8vIOiDjOWMheacieWAvCDpooTorqHmmK/mlbDph48NCiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWR2YWwgPSBpdGVtQWRkci5hZGQoNykucmVhZFUxNigpOw0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVhZFZhbCA6IityZWFkdmFsKTsNCiAgICAgICAgICAgICAgICAgICAgaWYocmVhZHZhbCA8IGl0ZW1OdW0pew0KICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW5EYXRhID0gQ1VzZXJfQWRkSXRlbSh1c2VySW5mbywgaXRlbUlkLCBpdGVtTnVtLXJlYWR2YWwsIDYsIGl0ZW1fc3BhY2UsIDApOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGludmVuRGF0YSA9IENVc2VyX0FkZEl0ZW0odXNlckluZm8sIGl0ZW1JZCwgaXRlbU51bSwgNiwgaXRlbV9zcGFjZSwgMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKGludmVuRGF0YSA+PTAgKXsNCiAgICAgICAgICAgICAgICAgICAgLy/pgJrnn6XlrqLmiLfnq6/mnInmuLjmiI/pgZPlhbfmm7TmlrANCiAgICAgICAgICAgICAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHVzZXJJbmZvLCAxLCBpdGVtX3NwYWNlLnJlYWRJbnQoKSwgaW52ZW5EYXRhKTsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coInNlbmQgc3VjY2VzcyIpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHZhciBldmVudF9zY3JpcHRfbW5nID0gQ0RhdGFNYW5hZ2VyX2dldF9ldmVudF9zY3JpcHRfbW5nKEdfQ0RhdGFNYW5hZ2VyKCkpOw0KICAgICAgICBFdmVudENsYXNzaWZ5X0NFdmVudFNjcmlwdE1uZ19wcm9jZXNzX2xldmVsX3VwX3Jld2FyZChldmVudF9zY3JpcHRfbW5nLHVzZXJJbmZvLDApOw0KICAgIH0sICd2b2lkJywgWydwb2ludGVyJ10pKTsNCn0NCg0KLyoqDQogKiDnianlk4Hkvb/nlKjnirbmgIEgIDEyMDUJ6IOM5Yi66JyY6JubDQogKi8NCmZ1bmN0aW9uIGluY3JlYXNlU3RhdHVzKG1heExldmVsKXsNCg0KICAgIEludGVyY2VwdG9yLnJlcGxhY2UocHRyKDB4MDg2NjU3ZmMpLCBuZXcgTmF0aXZlQ2FsbGJhY2soZnVuY3Rpb24gKHVzZXIsIHNsb2YpIHsNCiAgICAgICAgY29uc29sZS5sb2coImluY3JlYXNlU3RhdHVzOiIrdXNlcisnLCcrc2xvZik7DQogICAgICAgIHZhciBidWZmID0gIE1lbW9yeS5hbGxvYygxMik7DQogICAgICAgIFBhY2tldEd1YXJkX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICBjb25zb2xlLmxvZygnQ1VzZXJfQ2hlY2tJblRyYWRlKHVzZXIpOicrQ1VzZXJfQ2hlY2tJblRyYWRlKHVzZXIpKQ0KICAgICAgICBpZihDVXNlcl9DaGVja0luVHJhZGUodXNlcikhPTApew0KICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsIDMyLCAxOSwgYnVmZik7DQogICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHZhciB1c2VySXRlbSA9ICBNZW1vcnkuYWxsb2MoMTI4KTsNCiAgICAgICAgdmFyIGN1ckNoYXJhY0ludmVuUmVmID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ludmVuUih1c2VyKTsNCiAgICAgICAgQ0ludmVudG9yeV9HZXRJbnZlblNsb3QodXNlckl0ZW0sY3VyQ2hhcmFjSW52ZW5SZWYudG9JbnQzMigpLDEscGFyc2VJbnQoc2xvZikpOw0KICAgICAgICB2YXIgaXRlbUlkID0gdXNlckl0ZW0uYWRkKDIpLnJlYWRVMzIoKTsNCiAgICAgICAgLy8g5qCH5b+X57G75Z6LDQogICAgICAgIHZhciB2MTg0ID0gLTE7DQogICAgICAgIC8vIOimgeWKoOeahOWAvA0KICAgICAgICB2YXIgZ3VpbGRFeHBCb29rID0gMDsNCg0KICAgICAgICBpZihpdGVtSWQgPT0gMTIwNSl7DQogICAgICAgICAgICB2MTg0ID0gMTc7DQogICAgICAgICAgICBndWlsZEV4cEJvb2sgPSA1Ow0KICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmKGl0ZW1JZCA8PSAxMjA1KXsNCiAgICAgICAgICAgIGlmKGl0ZW1JZCA9PSAxMDM2KXsNCiAgICAgICAgICAgICAgICB2MTg0ID0gMTsNCiAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxMDAwMDsNCiAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYoaXRlbUlkIDw9IDEwMzYpew0KICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCE9IDIwMSl7DQogICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA+IDIwMSl7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQgPT0gOTYzKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTI1KHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkID4gOTYzKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQgPT0gMTAzNCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYxODQgPSAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxMDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQ+MTAzNCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYxODQgPSAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxMDAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkID09IDEwMzEpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gNTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQ9PTkxNiB8fCBpdGVtSWQ9PTk2MCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ290bzEyNSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQhPTQyKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZDw9NDIpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCE9MyAmJiBpdGVtSWQhPTI4KXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE3OCh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xMjUodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQ9PTEwOSB8fCBpdGVtSWQ+PTEwOSAmJiBpdGVtSWQtMTYxPD0xKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTI1KHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE3OCh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHYxODQgPSAyMTsNCiAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTsNCiAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHZhciByZXBlYXRFdmVudCA9IENFdmVudE1hbmFnZXJfR2V0UmVwZWF0RXZlbnQocHRyKHB0cigweDA5NDFGNzMwKS5yZWFkVTMyKCkpLDE1KTsNCiAgICAgICAgICAgICAgICB2YXIgdGVtcE1ldGhvZCA9ICBuZXcgTmF0aXZlRnVuY3Rpb24ocmVwZWF0RXZlbnQuYWRkKDUyKjQpLCAnaW50JywgWydwb2ludGVyJywnaW50J10sIHsiYWJpIjoic3lzdiJ9KTsNCiAgICAgICAgICAgICAgICBpZihyZXBlYXRFdmVudCE9MCAmJiB0ZW1wTWV0aG9kKHJlcGVhdEV2ZW50LDApIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyKGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2hlYWRlcihidWZmLDEsMzIpOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiwwKTsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsMTkpOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfZmluYWxpemUoYnVmZiwxKTsNCiAgICAgICAgICAgICAgICAgICAgQ1VzZXJfU2VuZCh1c2VyLGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKENVc2VyX2dldEN1ckNoYXJhY1RvdGFsRmF0aWd1ZSh1c2VyKSE9MCl7DQogICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9jbGVhcihidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwxLDMyKTsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsMCk7DQogICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLDY3KTsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKGJ1ZmYsMSk7DQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmQodXNlcixidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB2MTg0ID0gMTQ7DQogICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMDsNCiAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYoaXRlbUlkID09IDEwNDMpew0KICAgICAgICAgICAgICAgIHYxODQgPSAyOw0KICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDI1MDsNCiAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYoaXRlbUlkIDw9IDEwNDMpew0KICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA9PSAxMDM5KXsNCiAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDQ7DQogICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDUwOw0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKGl0ZW1JZCA+IDEwMzkpew0KICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQgPT0gMTA0MSl7DQogICAgICAgICAgICAgICAgICAgICAgICB2MTg0ID0gNTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDUwOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA+IDEwNDEpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYxODQgPSA3Ow0KICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDY7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSA1MDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKGl0ZW1JZCA9PSAxMDM3KXsNCiAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDE7DQogICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDEwMDAwMDsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDA7DQogICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9MjA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihpdGVtSWQgPT0gMTA0Nil7DQogICAgICAgICAgICAgICAgLy8g5oqX5oCn5LmL55+zDQogICAgICAgICAgICAgICAgdjE4NCA9IDk7DQogICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTA7DQogICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmKGl0ZW1JZCA8PSAxMDQ2KXsNCiAgICAgICAgICAgICAgICAvLyB0b2RvIOmtlOWKm+S5i+efsw0KICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA9PSAxMDQ0KXsNCiAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDM7DQogICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDI1MDsNCiAgICAgICAgICAgICAgICB9ZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHYxODQgPSA4Ow0KICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxMDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmKGl0ZW1JZCA8IDEyMDApew0KICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihpdGVtSWQgPiAxMjAyKXsNCiAgICAgICAgICAgICAgICBpZihpdGVtSWQgPT0gMTIwNCl7DQogICAgICAgICAgICAgICAgICAgIHYxODQgPSAxNzsNCiAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTsNCiAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBnb3RvMTcxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYoaXRlbUlkIDw9IDgyNjgpew0KICAgICAgICAgICAgaWYoaXRlbUlkIDwgODI2Nyl7DQogICAgICAgICAgICAgICAgaWYoaXRlbUlkID09IDcxMDEpew0KICAgICAgICAgICAgICAgICAgICBpZihDVXNlcl9nZXRfc3RhdGUodXNlcikhPTMpew0KICAgICAgICAgICAgICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsMTksYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHYxODQgPSAxMzsNCiAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gODsNCiAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA8PSA3MTAxKXsNCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkPT0xMjMyKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHYxODQgPSAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTAwMDAwMDA7DQogICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkIDw9IDEyMzIpew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkIT0xMjA2KXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtSWQ9PTEyMzEpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTAwMDAwMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTI1KHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkID09IDEyNTMpew0KICAgICAgICAgICAgICAgICAgICAgICAgZ290bzEyNSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCAhPTMyMDQpew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkPT0xMjQ3KXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMTk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZihDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19ndWlsZGtleSh1c2VyKSE9MCl7DQogICAgICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMTE7DQogICAgICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxMDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiw2NCxidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZihpdGVtSWQ9PTcxODEpew0KICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMTM7DQogICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDU7DQogICAgICAgICAgICAgICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZihpdGVtSWQgPD0gNzE4MSl7DQogICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCAhPSA3MTA1KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA9PSA3MTgwKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMTM7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE3OCh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmKENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2d1aWxka2V5KHVzZXIpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHYxODQgPSAxMTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDUwOw0KICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDY0LGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCA9PSA3OTU4KXsNCiAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDIwOw0KICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAwOw0KICAgICAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYoaXRlbUlkIT04MDQ5KXsNCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkICE9IDcyOTgpew0KICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE3OCh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmKENVc2VyX2dldF9zdGF0ZSh1c2VyKSE9Myl7DQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxOSxidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDEzOw0KICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAyOw0KICAgICAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBnb3RvOTYodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZihpdGVtSWQ9PTI2NzAwMDgpew0KICAgICAgICAgICAgdmFyIHJlcGVhdEV2ZW50ID0gQ0V2ZW50TWFuYWdlcl9HZXRSZXBlYXRFdmVudChwdHIocHRyKDB4MDk0MUY3MzApLnJlYWRVMzIoKSksMTUpOw0KICAgICAgICAgICAgdmFyIHRlbXBNZXRob2QgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHJlcGVhdEV2ZW50LmFkZCg1Mio0KSwgJ2ludCcsIFsncG9pbnRlcicsJ2ludCddLCB7ImFiaSI6InN5c3YifSk7DQogICAgICAgICAgICBpZihyZXBlYXRFdmVudCE9MCAmJiB0ZW1wTWV0aG9kKHJlcGVhdEV2ZW50LDApIT0wKXsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfY2xlYXIoYnVmZik7DQogICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwxLDMyKTsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiwwKTsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiwxOSk7DQogICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKGJ1ZmYsMSk7DQogICAgICAgICAgICAgICAgQ1VzZXJfU2VuZCh1c2VyLGJ1ZmYpOw0KICAgICAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYoQ1VzZXJfZ2V0Q3VyQ2hhcmFjVG90YWxGYXRpZ3VlKHVzZXIpIT0wKXsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfY2xlYXIoYnVmZik7DQogICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwxLDMyKTsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiwwKTsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiw2Nyk7DQogICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKGJ1ZmYsMSk7DQogICAgICAgICAgICAgICAgQ1VzZXJfU2VuZCh1c2VyLGJ1ZmYpOw0KICAgICAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdjE4NCA9IDE0Ow0KICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMDsNCiAgICAgICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZihpdGVtSWQ+MjY3MDAwOCl7DQogICAgICAgICAgICBpZihpdGVtSWQhPTEwMDAwOTE1KXsNCiAgICAgICAgICAgICAgICBpZihpdGVtSWQ8PTEwMDAwOTE1KXsNCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkPT0yNjc1MDIxKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHYxODQgPSAyMTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDE7DQogICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbUlkIT0yNjc1Mzg4KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBnb3RvOTYodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIGl0ZW1JZCA9PSA2OTAwMDAyMjAgKXsNCiAgICAgICAgICAgICAgICAgICAgZ290bzE3MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICggaXRlbUlkID09IDY5MDAwMDMwMSApDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB2MTg0ID0gMjU7DQogICAgICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IDE7DQogICAgICAgICAgICAgICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoIGl0ZW1JZCAhPSA2OTAwMDAwOTcgKXsNCiAgICAgICAgICAgICAgICAgICAgZ290bzE3OCh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdmFyIHRlbXBWMTg0VGFnID0gTWVtb3J5LmFsbG9jKDEpOw0KICAgICAgICAgICAgdGVtcFYxODRUYWcud3JpdGVVOCh2MTg0KTsNCiAgICAgICAgICAgIHZhciB0ZW1wR3VpbGRFeHBCb29rVGFnID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgICAgICAgICAgdGVtcEd1aWxkRXhwQm9va1RhZy53cml0ZVUzMihndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgaWYoQ1VzZXJfQ2FsTGV2ZWxVcEl0ZW1TdGF0ZSh1c2VyLHRlbXBWMTg0VGFnLHRlbXBHdWlsZEV4cEJvb2tUYWcsMSw2OSkhPTEpew0KICAgICAgICAgICAgICAgIHYxODQgPSB0ZW1wVjE4NFRhZy5yZWFkVTgoKTsNCiAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSB0ZW1wR3VpbGRFeHBCb29rVGFnLnJlYWRVMzIoKTsNCiAgICAgICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxOSxidWZmKTsNCiAgICAgICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHYxODQgPSB0ZW1wVjE4NFRhZy5yZWFkVTgoKTsNCiAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IHRlbXBHdWlsZEV4cEJvb2tUYWcucmVhZFUzMigpOw0KICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmKGl0ZW1JZCAhPSAyNjYwMTcxKXsNCiAgICAgICAgICAgIGlmKGl0ZW1JZDw9MjY2MDE3MSl7DQogICAgICAgICAgICAgICAgaWYoaXRlbUlkLTgyNzA+MSl7DQogICAgICAgICAgICAgICAgICAgIGdvdG8xNzgodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBnb3RvOTYodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihpdGVtSWQhPTI2NjAyMzIpew0KICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCE9MjY2MDM5Nil7DQogICAgICAgICAgICAgICAgICAgIGlmKGl0ZW1JZCE9MjY2MDE3Mil7DQogICAgICAgICAgICAgICAgICAgICAgICBnb3RvMTc4KHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYoR2FtZVdvcmxkX0lzUHZQU2tpbFRyZWVDaGFubmVsKEdfR2FtZVdvcmxkKSE9MSl7DQogICAgICAgICAgICAgICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwyMyxidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrID0gQ1NlY3VfUHJvdGVjdGlvbkZpZWxkX0NoZWNrKHB0cihwdHIoMHgwOTQxRjdDQykucmVhZFUzMigpKSx1c2VyLDQ0KTsNCiAgICAgICAgICAgICAgICAgICAgaWYoY2hlY2shPTApew0KICAgICAgICAgICAgICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsY2hlY2ssYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmKENVc2VyX2lzQWZmZWN0ZWRQcmVtaXVtKHVzZXIudG9JbnQzMigpLDMzKT09MSl7DQogICAgICAgICAgICAgICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgdjE4NCA9IDIzOw0KICAgICAgICAgICAgICAgICAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDIxNixidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBnb3RvMTI1KHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmKEdhbWVXb3JsZF9Jc1B2UFNraWxUcmVlQ2hhbm5lbChHX0dhbWVXb3JsZCgpKSE9MSl7DQogICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwyMyxidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdmFyIGNoZWNrID0gQ1NlY3VfUHJvdGVjdGlvbkZpZWxkX0NoZWNrKHB0cihwdHIoMHgwOTQxRjdDQykucmVhZFUzMigpKSx1c2VyLDQ0KTsNCiAgICAgICAgaWYoY2hlY2shPTApew0KICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsY2hlY2ssYnVmZik7DQogICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGlmKFdvbmdXb3JrX0NTa2lsbENoYW5nZXJfQ2hlY2tDb25kaXRpb24odXNlcikhPTEpew0KICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsMSxidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgZ3VpbGRFeHBCb29rID0gMDsNCiAgICAgICAgdjE4NCA9IDIyOw0KICAgICAgICBpZihpdGVtSWQgPT0gMjY2MDIzMil7DQogICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxOw0KICAgICAgICB9DQogICAgICAgIC8vIOagueaNruexu+Wei+WkhOeQhuaVsOaNriAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0sICd2b2lkJywgWydwb2ludGVyJywgJ2ludCddKSk7DQp9DQoNCmZ1bmN0aW9uIGdvdG8xNzEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKXsNCiAgICBpZihpdGVtSWQgPT0gNjkwMDAwMjIwICYmIENVc2VyX0lzR3VpbGRNYXN0ZXIodXNlcikhPTEpew0KICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwyMTksYnVmZik7DQogICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgdmFyIGd1aWxkVmFsID0gdXNlci5hZGQoNTc3NTk1KS5yZWFkVTMyKCkgKzE7DQogICAgdmFyIGd1aWxkTGV2ZWxVcFBhcmFtID0gR3VpbGRQYXJhbWV0ZXJTY3JpcHRfZ2V0R3VpbGRMZXZlbFVwUGFyYW0oR19DRGF0YU1hbmFnZXIoKS5hZGQoNDIyNTIpLGd1aWxkVmFsKTsNCiAgICB2YXIgZ3VpbGREQkluZm8gPSBDVXNlcl9HZXRHdWlsZERCSW5mbyh1c2VyKTsNCiAgICBpZihndWlsZExldmVsVXBQYXJhbSE9MCB8fCBndWlsZERCSW5mby5hZGQoNDEpLnJlYWRVMzIoKSA+PWd1aWxkTGV2ZWxVcFBhcmFtLmFkZCg0KS5yZWFkVTMyKCkpew0KICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwyMTAsYnVmZik7DQogICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgdjE4NCA9IDE2Ow0KICAgIGd1aWxkRXhwQm9vayA9IEd1aWxkUGFyYW1ldGVyU2NyaXB0X2dldEd1aWxkRXhwQm9vayhHX0NEYXRhTWFuYWdlcigpLmFkZCg0MjI1MiksaXRlbUlkKTsNCiAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQp9DQoNCmZ1bmN0aW9uIGdvdG85Nih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpew0KICAgIHZhciB0ZW1wVjE4NFRhZyA9IE1lbW9yeS5hbGxvYygxKTsNCiAgICB0ZW1wVjE4NFRhZy53cml0ZVU4KHYxODQpOw0KICAgIHZhciB0ZW1wR3VpbGRFeHBCb29rVGFnID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgIHRlbXBHdWlsZEV4cEJvb2tUYWcud3JpdGVVMzIoZ3VpbGRFeHBCb29rKTsNCiAgICBpZihDVXNlcl9DYWxMZXZlbFVwSXRlbUNoZWNrKHVzZXIsaXRlbV9pZCkhPTAgJiYgQ1VzZXJfQ2FsTGV2ZWxVcEl0ZW1TdGF0ZSh1c2VyLHRlbXBWMTg0VGFnLHRlbXBHdWlsZEV4cEJvb2tUYWcsMTksNTkpIT0xKXsNCiAgICAgICAgdjE4NCA9IHRlbXBWMTg0VGFnLnJlYWRVOCgpOw0KICAgICAgICBndWlsZEV4cEJvb2sgPSB0ZW1wR3VpbGRFeHBCb29rVGFnLnJlYWRVMzIoKTsNCiAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsMTksYnVmZik7DQogICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgdjE4NCA9IHRlbXBWMTg0VGFnLnJlYWRVOCgpOw0KICAgIGd1aWxkRXhwQm9vayA9IHRlbXBHdWlsZEV4cEJvb2tUYWcucmVhZFUzMigpOw0KICAgIGdvdG8xOTEodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YsaXRlbUlkLG1heExldmVsKTsNCn0NCg0KZnVuY3Rpb24gZ290bzEyNSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpew0KICAgIHZhciBjaGVjayA9IENTZWN1X1Byb3RlY3Rpb25GaWVsZF9DaGVjayhwdHIocHRyKDB4MDk0MUY3Q0MpLnJlYWRVMzIoKSksdXNlciw0NCk7DQogICAgaWYoY2hlY2shPTApew0KICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMixjaGVjayxidWZmKTsNCiAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCiAgICBpZihHYW1lV29ybGRfSXNQdlBTa2lsVHJlZUNoYW5uZWwoR19HYW1lV29ybGQoKSkhPTApew0KICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwyMyxidWZmKTsNCiAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCiAgICBpZihDVXNlcl9DaGVja0l0ZW1Mb2NrKHVzZXIsMSxzbG9mKSE9MCl7DQogICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDIxMyxidWZmKTsNCiAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCiAgICBpZihXb25nV29ya19DU2tpbGxDaGFuZ2VyX0NoZWNrQ29uZGl0aW9uKHVzZXIpIT0xKXsNCiAgICAgICAgdmFyIGxldmVsRXhwID0gQ0RhdGFNYW5hZ2VyX2dldF9sZXZlbF9leHAoR19DRGF0YU1hbmFnZXIoKSxDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbCh1c2VyKSk7DQogICAgICAgIENVc2VyQ2hhcmFjSW5mb19zZXRDdXJDaGFyYWNFeHAodXNlcixsZXZlbEV4cCk7DQogICAgfQ0KICAgIGlmKGl0ZW1JZCE9MTIwNiAmJiBpdGVtSWQhPTEyNTMpew0KICAgICAgICBpZihpdGVtSWQ9PTkxNil7DQogICAgICAgICAgICBndWlsZEV4cEJvb2sgPSAxOw0KICAgICAgICAgICAgdjE4NCA9IDEwOw0KICAgICAgICB9ZWxzZSBpZihpdGVtSWQgPT0gOTYwKXsNCiAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9ICAxOw0KICAgICAgICAgICAgdjE4NCA9IDI0Ow0KICAgICAgICAgICAgdmFyIGV4cGFuZERhdGEgPSBDVXNlcl9HZXRDaGFyYWNFeHBhbmREYXRhKHVzZXIsMTEpOw0KICAgICAgICAgICAgaWYoZXhwYW5kRGF0YSl7DQogICAgICAgICAgICAgICAgQ1F1ZXN0U2hvcF9jbGVhclFQKGV4cGFuZERhdGEsdXNlcik7DQogICAgICAgICAgICAgICAgQ1F1ZXN0U2hvcF9zZW5kQ2hhcmFjUXAoZXhwYW5kRGF0YSx1c2VyLDApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIGd1aWxkRXhwQm9vayAgPSBpdGVtSWQ9PTk2MyB8fCBpdGVtSWQ9PTI2NjAzOTY7DQogICAgICAgICAgICB2MTg0ID0gMTA7DQogICAgICAgIH0NCiAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIGlmKENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2xldmVsKHVzZXIpIDw9NDkpew0KICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIGlmKENVc2VyX2lzQWZmZWN0ZWRQcmVtaXVtKHVzZXIudG9JbnQzMigpLDMzKT09MCl7DQogICAgICAgIGd1aWxkRXhwQm9vayA9IDE7DQogICAgICAgIHYxODQgPSAxODsNCiAgICAgICAgZ290bzE5MSh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpOw0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDIxNixidWZmKTsNCiAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgIHJldHVybjsNCn0NCg0KZnVuY3Rpb24gZ290bzE3OCh1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZixpdGVtSWQsbWF4TGV2ZWwpew0KICAgIHZhciBpdGVtSWRWYWwgPSBHX0NEYXRhTWFuYWdlcigpLmFkZCgyMDY4NCkucmVhZFUzMigpOw0KICAgIGNvbnNvbGUubG9nKCdpdGVtSWRWYWwgOiAnK2l0ZW1JZFZhbCk7DQogICAgaWYoaXRlbUlkID09IGl0ZW1JZFZhbCl7DQogICAgICAgIHZhciBpdGVtID0gQ0RhdGFNYW5hZ2VyX2ZpbmRfaXRlbShHX0NEYXRhTWFuYWdlcigpLGl0ZW1JZFZhbCk7DQogICAgICAgIGlmKGl0ZW1JZFZhbD09MCl7DQogICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxNyxidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYoQ0l0ZW1faXNfc3RhY2thYmxlKGl0ZW0pIT0xKXsNCiAgICAgICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDE3LGJ1ZmYpOw0KICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB2YXIgY2hhcmFjTGV2ZWwgPSBDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19sZXZlbCh1c2VyKTsNCiAgICAgICAgdmFyIHVzYWJsZUxldmVsID1DSXRlbV9HZXRVc2FibGVMZXZlbChpdGVtKTsNCiAgICAgICAgaWYoY2hhcmFjTGV2ZWwgPCB1c2FibGVMZXZlbCl7DQogICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxNyxidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgaWYoY2hhcmFjTGV2ZWwgPiBtYXhMZXZlbCsxKXsNCiAgICAgICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDE3LGJ1ZmYpOw0KICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB2MTg0ID0xOw0KICAgICAgICB2YXIgYWxsb2MgPSBNZW1vcnkuYWxsb2MoNCk7DQogICAgICAgIGlmKENJdGVtX0dldEluY3JlYXNlU3RhdHVzSW50RGF0YShpdGVtLDAsYWxsb2MpIT0xKXsNCiAgICAgICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDE3LGJ1ZmYpOw0KICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBndWlsZEV4cEJvb2sgPSBhbGxvYy5yZWFkVTMyKCk7DQogICAgfWVsc2V7DQogICAgICAgIHZhciBpdGVtID0gQ0RhdGFNYW5hZ2VyX2ZpbmRfaXRlbShHX0NEYXRhTWFuYWdlcigpLGl0ZW1JZCk7DQogICAgICAgIGlmKGl0ZW0hPTApew0KICAgICAgICAgICAgaWYoQ0l0ZW1fR2V0SW5jcmVhc2VTdGF0dXNUeXBlKGl0ZW0pID09MSl7DQogICAgICAgICAgICAgICAgdmFyIGFsbG9jID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgICAgICAgICAgICAgIENJdGVtX0dldEluY3JlYXNlU3RhdHVzSW50RGF0YShpdGVtLDAsYWxsb2MpOw0KICAgICAgICAgICAgICAgIGd1aWxkRXhwQm9vayA9IGFsbG9jLnJlYWRVMzIoKTsNCiAgICAgICAgICAgICAgICB2MTg0ID0gMTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCk7DQogICAgcmV0dXJuOw0KfQ0KDQpmdW5jdGlvbiBnb3RvMTkxKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mLGl0ZW1JZCxtYXhMZXZlbCl7DQogICAgaWYodjE4ND09LTEpew0KICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxNyxidWZmKTsNCiAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCiAgICBpZih2MTg0PT0xNSl7DQogICAgICAgIGlmKENVc2VyX2dldF9zdGF0ZSh1c2VyKT09Myl7DQogICAgICAgICAgICB2YXIgY3VyQ2hhcmFjRmF0aWd1ZSA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNGYXRpZ3VlKHVzZXIpOw0KICAgICAgICAgICAgaWYoY3VyQ2hhcmFjRmF0aWd1ZSA8IGd1aWxkRXhwQm9vayl7DQogICAgICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsOTUsYnVmZik7DQogICAgICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgQ1VzZXJfU2VuZENtZEVycm9yUGFja2V0KHVzZXIsMzIsMTksYnVmZik7DQogICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgfQ0KICAgIGlmKHYxODQhPTAgfHwgdjE4ND09MTcgfHwgdjE4ND09MSl7DQogICAgICAgIGlmKEdhbWVXb3JsZF9Jc1B2UFNraWxUcmVlQ2hhbm5lbChHX0dhbWVXb3JsZCgpKSE9MCl7DQogICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxOSxidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQogICAgdmFyIGl0ZW0gPSBDRGF0YU1hbmFnZXJfZmluZF9pdGVtKEdfQ0RhdGFNYW5hZ2VyKCksaXRlbUlkKTsNCiAgICBpZihpdGVtPT0wKXsNCiAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCiAgICB2YXIgdXNhYmxlUHZwUmFuayA9IENJdGVtX0dldFVzYWJsZVB2UFJhbmsoaXRlbSk7DQogICAgaWYodXNhYmxlUHZwUmFuaz5DVXNlckNoYXJhY0luZm9fZ2V0X3B2cF9ncmFkZSh1c2VyKSl7DQogICAgICAgIENVc2VyX1NlbmRDbWRFcnJvclBhY2tldCh1c2VyLDMyLDEsYnVmZik7DQogICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgdmFyIHRlbXBNZXRob2QgPSAgbmV3IE5hdGl2ZUZ1bmN0aW9uKHB0cihpdGVtLnJlYWRVMzIoKSkuYWRkKDEyKjQpLnJlYWRQb2ludGVyKCksICdpbnQnLCBbJ3BvaW50ZXInXSwgeyJhYmkiOiJzeXN2In0pOw0KICAgIGlmKHRlbXBNZXRob2QoaXRlbSkgIT0yMSl7DQogICAgICAgIHZhciBjdXJDaGFyYWNJbnZlblcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5XKHVzZXIpOw0KICAgICAgICBpZiggQ0ludmVudG9yeV9kZWxldGVfaXRlbShjdXJDaGFyYWNJbnZlblcsMSxzbG9mLDEsMTAsMSkgIT0xICl7DQogICAgICAgICAgICBDVXNlcl9TZW5kQ21kRXJyb3JQYWNrZXQodXNlciwzMiwxNyxidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQogICAgdmFyIHYxNzIgPSBNZW1vcnkuYWxsb2MoMTUxKTsNCiAgICBjb25zb2xlLmxvZygiaXRlbSBhbGwgaGFuZGxlIHN1Y2Nlc3M6ICIrdjE4NCsiICwiK2d1aWxkRXhwQm9vayk7DQogICAgc3dpdGNoICh2MTg0KXsNCiAgICAgICAgY2FzZSAwOg0KICAgICAgICAgICAgQ1VzZXJfZ2Fpbl9zcCh1c2VyLGd1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBDVXNlcl9oaXN0b3J5X2xvZ19zcCh1c2VyLC0xLGd1aWxkRXhwQm9vaywxKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9jbGVhcihidWZmKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaGVhZGVyKGJ1ZmYsIDEsIDMyKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLCAxKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgc2xvZik7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiwgdjE4NCk7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2ludChidWZmLCBndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChidWZmLCAwKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgMCk7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfZmluYWxpemUoYnVmZiwgMSk7DQogICAgICAgICAgICBDVXNlcl9TZW5kKHVzZXIsIGJ1ZmYpOw0KICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSAxOg0KICAgICAgICAgICAgaWYoQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfbGV2ZWwodXNlcik+bWF4TGV2ZWwtMSl7DQogICAgICAgICAgICAgICAgZ3VpbGRFeHBCb29rID0gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHZhciB2MTgwID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgICAgICAgICAgdjE4MC53cml0ZVUzMigwKTsNCiAgICAgICAgICAgIHZhciB2MTc5ID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgICAgICAgICAgdjE3OS53cml0ZVUzMigwKTsNCiAgICAgICAgICAgIHZhciB2MTgxID0gTWVtb3J5LmFsbG9jKDQpOw0KICAgICAgICAgICAgdjE4MS53cml0ZVUzMigwKTsNCiAgICAgICAgICAgIHZhciBzcFZhbCA9IE1lbW9yeS5hbGxvYyg0KTsNCiAgICAgICAgICAgIHNwVmFsLndyaXRlVTMyKDApOw0KICAgICAgICAgICAgaWYoaXRlbUlkID09IEdfQ0RhdGFNYW5hZ2VyKCkuYWRkKDIwNjg0KS5yZWFkVTMyKCkpew0KICAgICAgICAgICAgICAgIENVc2VyX3Jld2FyZEV4cCh1c2VyLGd1aWxkRXhwQm9vayxzcFZhbC50b0ludDMyKCksdjE4MS50b0ludDMyKCksdjE4MCx2MTc5LDMsMSk7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBDVXNlcl9yZXdhcmRFeHAodXNlcixndWlsZEV4cEJvb2ssc3BWYWwudG9JbnQzMigpLHYxODEudG9JbnQzMigpLHYxODAsdjE3OSwwLDEpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc29sZS5sb2coJzExMTExMTExMTExMTEnKQ0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyKGJ1ZmYpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwgMSwgMzIpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIDEpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChidWZmLCBzbG9mKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLCB2MTg0KTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaW50KGJ1ZmYsIGd1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIHYxNzkucmVhZFUzMigpLXYxODAucmVhZFUzMigpKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgdjE4MS5yZWFkVTMyKCkpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKGJ1ZmYsIDEpOw0KICAgICAgICAgICAgQ1VzZXJfU2VuZCh1c2VyLCBidWZmKTsNCiAgICAgICAgICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMjoNCiAgICAgICAgICAgIHZhciB1c2VyQWRkSW5mbyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNBZGRJbmZvUmVmVyh1c2VyKTsNCiAgICAgICAgICAgIHB0cih1c2VyQWRkSW5mbykud3JpdGVVMzIocHRyKHVzZXJBZGRJbmZvKS5yZWFkVTMyKCkrZ3VpbGRFeHBCb29rKTsNCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMzoNCiAgICAgICAgICAgIHZhciB1c2VyQWRkSW5mbyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNBZGRJbmZvUmVmVyh1c2VyKTsNCiAgICAgICAgICAgIHVzZXJBZGRJbmZvID0gdXNlckFkZEluZm8uYWRkKDQpOw0KICAgICAgICAgICAgcHRyKHVzZXJBZGRJbmZvKS53cml0ZVUzMihwdHIodXNlckFkZEluZm8pLnJlYWRVMzIoKStndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgZ290bzMyKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSA0Og0KICAgICAgICAgICAgdmFyIHVzZXJBZGRJbmZvID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0FkZEluZm9SZWZXKHVzZXIpOw0KICAgICAgICAgICAgdXNlckFkZEluZm8gPSB1c2VyQWRkSW5mby5hZGQoOCk7DQogICAgICAgICAgICBwdHIodXNlckFkZEluZm8pLndyaXRlVTE2KHB0cih1c2VyQWRkSW5mbykucmVhZFUxNigpK2d1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDU6DQogICAgICAgICAgICB2YXIgdXNlckFkZEluZm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjQWRkSW5mb1JlZlcodXNlcik7DQogICAgICAgICAgICB1c2VyQWRkSW5mbyA9IHVzZXJBZGRJbmZvLmFkZCgxMCk7DQogICAgICAgICAgICBwdHIodXNlckFkZEluZm8pLndyaXRlVTE2KHB0cih1c2VyQWRkSW5mbykucmVhZFUxNigpK2d1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDY6DQogICAgICAgICAgICB2YXIgdXNlckFkZEluZm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjQWRkSW5mb1JlZlcodXNlcik7DQogICAgICAgICAgICB1c2VyQWRkSW5mbyA9IHVzZXJBZGRJbmZvLmFkZCgxMik7DQogICAgICAgICAgICBwdHIodXNlckFkZEluZm8pLndyaXRlVTE2KHB0cih1c2VyQWRkSW5mbykucmVhZFUxNigpK2d1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDc6DQogICAgICAgICAgICB2YXIgdXNlckFkZEluZm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjQWRkSW5mb1JlZlcodXNlcik7DQogICAgICAgICAgICB1c2VyQWRkSW5mbyA9IHVzZXJBZGRJbmZvLmFkZCgxNCk7DQogICAgICAgICAgICBwdHIodXNlckFkZEluZm8pLndyaXRlVTE2KHB0cih1c2VyQWRkSW5mbykucmVhZFUxNigpK2d1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDg6DQogICAgICAgICAgICB2YXIgdXNlckFkZEluZm8gPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjQWRkSW5mb1JlZlcodXNlcik7DQogICAgICAgICAgICB1c2VyQWRkSW5mbyA9IHVzZXJBZGRJbmZvLmFkZCg2Nik7DQogICAgICAgICAgICBwdHIodXNlckFkZEluZm8pLndyaXRlVTMyKHB0cih1c2VyQWRkSW5mbykucmVhZFUzMigpK2d1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDk6DQogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykgew0KICAgICAgICAgICAgICAgIHZhciB1c2VyQWRkSW5mbyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNBZGRJbmZvUmVmVyh1c2VyKTsNCiAgICAgICAgICAgICAgICB1c2VyQWRkSW5mbyA9IHVzZXJBZGRJbmZvLmFkZCgyKihpKjgpKTsNCiAgICAgICAgICAgICAgICBwdHIodXNlckFkZEluZm8pLndyaXRlVTE2KHB0cih1c2VyQWRkSW5mbykucmVhZFUxNigpK2d1aWxkRXhwQm9vayk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDEwOg0KICAgICAgICBjYXNlIDI0Og0KICAgICAgICAgICAgaWYoZ3VpbGRFeHBCb29rID09MSl7DQogICAgICAgICAgICAgICAgdmFyIGN1ckNoYXJhY1NraWxsVyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcodXNlcik7DQogICAgICAgICAgICAgICAgU2tpbGxTbG90X2NsZWFyX2FsbF9za2lsbHNfYm90aChjdXJDaGFyYWNTa2lsbFcpOw0KICAgICAgICAgICAgICAgIGN1ckNoYXJhY1NraWxsVyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcodXNlcik7DQogICAgICAgICAgICAgICAgU2tpbGxTbG90X3NldF9wYXJlbnQoY3VyQ2hhcmFjU2tpbGxXLHVzZXIpOw0KICAgICAgICAgICAgICAgIHZhciBjaGFyY0pvYiA9IENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKTsNCiAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIGFkZFNraWxsT25DcmVhdGVDaGFyYWN0ZXIoY3VyQ2hhcmFjU2tpbGxXKzcwLGNoYXJjSm9iKTsNCiAgICAgICAgICAgICAgICBjaGFyY0pvYiA9IENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKTsNCiAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIGFkZFNraWxsT25DcmVhdGVDaGFyYWN0ZXIoY3VyQ2hhcmFjU2tpbGxXKzQ3OCxjaGFyY0pvYik7DQogICAgICAgICAgICAgICAgLy8g6L+Z5bqU6K+l5piv5oqA6IO95Y+q6IO9MTLkuKrljp/lm6ANCiAgICAgICAgICAgICAgICB2YXIgc2tpbGxMaXN0ID0gTWVtb3J5LmFsbG9jKDEyKTsNCiAgICAgICAgICAgICAgICBzdGRfdmVjdG9yX3N0ZF9wYWlyX2ludF9pbnRfdmVjdG9yKHNraWxsTGlzdCk7DQoNCiAgICAgICAgICAgICAgICB2YXIgY3VyQ2hhclNlY29uZEdyb3dUeXBlID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJTZWNvbmRHcm93VHlwZSh1c2VyKTsNCiAgICAgICAgICAgICAgICB2YXIgY3VyQ2hhckZpcnN0R3Jvd1R5cGUgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhckZpcnN0R3Jvd1R5cGUodXNlcik7DQogICAgICAgICAgICAgICAgdmFyIGRhdGFNYW5hZ2UgPSBHX0NEYXRhTWFuYWdlcigpLmFkZCgyMCkucmVhZFUzMigpOw0KICAgICAgICAgICAgICAgIHZhciBnaXZlU2tpbGwgPSBDQ2hhcmFjdGVyX2dldF9naXZlX3NraWxsKGRhdGFNYW5hZ2UrMjAxMipDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19qb2IodXNlciksY3VyQ2hhckZpcnN0R3Jvd1R5cGUsY3VyQ2hhclNlY29uZEdyb3dUeXBlLHNraWxsTGlzdC50b0ludDMyKCksMCk7DQogICAgICAgICAgICAgICAgdmFyIHY4MDsNCiAgICAgICAgICAgICAgICBpZihnaXZlU2tpbGwgIT0xKXsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJjTmFtZSA9ICcnOw0KICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcmNOYW1lVmFsID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY05hbWUodXNlckluZm8pOw0KICAgICAgICAgICAgICAgICAgICBpZighY2hhcmNOYW1lVmFsLmlzTnVsbCgpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBjaGFyY05hbWUgPSAgY2hhcmNOYW1lVmFsLnJlYWRVdGY4U3RyaW5nKC0xKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB2YXIgdjE4NEFkcnIgPSBNZW1vcnkuYWxsb2MoMSk7DQogICAgICAgICAgICAgICAgICAgIHYxODRBZHJyLndyaXRlVTgodjE4NCk7DQogICAgICAgICAgICAgICAgICAgIExvZ01hbmFnZXJfbG9nRm9ybWF0KE1lbW9yeS5hbGxvYygxKSxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCJ1c2VyLmNwcCIpLnRvSW50MzIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoJ3ZvaWQgQ1VzZXI6OmluY3JlYXNlX3N0YXR1cyhzaG9ydCBpbnQpJykscHRyKDB4NGFlZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCdVc2VyICVzIC0gQ1VzZXI6OnNldF9ncm93X3R5cGUgJWQnKSxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKGNoYXJjTmFtZSksdjE4NEFkcnIpOw0KICAgICAgICAgICAgICAgICAgICB2ODAgPSAwOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDs7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X3NpemUoc2tpbGxMaXN0KSA8PWkpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraWxsID0gc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X29wZXJhdG9yKHNraWxsTGlzdCxpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIFNraWxsU2xvdF9ncm93dHlwZV9za2lsbChDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSxza2lsbC5yZWFkVTgoKSxza2lsbC5hZGQoMSkucmVhZFU4KCksMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBTa2lsbFNsb3RfZ3Jvd3R5cGVfc2tpbGwoQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1NraWxsVyh1c2VyKSxDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19qb2IodXNlciksc2tpbGwucmVhZFU4KCksc2tpbGwuYWRkKDEpLnJlYWRVOCgpLDEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHZhciBjdXJDaGFyYWNFeHBlcnRKb2JUeXBlID1DVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjRXhwZXJ0Sm9iVHlwZSh1c2VyKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGVydEpvYlNjcmlwdCA9IENEYXRhTWFuYWdlcl9HZXRFeHBlcnRKb2JTY3JpcHQoR19DRGF0YU1hbmFnZXIoKSxjdXJDaGFyYWNFeHBlcnRKb2JUeXBlKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoZXhwZXJ0Sm9iU2NyaXB0IT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyA7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9zaXplKGV4cGVydEpvYlNjcmlwdC5hZGQoMTIpKSA8PWkpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckNoYXJhY0V4cGVydEpvYkV4cCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNFeHBlcnRKb2JFeHAodXNlcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckV4cGVydEpvYkxldmVsID0gQ1VzZXJfR2V0Q3VyRXhwZXJ0Sm9iTGV2ZWwodXNlciwgY3VyQ2hhcmFjRXhwZXJ0Sm9iRXhwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZXJ0Sm9iID0gc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X29wZXJhdG9yKGV4cGVydEpvYlNjcmlwdC5hZGQoMTIpLGkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNraWxsU2xvdF9ncm93dHlwZV9za2lsbChDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSxleHBlcnRKb2IucmVhZFUxNigpLGN1ckV4cGVydEpvYkxldmVsLDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNraWxsU2xvdF9ncm93dHlwZV9za2lsbChDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSxleHBlcnRKb2IucmVhZFUxNigpLGN1ckV4cGVydEpvYkxldmVsLDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIFdvbmdXb3JrX0NTa2lsbENoYW5nZXJfQ1NraWxsQ2hhbmdlcih2MTcyKTsNCiAgICAgICAgICAgICAgICAgICAgV29uZ1dvcmtfQ1NraWxsQ2hhbmdlcl9Ta2lsbEluaXRpYWxpemUodjE3Mix1c2VyLDAsMCk7DQogICAgICAgICAgICAgICAgICAgIENVc2VyX3NlbmRfc2tpbGxfaW5mbyh1c2VyKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHByZW1pdW1MZXRoZU1hbmFnZXIgPSBDR2FtZU1hbmFnZXJfR2V0UHJlbWl1bUxldGhlTWFuYWdlcihHX0NHYW1lTWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoQ1VzZXJfaXNBZmZlY3RlZFByZW1pdW0odXNlci50b0ludDMyKCksMzMpIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZW1pdW1MZXRoZU1hbmFnZXIhPTAgJiYgQ1VzZXJfaXNBZmZlY3RlZFByZW1pdW0odXNlci50b0ludDMyKCksMzMpIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUHJlbWl1bUxldGhlTWFuYWdlcl9Jbml0TGV0aGVTa2lsbChwcmVtaXVtTGV0aGVNYW5hZ2VyLCB1c2VyLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUHJlbWl1bUxldGhlTWFuYWdlcl9Jbml0TGV0aGVTa2lsbChwcmVtaXVtTGV0aGVNYW5hZ2VyLCB1c2VyLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYocHJlbWl1bUxldGhlTWFuYWdlciE9MCl7DQogICAgICAgICAgICAgICAgICAgICAgICBDUHJlbWl1bUxldGhlTWFuYWdlcl9VcGRhdGVCYWNrdXBTa2lsbEZsYWcocHJlbWl1bUxldGhlTWFuYWdlcix1c2VyLDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgQ1ByZW1pdW1MZXRoZU1hbmFnZXJfVXBkYXRlQmFja3VwU2tpbGxGbGFnKHByZW1pdW1MZXRoZU1hbmFnZXIsdXNlciwxKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBXb25nV29ya19DU2tpbGxDaGFuZ2VyX2RfQ1NraWxsQ2hhbmdlcih2MTcyKTsNCiAgICAgICAgICAgICAgICAgICAgdjgwID0gMTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X2RfdmVjdG9yKHNraWxsTGlzdCk7DQogICAgICAgICAgICAgICAgaWYodjgwPT0xKXsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyKGJ1ZmYpOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2hlYWRlcihidWZmLCAxLCAzMik7DQogICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChidWZmLCBzbG9mKTsNCiAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIHYxODQpOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2ludChidWZmLCBndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIDApOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIDApOw0KICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfZmluYWxpemUoYnVmZiwgMSk7DQogICAgICAgICAgICAgICAgICAgIENVc2VyX1NlbmQodXNlciwgYnVmZik7DQogICAgICAgICAgICAgICAgICAgIGlmKHVzZXIuYWRkKDE0NDM2OSo0KS5yZWFkVTMyKCkgPT0gNSl7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHkgPSBDVXNlcl9HZXRQYXJ0eSh1c2VyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcnR5IT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfY2xlYXIoYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwgMCwgMik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgMSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1VzZXJfbWFrZV9iYXNpY19pbmZvKHVzZXIsIGJ1ZmYsIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9maW5hbGl6ZShidWZmLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUGFydHlfc2VuZF90b19wYXJ0eShwYXJ0eSwgYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHVzZXIuYWRkKDE0NDM2OSo0KS5yZWFkVTMyKCkgPT0gOCl7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FyUm9vbSA9IENVc2VyX0dldFdhclJvb20odXNlcik7DQogICAgICAgICAgICAgICAgICAgICAgICBpZih3YXJSb29tIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfY2xlYXIoYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwgMCwgMik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgMSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1VzZXJfbWFrZV9iYXNpY19pbmZvKHVzZXIsIGJ1ZmYsIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9maW5hbGl6ZShidWZmLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXYXJSb29tX1NlbmRUb1Jvb20od2FyUm9vbSwgYnVmZik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9ZWxzZSB7DQogICAgICAgICAgICAgICAgdmFyIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4ID0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY1NraWxsVHJlZUluZGV4KHVzZXIpOw0KICAgICAgICAgICAgICAgIHZhciBjdXJDaGFyYWNTa2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIFNraWxsU2xvdF9jbGVhcl9hbGxfc2tpbGxzKGN1ckNoYXJhY1NraWxsVyx1c2VyKTsNCiAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIFNraWxsU2xvdF9zZXRfcGFyZW50KGN1ckNoYXJhY1NraWxsVyx1c2VyKTsNCiAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFRyZWVJbmRleCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNTa2lsbFRyZWVJbmRleCh1c2VyKTsNCiAgICAgICAgICAgICAgICBpZihjdXJDaGFyYWNTa2lsbFRyZWVJbmRleD09LTEgfHwgY3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXghPTApew0KICAgICAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgICAgICBhZGRTa2lsbE9uQ3JlYXRlQ2hhcmFjdGVyKGN1ckNoYXJhY1NraWxsVy5hZGQoNzApLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSk7DQogICAgICAgICAgICAgICAgfWVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgICAgICBhZGRTa2lsbE9uQ3JlYXRlQ2hhcmFjdGVyKGN1ckNoYXJhY1NraWxsVy5hZGQoNDc4KSxDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19qb2IodXNlcikpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyDov5nlupTor6XmmK/mioDog73lj6rog70xMuS4quWOn+WboA0KICAgICAgICAgICAgICAgIHZhciBza2lsbExpc3QgPSBNZW1vcnkuYWxsb2MoMTIpOw0KICAgICAgICAgICAgICAgIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF92ZWN0b3Ioc2tpbGxMaXN0KTsNCg0KICAgICAgICAgICAgICAgIHZhciBjdXJDaGFyU2Vjb25kR3Jvd1R5cGUgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhclNlY29uZEdyb3dUeXBlKHVzZXIpOw0KICAgICAgICAgICAgICAgIHZhciBjdXJDaGFyRmlyc3RHcm93VHlwZSA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyRmlyc3RHcm93VHlwZSh1c2VyKTsNCiAgICAgICAgICAgICAgICB2YXIgZGF0YU1hbmFnZSA9IEdfQ0RhdGFNYW5hZ2VyKCkuYWRkKDIwKS5yZWFkVTMyKCk7DQogICAgICAgICAgICAgICAgdmFyIGdpdmVTa2lsbCA9IENDaGFyYWN0ZXJfZ2V0X2dpdmVfc2tpbGwoZGF0YU1hbmFnZSsyMDEyKkNVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSxjdXJDaGFyRmlyc3RHcm93VHlwZSxjdXJDaGFyU2Vjb25kR3Jvd1R5cGUsc2tpbGxMaXN0LnRvSW50MzIoKSwwKTsNCiAgICAgICAgICAgICAgICB2YXIgdjgwOw0KICAgICAgICAgICAgICAgIGlmKGdpdmVTa2lsbCAhPTEpew0KICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcmNOYW1lID0gJyc7DQogICAgICAgICAgICAgICAgICAgIHZhciBjaGFyY05hbWVWYWwgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTmFtZSh1c2VySW5mbyk7DQogICAgICAgICAgICAgICAgICAgIGlmKCFjaGFyY05hbWVWYWwuaXNOdWxsKCkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJjTmFtZSA9ICBjaGFyY05hbWVWYWwucmVhZFV0ZjhTdHJpbmcoLTEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHZhciB2MTg0QWRyciA9IE1lbW9yeS5hbGxvYygxKTsNCiAgICAgICAgICAgICAgICAgICAgdjE4NEFkcnIud3JpdGVVOCh2MTg0KTsNCiAgICAgICAgICAgICAgICAgICAgTG9nTWFuYWdlcl9sb2dGb3JtYXQoTWVtb3J5LmFsbG9jKDEpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoInVzZXIuY3BwIikudG9JbnQzMigpDQogICAgICAgICAgICAgICAgICAgICAgICAsTWVtb3J5LmFsbG9jVXRmOFN0cmluZygndm9pZCBDVXNlcjo6aW5jcmVhc2Vfc3RhdHVzKHNob3J0IGludCknKSxwdHIoMHg0QjQ4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoJ1VzZXIgJXMgLSBDVXNlcjo6c2V0X2dyb3dfdHlwZSAlZCcpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoY2hhcmNOYW1lKSx2MTg0QWRycik7DQogICAgICAgICAgICAgICAgICAgIHY4MCA9IDA7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOzsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihzdGRfdmVjdG9yX3N0ZF9wYWlyX2ludF9pbnRfc2l6ZShza2lsbExpc3QpIDw9aSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbGwgPSBzdGRfdmVjdG9yX3N0ZF9wYWlyX2ludF9pbnRfb3BlcmF0b3Ioc2tpbGxMaXN0LGkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgU2tpbGxTbG90X2dyb3d0eXBlX3NraWxsKENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcodXNlciksQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfam9iKHVzZXIpLHNraWxsLnJlYWRVOCgpLHNraWxsLmFkZCgxKS5yZWFkVTgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICxDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXgodXNlcikpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHZhciBjdXJDaGFyYWNFeHBlcnRKb2JUeXBlID1DVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjRXhwZXJ0Sm9iVHlwZSh1c2VyKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGVydEpvYlNjcmlwdCA9IENEYXRhTWFuYWdlcl9HZXRFeHBlcnRKb2JTY3JpcHQoR19DRGF0YU1hbmFnZXIoKSxjdXJDaGFyYWNFeHBlcnRKb2JUeXBlKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoZXhwZXJ0Sm9iU2NyaXB0IT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyA7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9zaXplKGV4cGVydEpvYlNjcmlwdC5hZGQoMTIpKSA8PWkpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckNoYXJhY0V4cGVydEpvYkV4cCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNFeHBlcnRKb2JFeHAodXNlcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckV4cGVydEpvYkxldmVsID0gQ1VzZXJfR2V0Q3VyRXhwZXJ0Sm9iTGV2ZWwodXNlciwgY3VyQ2hhcmFjRXhwZXJ0Sm9iRXhwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZXJ0Sm9iID0gc3RkX3ZlY3Rvcl9zdGRfcGFpcl9pbnRfaW50X29wZXJhdG9yKGV4cGVydEpvYlNjcmlwdC5hZGQoMTIpLGkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNraWxsU2xvdF9ncm93dHlwZV9za2lsbChDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSxleHBlcnRKb2IucmVhZFUxNigpLGN1ckV4cGVydEpvYkxldmVsLDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNraWxsU2xvdF9ncm93dHlwZV9za2lsbChDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKSxleHBlcnRKb2IucmVhZFUxNigpLGN1ckV4cGVydEpvYkxldmVsLDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIFdvbmdXb3JrX0NTa2lsbENoYW5nZXJfQ1NraWxsQ2hhbmdlcih2MTcyKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHYyMTkgPSAwOw0KICAgICAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFRyZWVJbmRleCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNTa2lsbFRyZWVJbmRleCh1c2VyKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoY3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXg9PS0xIHx8IGN1ckNoYXJhY1NraWxsVHJlZUluZGV4IT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHYyMTkgPSAxOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2MjE5ID0gMjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBXb25nV29ya19DU2tpbGxDaGFuZ2VyX1NraWxsSW5pdGlhbGl6ZSh2MTcyLHVzZXIsdjIxOSwwKTsNCiAgICAgICAgICAgICAgICAgICAgQ1VzZXJfc2VuZF9za2lsbF9pbmZvKHVzZXIpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgcHJlbWl1bUxldGhlTWFuYWdlciA9IENHYW1lTWFuYWdlcl9HZXRQcmVtaXVtTGV0aGVNYW5hZ2VyKEdfQ0dhbWVNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgICAgICBpZihDVXNlcl9pc0FmZmVjdGVkUHJlbWl1bSh1c2VyLnRvSW50MzIoKSwzMykhPTApew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJlbWl1bUxldGhlTWFuYWdlciE9MCAmJiBDVXNlcl9pc0FmZmVjdGVkUHJlbWl1bSh1c2VyLnRvSW50MzIoKSwzMykhPTApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4ID0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY1NraWxsVHJlZUluZGV4KHVzZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENQcmVtaXVtTGV0aGVNYW5hZ2VyX0luaXRMZXRoZVNraWxsKHByZW1pdW1MZXRoZU1hbmFnZXIsIHVzZXIsIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYocHJlbWl1bUxldGhlTWFuYWdlciE9MCl7DQogICAgICAgICAgICAgICAgICAgICAgICBjdXJDaGFyYWNTa2lsbFRyZWVJbmRleCA9IENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNTa2lsbFRyZWVJbmRleCh1c2VyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIENQcmVtaXVtTGV0aGVNYW5hZ2VyX1VwZGF0ZUJhY2t1cFNraWxsRmxhZyhwcmVtaXVtTGV0aGVNYW5hZ2VyLHVzZXIsY3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIFdvbmdXb3JrX0NTa2lsbENoYW5nZXJfZF9DU2tpbGxDaGFuZ2VyKHYxNzIpOw0KICAgICAgICAgICAgICAgICAgICB2ODAgPSAxOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBzdGRfdmVjdG9yX3N0ZF9wYWlyX2ludF9pbnRfZF92ZWN0b3Ioc2tpbGxMaXN0KTsNCiAgICAgICAgICAgICAgICBpZih2ODA9PTEpew0KICAgICAgICAgICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUGFja2V0R3VhcmRfZnJlZV9QYWNrZXRHdWFyZChidWZmKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSAxMToNCiAgICAgICAgICAgIGlmKENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2d1aWxka2V5KHVzZXIpIT0wKXsNCiAgICAgICAgICAgICAgICBDVXNlckNoYXJhY0luZm9fYWRkX2d1aWxkX2V4cCh1c2VyLGd1aWxkRXhwQm9vayk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDEyOg0KICAgICAgICAgICAgQ1VzZXJDaGFyYWNJbmZvX3NldEN1ckNoYXJhY1N0YW1pbmEodXNlcixndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgZ290bzMyKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSAxMzoNCiAgICAgICAgICAgIHZhciBpbnZlblIgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5SKHVzZXIpOw0KICAgICAgICAgICAgdmFyIGNvaW4gPSBDSW52ZW50b3J5X0dldEV2ZW50Q29pbihpbnZlblIpOw0KICAgICAgICAgICAgdmFyIGFsbENvaW4gPSBjb2luK2d1aWxkRXhwQm9vazsNCiAgICAgICAgICAgIHZhciBpbnZlblcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5XKHVzZXIpOw0KICAgICAgICAgICAgQ0ludmVudG9yeV9TZXRFdmVudENvaW4oaW52ZW5XLGFsbENvaW4pOw0KICAgICAgICAgICAgaW52ZW5SID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ludmVuUih1c2VyKTsNCiAgICAgICAgICAgIGNvaW4gPSBDSW52ZW50b3J5X0dldEV2ZW50Q29pbihpbnZlblIpOw0KICAgICAgICAgICAgY1VzZXJIaXN0b3J5TG9nX0V2ZW50Q29pbkFkZCh1c2VyLmFkZCg0OTc0MDgpLGNvaW4sZ3VpbGRFeHBCb29rLDIpOw0KICAgICAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHVzZXIsMSwwLDEpOw0KICAgICAgICAgICAgZ290bzMyKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSAxNDoNCiAgICAgICAgICAgIENVc2VyX1JlY292ZXJGYXRpZ3VlKHVzZXIsZ3VpbGRFeHBCb29rKTsNCiAgICAgICAgICAgIENVc2VyX1NlbmRGYXRpZ3VlKHVzZXIpOw0KICAgICAgICAgICAgZ290bzMyKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSAxNToNCiAgICAgICAgICAgIHZhciBjdXJDaGFyYWNGYXRpZ3VlID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ZhdGlndWUodXNlcik7DQogICAgICAgICAgICB2YXIgdmFsID0gY3VyQ2hhcmFjRmF0aWd1ZSAtIGd1aWxkRXhwQm9vayA8MCA/MDpjdXJDaGFyYWNGYXRpZ3VlIC0gZ3VpbGRFeHBCb29rDQogICAgICAgICAgICBDVXNlckNoYXJhY0luZm9fc2V0Q3VyQ2hhcmFjRmF0aWd1ZSh1c2VyLHZhbCk7DQogICAgICAgICAgICBDVXNlcl9TZW5kRmF0aWd1ZSh1c2VyKTsNCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMTY6DQogICAgICAgICAgICBpZihDVXNlckNoYXJhY0luZm9fZ2V0X2NoYXJhY19ndWlsZGtleSh1c2VyKSE9MCl7DQogICAgICAgICAgICAgICAgdmFyIGNoYXJjTm8gPSBDVXNlcl9nZXRfY2hhcmFjX25vKHVzZXIsLTEpOw0KICAgICAgICAgICAgICAgIHZhciBjaGFyY0d1aWxkS2V5ID0gQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfZ3VpbGRrZXkodXNlcik7DQogICAgICAgICAgICAgICAgdmFyIHNlcnZlckdyb3VwID0gQ1VzZXJfR2V0U2VydmVyR3JvdXAodXNlcik7DQogICAgICAgICAgICAgICAgdmFyIHNlcnZlclByb3h5ID0gQ1NlcnZlclByb3h5TWdyX0NHdWlsZFNlcnZlclByb3h5X0dldFNlcnZlclByb3h5KHB0cihwdHIoMHgwOTQwQkUyQykucmVhZFUzMigpKSxzZXJ2ZXJHcm91cCk7DQogICAgICAgICAgICAgICAgQ0d1aWxkU2VydmVyUHJveHlfU2VuZEluY3JlYXNlR3VpbGRFeHAoc2VydmVyUHJveHksY2hhcmNHdWlsZEtleSxjaGFyY05vLGd1aWxkRXhwQm9vaywxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMTc6DQogICAgICAgICAgICBDVXNlcl9nYWluX3NmcCh1c2VyLCBndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgQ1VzZXJfaGlzdG9yeV9sb2dfc2ZwKHVzZXIsIC0xLCBndWlsZEV4cEJvb2ssIDEpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyKGJ1ZmYpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwgMSwgMzIpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIDEpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChidWZmLCBzbG9mKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLCB2MTg0KTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaW50KGJ1ZmYsIGd1aWxkRXhwQm9vayk7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIDApOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChidWZmLCAwKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9maW5hbGl6ZShidWZmLCAxKTsNCiAgICAgICAgICAgIENVc2VyX1NlbmQodXNlciwgYnVmZik7DQogICAgICAgICAgICBQYWNrZXRHdWFyZF9mcmVlX1BhY2tldEd1YXJkKGJ1ZmYpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDE4Og0KICAgICAgICAgICAgU2tpbGxTbG90X2NsZWFyX3NmcF9za2lsbHMoQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1NraWxsVyh1c2VyKS50b0ludDMyKCksQ1VzZXJDaGFyYWNJbmZvX2dldF9jaGFyYWNfam9iKHVzZXIpLHB0cihDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXgodXNlcikpKTsNCiAgICAgICAgICAgIFNraWxsU2xvdF9zZXRfcGFyZW50KENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcodXNlciksdXNlcik7DQogICAgICAgICAgICB2YXIgdjIwMiA9IDA7DQogICAgICAgICAgICBpZiAoIENVc2VyQ2hhcmFjSW5mb19HZXRDdXJDaGFyYWNTa2lsbFRyZWVJbmRleCh1c2VyKSA9PSAtMSB8fCBDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXgodXNlcikhPTAgKXsNCiAgICAgICAgICAgICAgICB2MjAyID0gMzsNCiAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgIHYyMDIgPSA0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgV29uZ1dvcmtfQ1NraWxsQ2hhbmdlcl9DU2tpbGxDaGFuZ2VyKHYxNzIpOw0KICAgICAgICAgICAgV29uZ1dvcmtfQ1NraWxsQ2hhbmdlcl9Ta2lsbEluaXRpYWxpemUodjE3MiwgdXNlciwgdjIwMiwgMCk7DQogICAgICAgICAgICBDVXNlcl9zZW5kX3NraWxsX2luZm8odXNlcik7DQogICAgICAgICAgICBXb25nV29ya19DU2tpbGxDaGFuZ2VyX2RfQ1NraWxsQ2hhbmdlcih2MTcyKTsNCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMTk6DQogICAgICAgICAgICBDVXNlckNoYXJhY0luZm9fSW5jcmVhc2VQb3dlcldhclBvaW50KHVzZXIsZ3VpbGRFeHBCb29rKTsNCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMjA6DQogICAgICAgICAgICBDVXNlcl9hZGp1c3RfY2hhcmFjX3N0YXQodXNlcik7DQogICAgICAgICAgICBpZih1c2VyLmFkZCgxNDQzNjkpLnJlYWRVMzIoKT09Myl7DQogICAgICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyKGJ1ZmYpOw0KICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaGVhZGVyKGJ1ZmYsIDAsIDIpOw0KICAgICAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLCAxKTsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIDEpOw0KICAgICAgICAgICAgICAgIENVc2VyX21ha2VfYmFzaWNfaW5mbyh1c2VyLCBidWZmLCAxKTsNCiAgICAgICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfZmluYWxpemUoYnVmZiwgMSk7DQogICAgICAgICAgICAgICAgQ1VzZXJfU2VuZCh1c2VyLCBidWZmKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIGNhc2UgMjE6DQogICAgICAgICAgICB2YXIgY29pbiA9IENJbnZlbnRvcnlfR2V0Q29pbihDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5SKHVzZXIpKTsNCiAgICAgICAgICAgIENJbnZlbnRvcnlfU2V0Q29pbihDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjSW52ZW5XKHVzZXIpLGNvaW4rZ3VpbGRFeHBCb29rKTsNCiAgICAgICAgICAgIGNvaW4gPSBDSW52ZW50b3J5X0dldENvaW4oQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ludmVuUih1c2VyKSk7DQogICAgICAgICAgICBjVXNlckhpc3RvcnlMb2dfQ29pbkFkZCh1c2VyLmFkZCg0OTc0MDgpLGNvaW4sZ3VpbGRFeHBCb29rLDMpOw0KICAgICAgICAgICAgQ1VzZXJfU2VuZFVwZGF0ZUl0ZW1MaXN0KHVzZXIsMSwwLDEpOw0KICAgICAgICAgICAgZ290bzMyKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgY2FzZSAyMjoNCiAgICAgICAgICAgIGlmKGd1aWxkRXhwQm9vaz09MSl7DQogICAgICAgICAgICAgICAgdmFyIHNraWxsVyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcodXNlcik7DQogICAgICAgICAgICAgICAgU2tpbGxTbG90X2NsZWFyX2FsbF9za2lsbHNfYm90aChza2lsbFcpOw0KICAgICAgICAgICAgICAgIHNraWxsVyA9IENVc2VyQ2hhcmFjSW5mb19nZXRDdXJDaGFyYWNTa2lsbFcodXNlcik7DQogICAgICAgICAgICAgICAgU2tpbGxTbG90X3NldF9wYXJlbnQoc2tpbGxXLHVzZXIpOw0KICAgICAgICAgICAgICAgIENVc2VyX2dpdmVQdlBTa2lsbFRyZWUodXNlciwwLDEsMyk7DQogICAgICAgICAgICAgICAgdmFyIHB2cEdyYWRlID0gQ1VzZXJDaGFyYWNJbmZvX2dldF9wdnBfZ3JhZGUodXNlcik7DQogICAgICAgICAgICAgICAgdmFyIHB2UFNraWxsUG9pbnQgPSBQdlBTa2lsbFRyZWVQYXJhbWV0ZXJTY3JpcHRfZ2V0UHZQU2tpbGxQb2ludCgNCiAgICAgICAgICAgICAgICAgICAgR19DRGF0YU1hbmFnZXIoKS5hZGQoNDMwMDgpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKQ0KICAgICAgICAgICAgICAgICAgICAsQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJGaXJzdEdyb3dUeXBlKHVzZXIpDQogICAgICAgICAgICAgICAgICAgICxDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhclNlY29uZEdyb3dUeXBlKHVzZXIpDQogICAgICAgICAgICAgICAgICAgICxwdnBHcmFkZSwwDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICBza2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIFNraWxsU2xvdF9zZXRfcmVtYWluX3NwX2F0X2luZGV4KHNraWxsVy50b0ludDMyKCkscHZQU2tpbGxQb2ludCwwKTsNCiAgICAgICAgICAgICAgICBza2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIFNraWxsU2xvdF9zZXRfcmVtYWluX3NwX2F0X2luZGV4KHNraWxsVy50b0ludDMyKCkscHZQU2tpbGxQb2ludCwxKTsNCiAgICAgICAgICAgICAgICBDVXNlcl9zZW5kX3NraWxsX2luZm8odXNlcik7DQogICAgICAgICAgICAgICAgdmFyIHByZW1pdW1MZXRoZU1hbmFnZXIgPSBDR2FtZU1hbmFnZXJfR2V0UHJlbWl1bUxldGhlTWFuYWdlcihHX0NHYW1lTWFuYWdlcigpKTsNCiAgICAgICAgICAgICAgICBpZihDVXNlcl9pc0FmZmVjdGVkUHJlbWl1bSh1c2VyLnRvSW50MzIoKSwzMykhPTApew0KICAgICAgICAgICAgICAgICAgICBpZihwcmVtaXVtTGV0aGVNYW5hZ2VyIT0wICYmIENVc2VyX2lzQWZmZWN0ZWRQcmVtaXVtKHVzZXIudG9JbnQzMigpLDMzKSE9MCl7DQogICAgICAgICAgICAgICAgICAgICAgICBDUHJlbWl1bUxldGhlTWFuYWdlcl9Jbml0TGV0aGVTa2lsbChwcmVtaXVtTGV0aGVNYW5hZ2VyLCB1c2VyLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIENQcmVtaXVtTGV0aGVNYW5hZ2VyX0luaXRMZXRoZVNraWxsKHByZW1pdW1MZXRoZU1hbmFnZXIsIHVzZXIsIDEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2UgaWYocHJlbWl1bUxldGhlTWFuYWdlciE9MCl7DQogICAgICAgICAgICAgICAgICAgIENQcmVtaXVtTGV0aGVNYW5hZ2VyX1VwZGF0ZUJhY2t1cFNraWxsRmxhZyhwcmVtaXVtTGV0aGVNYW5hZ2VyLHVzZXIsMCk7DQogICAgICAgICAgICAgICAgICAgIENQcmVtaXVtTGV0aGVNYW5hZ2VyX1VwZGF0ZUJhY2t1cFNraWxsRmxhZyhwcmVtaXVtTGV0aGVNYW5hZ2VyLHVzZXIsMSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgdmFyIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4ID0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY1NraWxsVHJlZUluZGV4KHVzZXIpOw0KICAgICAgICAgICAgICAgIHZhciBza2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIFNraWxsU2xvdF9jbGVhcl9hbGxfc2tpbGxzKHNraWxsVyxjdXJDaGFyYWNTa2lsbFRyZWVJbmRleCk7DQogICAgICAgICAgICAgICAgc2tpbGxXID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1NraWxsVyh1c2VyKTsNCiAgICAgICAgICAgICAgICBTa2lsbFNsb3Rfc2V0X3BhcmVudChza2lsbFcsdXNlcik7DQogICAgICAgICAgICAgICAgdmFyIHYyMTkgPSAwOw0KICAgICAgICAgICAgICAgIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4ID0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY1NraWxsVHJlZUluZGV4KHVzZXIpOw0KICAgICAgICAgICAgICAgIGlmKGN1ckNoYXJhY1NraWxsVHJlZUluZGV4PT0tMSB8fCBjdXJDaGFyYWNTa2lsbFRyZWVJbmRleCE9MCl7DQogICAgICAgICAgICAgICAgICAgIHYyMTkgPSAxOw0KICAgICAgICAgICAgICAgIH1lbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdjIxOSA9IDI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIENVc2VyX2dpdmVQdlBTa2lsbFRyZWUodXNlciwwLDEsdjIxOSk7DQogICAgICAgICAgICAgICAgdmFyIHB2cEdyYWRlID0gQ1VzZXJDaGFyYWNJbmZvX2dldF9wdnBfZ3JhZGUodXNlcik7DQogICAgICAgICAgICAgICAgdmFyIHB2UFNraWxsUG9pbnQgPSBQdlBTa2lsbFRyZWVQYXJhbWV0ZXJTY3JpcHRfZ2V0UHZQU2tpbGxQb2ludCgNCiAgICAgICAgICAgICAgICAgICAgR19DRGF0YU1hbmFnZXIoKS5hZGQoNDMwMDgpLENVc2VyQ2hhcmFjSW5mb19nZXRfY2hhcmFjX2pvYih1c2VyKQ0KICAgICAgICAgICAgICAgICAgICAsQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJGaXJzdEdyb3dUeXBlKHVzZXIpDQogICAgICAgICAgICAgICAgICAgICxDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhclNlY29uZEdyb3dUeXBlKHVzZXIpDQogICAgICAgICAgICAgICAgICAgICxwdnBHcmFkZSwwDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICBza2lsbFcgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjU2tpbGxXKHVzZXIpOw0KICAgICAgICAgICAgICAgIFNraWxsU2xvdF9zZXRfcmVtYWluX3NwX2F0X2luZGV4KHNraWxsVy50b0ludDMyKCkscHZQU2tpbGxQb2ludCxDVXNlckNoYXJhY0luZm9fR2V0Q3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXgodXNlcikpOw0KICAgICAgICAgICAgICAgIENVc2VyX3NlbmRfc2tpbGxfaW5mbyh1c2VyKTsNCiAgICAgICAgICAgICAgICB2YXIgcHJlbWl1bUxldGhlTWFuYWdlciA9IENHYW1lTWFuYWdlcl9HZXRQcmVtaXVtTGV0aGVNYW5hZ2VyKEdfQ0dhbWVNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgICAgIGlmKENVc2VyX2lzQWZmZWN0ZWRQcmVtaXVtKHVzZXIudG9JbnQzMigpLDMzKSE9MCl7DQogICAgICAgICAgICAgICAgICAgIGlmKHByZW1pdW1MZXRoZU1hbmFnZXIhPTAgJiYgQ1VzZXJfaXNBZmZlY3RlZFByZW1pdW0odXNlci50b0ludDMyKCksMzMpIT0wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4ID0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY1NraWxsVHJlZUluZGV4KHVzZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgQ1ByZW1pdW1MZXRoZU1hbmFnZXJfSW5pdExldGhlU2tpbGwocHJlbWl1bUxldGhlTWFuYWdlciwgdXNlciwgY3VyQ2hhcmFjU2tpbGxUcmVlSW5kZXgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2UgaWYocHJlbWl1bUxldGhlTWFuYWdlciE9MCl7DQogICAgICAgICAgICAgICAgICAgIGN1ckNoYXJhY1NraWxsVHJlZUluZGV4ID0gQ1VzZXJDaGFyYWNJbmZvX0dldEN1ckNoYXJhY1NraWxsVHJlZUluZGV4KHVzZXIpOw0KICAgICAgICAgICAgICAgICAgICBDUHJlbWl1bUxldGhlTWFuYWdlcl9VcGRhdGVCYWNrdXBTa2lsbEZsYWcocHJlbWl1bUxldGhlTWFuYWdlcix1c2VyLGN1ckNoYXJhY1NraWxsVHJlZUluZGV4KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDIzOg0KICAgICAgICAgICAgdmFyIHZsb2czID0gTWVtb3J5LmFsbG9jKDE2KTsNCiAgICAgICAgICAgIHZhciBjaGFyY05hbWUgPSAnJzsNCiAgICAgICAgICAgIHZhciBjaGFyY05hbWVWYWwgPSBDVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTmFtZShzdE5vdGlmeUluZ2FtZUFESW5mbyk7DQogICAgICAgICAgICBpZighY2hhcmNOYW1lVmFsLmlzTnVsbCgpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNoYXJjTmFtZSA9ICBjaGFyY05hbWVWYWwucmVhZFV0ZjhTdHJpbmcoLTEpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY015VHJhY2VfY015VHJhY2UodmxvZzMsTWVtb3J5LmFsbG9jVXRmOFN0cmluZygidm9pZCBDVXNlcjo6aW5jcmVhc2Vfc3RhdHVzKHNob3J0IGludCkiKSwxOTQ2NiwwKTsNCiAgICAgICAgICAgIGNNeVRyYWNlX29wZXJhdG9yKHZsb2czLnRvSW50MzIoKSxNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCJPTkVfREFZX0xFVEhFIDogQlVZX1NLSUxMX0NPTkZJUk1fVElDS0VULCBjaGFyKCVzKSwgY2hhcl9ubyglZCksIHN0eWxlKCVkKSIpLE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcoY2hhcmNOYW1lKSk7DQogICAgICAgICAgICB2YXIgcHJlbWl1bUxldGhlTWFuYWdlciA9IENHYW1lTWFuYWdlcl9HZXRQcmVtaXVtTGV0aGVNYW5hZ2VyKEdfQ0dhbWVNYW5hZ2VyKCkpOw0KICAgICAgICAgICAgaWYocHJlbWl1bUxldGhlTWFuYWdlciE9MCl7DQogICAgICAgICAgICAgICAgQ1ByZW1pdW1MZXRoZU1hbmFnZXJfQ29uZmlybVNraWxsUmVxKHByZW1pdW1MZXRoZU1hbmFnZXIsdXNlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICBjYXNlIDI1Og0KICAgICAgICAgICAgdmFyIGl2ZW5XID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY0ludmVuVyh1c2VyKTsNCiAgICAgICAgICAgIEF2YXRhckNvaW5fQWRkKGl2ZW5XLmFkZCgxNjI0KSxndWlsZEV4cEJvb2spOw0KICAgICAgICAgICAgQXZhdGFyQ29pbl9TYXZlVG9EQih1c2VyKTsNCiAgICAgICAgICAgIEF2YXRhckNvaW5fU2VuZFN5bmNQYWNrZXQodXNlcik7DQogICAgICAgICAgICBBdmF0YXJDb2luX0hpc3RvcnlMb2dfQWRkTG9nKHVzZXIscHRyKGd1aWxkRXhwQm9vaykpOw0KICAgICAgICAgICAgZ290bzMyKHVzZXIsYnVmZix2MTg0LGd1aWxkRXhwQm9vayxzbG9mKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIGdvdG8zMih1c2VyLGJ1ZmYsdjE4NCxndWlsZEV4cEJvb2ssc2xvZik7DQogICAgICAgICAgICByZXR1cm47DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBnb3RvMzIodXNlcixidWZmLHYxODQsZ3VpbGRFeHBCb29rLHNsb2Ypew0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9jbGVhcihidWZmKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2hlYWRlcihidWZmLCAxLCAzMik7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIDEpOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgc2xvZik7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9ieXRlKGJ1ZmYsIHYxODQpOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfaW50KGJ1ZmYsIGd1aWxkRXhwQm9vayk7DQogICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9zaG9ydChidWZmLCAwKTsNCiAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIDApOw0KICAgIEludGVyZmFjZVBhY2tldEJ1Zl9maW5hbGl6ZShidWZmLCAxKTsNCiAgICBDVXNlcl9TZW5kKHVzZXIsIGJ1ZmYpOw0KICAgIGlmKHVzZXIuYWRkKDE0NDM2OSo0KS5yZWFkVTMyKCkgPT0gNSl7DQogICAgICAgIHZhciBwYXJ0eSA9IENVc2VyX0dldFBhcnR5KHVzZXIpOw0KICAgICAgICBpZihwYXJ0eSE9MCl7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfY2xlYXIoYnVmZik7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2hlYWRlcihidWZmLCAwLCAyKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfYnl0ZShidWZmLCAxKTsNCiAgICAgICAgICAgIEludGVyZmFjZVBhY2tldEJ1Zl9wdXRfc2hvcnQoYnVmZiwgMSk7DQogICAgICAgICAgICBDVXNlcl9tYWtlX2Jhc2ljX2luZm8odXNlciwgYnVmZiwgMSk7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfZmluYWxpemUoYnVmZiwgMSk7DQogICAgICAgICAgICBDUGFydHlfc2VuZF90b19wYXJ0eShwYXJ0eSwgYnVmZik7DQogICAgICAgIH0NCiAgICB9ZWxzZSBpZih1c2VyLmFkZCgxNDQzNjkqNCkucmVhZFUzMigpID09IDgpew0KICAgICAgICB2YXIgd2FyUm9vbSA9IENVc2VyX0dldFdhclJvb20odXNlcik7DQogICAgICAgIGlmKHdhclJvb20hPTApew0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2NsZWFyKGJ1ZmYpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX3B1dF9oZWFkZXIoYnVmZiwgMCwgMik7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X2J5dGUoYnVmZiwgMSk7DQogICAgICAgICAgICBJbnRlcmZhY2VQYWNrZXRCdWZfcHV0X3Nob3J0KGJ1ZmYsIDEpOw0KICAgICAgICAgICAgQ1VzZXJfbWFrZV9iYXNpY19pbmZvKHVzZXIsIGJ1ZmYsIDEpOw0KICAgICAgICAgICAgSW50ZXJmYWNlUGFja2V0QnVmX2ZpbmFsaXplKGJ1ZmYsIDEpOw0KICAgICAgICAgICAgV2FyUm9vbV9TZW5kVG9Sb29tKHdhclJvb20sIGJ1ZmYpOw0KICAgICAgICB9DQogICAgfQ0KICAgIFBhY2tldEd1YXJkX2ZyZWVfUGFja2V0R3VhcmQoYnVmZik7DQp9DQoNCi8v6K6+572u5pyA5aSn562J57qnDQpmdW5jdGlvbiBzZXRNYXhVcEdyYWRlKG1heExldmVsKXsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g6K6+572u5pyA5aSn562J57qnIiArIG1heExldmVsKQ0KICAgIGlmKG1heExldmVsKSB7DQogICAgICAgIGNhbGN1cmF0ZVVzZXJNYXhMZXZlbChtYXhMZXZlbCk7DQogICAgICAgIHNldFVzZXJNYXhMZXZlbChtYXhMZXZlbCk7DQogICAgICAgIGlzVGhlcmVEYWlseVRyYWluaW5nUXVlc3RMaXN0KG1heExldmVsKTsNCiAgICAgICAgY2FsTGV2ZWxVcEl0ZW1DaGVjayhtYXhMZXZlbCk7DQogICAgICAgIGdldExldmVsU2VjdGlvbkV4cCgpOw0KICAgICAgICBnZXRTcEF0TGV2ZWxVcChtYXhMZXZlbCk7DQogICAgICAgIHNldExldmVsRXhwKG1heExldmVsKTsNCiAgICAgICAgc2V0UmV3YXJkU3AobWF4TGV2ZWwpOw0KICAgICAgICBjaGVja0xldmVsVXAobWF4TGV2ZWwpOw0KICAgICAgICBnYWluRXhwU3AobWF4TGV2ZWwpOw0KICAgICAgICBvbkxldmVsVXAobWF4TGV2ZWwpOw0KICAgICAgICBpbmNyZWFzZVN0YXR1cyhtYXhMZXZlbCk7DQogICAgICAgIGdldFJldHVyblVzZXJMZXZlbEtleShtYXhMZXZlbCkNCiAgICB9DQp9IA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9FTkQg6K6+572u5pyA5aSn562J57qnLOivtOaYjjrorr7nva7mnIDlpKfnrYnnuqctLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KIA0KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0JFR0lOIOWFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingSwg6K+05piOOuWFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiANCiANCi8v5YWB6K646LWb5Yip5Lqa5oi/6Ze055qE5Lq65LqS55u45Y+v6KeBDQpmdW5jdGlvbiBzaGFyZV9zZXJpYV9yb29tKCkgew0KICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuWFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingSIpDQogICAgLy9Ib29rIEFyZWE6Omluc2VydF91c2VyDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg2QzI1QTYpLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgIC8v5L+u5pS55qCH5b+X5L2NLCDorqnmnI3liqHlmajlub/mkq3otZvliKnkuprml4Xppobmtojmga8NCiAgICAgICAgICAgIGFyZ3NbMF0uYWRkKDB4NjgpLndyaXRlSW50KDApOw0KICAgICAgICB9LA0KICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiAocmV0dmFsKSB7DQogICAgICAgIH0NCiAgICB9KTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDlhYHorrjotZvliKnkuprmiL/pl7TnmoTkurrkupLnm7jlj6/op4Es6K+05piOOuWFgeiuuOi1m+WIqeS6muaIv+mXtOeahOS6uuS6kuebuOWPr+ingS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4gKzEz5Lul5LiK5by65YyW5Yi45peg6ZyA5bCP6YCALCDor7TmmI46KzEz5Lul5LiK5by65YyW5Yi45peg6ZyA5bCP6YCALS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8vKzEz5Lul5LiK5by65YyW5Yi45peg6ZyA5bCP6YCADQoNCmZ1bmN0aW9uIGVuaGFuY2VtZW50X2xldmVsXzEzX25vX2V4aXQoKSB7DQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDA4MEZDODUwKSwgew0KICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoYXJncykgew0KICAgICAgICAgICAgdGhpcy5lcXVpUG9zID0gYXJnc1syXS5hZGQoMjcpLnJlYWRVMTYoKTsNCiAgICAgICAgICAgIHRoaXMudXNlciA9IGFyZ3NbMV07DQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCiAgICAgICAgICAgIENVc2VyX1NlbmRVcGRhdGVJdGVtTGlzdCh0aGlzLnVzZXIsIDEsIDAsIHRoaXMuZXF1aVBvcyk7DQogICAgICAgIH0NCiAgICB9KTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCArMTPku6XkuIrlvLrljJbliLjml6DpnIDlsI/pgIAs6K+05piOOisxM+S7peS4iuW8uuWMluWIuOaXoOmcgOWwj+mAgC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4ganNvbuexu+Wei+a2iOaBr+WkhOeQhiwg6K+05piOOmpzb27mtojmga/lpITnkIblh73mlbAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogDQovLyBqc29u57G75Z6L55qE5raI5oGv5aSE55CGDQpmdW5jdGlvbiBleGVjSnNvbk1lc3NhZ2UocGFyYW1Kc29uKSB7DQogICAgY29uc29sZS5sb2coIuaOpeaUtuWIsGpzb27mtojmga86IitKU09OLnN0cmluZ2lmeShwYXJhbUpzb24pKTsNCiAgICAvL+WIt+aWsOmFjee9rg0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnZmx1c2hfY29uZicpew0KICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PiBmbHVzaF9jb25mIik7DQogICAgICAgIGxvYWRfY29uZmlnKGdsb2JhbF9jaGFubmVsKTsNCiAgICAgICAgaW5pdEZvckNvbmZpZygpOw0KICAgIH0NCiAgICAvL+WPkemAgemCruS7tg0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnc2VuZF9tYWlsJyl7DQogICAgICAgIHZhciBzZW5kTWFpbER0byA9IHBhcmFtSnNvbi5kYXRhOw0KICAgICAgICB2YXIgaXRlbUxpc3QgPSBzZW5kTWFpbER0by5pdGVtTGlzdDsNCiAgICAgICAgdmFyIG5ld0l0ZW1MaXN0ID0gW107DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbUxpc3QubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgICAgIHZhciB0ZW0gPSBbXTsNCiAgICAgICAgICAgIHRlbS5wdXNoKGl0ZW1MaXN0W2ldLml0ZW1JZCk7DQogICAgICAgICAgICB0ZW0ucHVzaChpdGVtTGlzdFtpXS5jb3VudCk7DQogICAgICAgICAgICBuZXdJdGVtTGlzdC5wdXNoKHRlbSk7DQogICAgICAgIH0NCiAgICAgICAgYXBpX1dvbmdXb3JrX0NNYWlsQm94SGVscGVyX1JlcURCU2VuZE5ld1N5c3RlbU11bHRpTWFpbChzZW5kTWFpbER0by5jaGFyYWNObyxzZW5kTWFpbER0by50aXRsZSxzZW5kTWFpbER0by5jb250ZW50LHNlbmRNYWlsRHRvLmdvbGQsbmV3SXRlbUxpc3QpOw0KICAgIH0NCiAgICAvL+WPkemAgeWFrOWRig0KICAgIGlmKHBhcmFtSnNvbi50eXBlID09PSAnc2VuZF9ub3RpY2UnKXsNCiAgICAgICAgdmFyIG1lc3NhZ2UgPSBwYXJhbUpzb24uZGF0YTsNCiAgICAgICAgcHVzaFNlbmROb3RpUGFja2V0TWVzc2FnZShtZXNzYWdlLDE2KTsNCiAgICB9DQp9IA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9FTkQganNvbuexu+Wei+a2iOaBr+WkhOeQhizor7TmmI46anNvbua2iOaBr+WkhOeQhuWHveaVsC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5Y+R6YCB6YKu5Lu2LCDor7TmmI465Y+R6YCB6YKu5Lu2LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIA0KDQoNCi8v5Y+R57O757uf6YKu5Lu2KOWkmumBk+WFtyko6KeS6ImyY2hhcmFjX25vLCDpgq7ku7bmoIfpopgsIOmCruS7tuato+aWhywg6YeR5biB5pWw6YePLCDpgZPlhbfliJfooagpDQpmdW5jdGlvbiBhcGlfV29uZ1dvcmtfQ01haWxCb3hIZWxwZXJfUmVxREJTZW5kTmV3U3lzdGVtTXVsdGlNYWlsKHRhcmdldF9jaGFyYWNfbm8sIHRpdGxlLCB0ZXh0LCBnb2xkLCBpdGVtX2xpc3QpIHsNCiAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g5Y+R57O757uf6YKu5Lu2KOWkmumBk+WFtykiKQ0KICAgIC8v5re75Yqg6YGT5YW36ZmE5Lu2DQogICAgdmFyIHZlY3RvciA9IE1lbW9yeS5hbGxvYygxMDApOw0KICAgIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF92ZWN0b3IodmVjdG9yKTsNCiAgICBzdGRfdmVjdG9yX3N0ZF9wYWlyX2ludF9pbnRfY2xlYXIodmVjdG9yKTsNCg0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbV9saXN0Lmxlbmd0aDsgKytpKSB7DQogICAgICAgIHZhciBpdGVtX2lkID0gTWVtb3J5LmFsbG9jKDQpOyAgICAgICAgICAvL+mBk+WFt2lkDQogICAgICAgIHZhciBpdGVtX2NudCA9IE1lbW9yeS5hbGxvYyg0KTsgICAgICAgICAvL+mBk+WFt+aVsOmHjw0KDQogICAgICAgIGl0ZW1faWQud3JpdGVJbnQoaXRlbV9saXN0W2ldWzBdKTsNCiAgICAgICAgaXRlbV9jbnQud3JpdGVJbnQoaXRlbV9saXN0W2ldWzFdKTsNCg0KICAgICAgICB2YXIgcGFpciA9IE1lbW9yeS5hbGxvYygxMDApOw0KICAgICAgICBzdGRfbWFrZV9wYWlyX2ludF9pbnQocGFpciwgaXRlbV9pZCwgaXRlbV9jbnQpOw0KDQogICAgICAgIHN0ZF92ZWN0b3Jfc3RkX3BhaXJfaW50X2ludF9wdXNoX2JhY2sodmVjdG9yLCBwYWlyKTsNCiAgICB9DQoNCiAgICAvL+mCruS7tuaUr+aMgTEw5Liq6YGT5YW36ZmE5Lu25qC85a2QDQogICAgdmFyIGFkZGl0aW9uX3Nsb3RzID0gTWVtb3J5LmFsbG9jKDEwMDApOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7ICsraSkgew0KICAgICAgICBJbnZlbl9JdGVtX0ludmVuX0l0ZW0oYWRkaXRpb25fc2xvdHMuYWRkKGkgKiA2MSkpOw0KICAgIH0NCiAgICBXb25nV29ya19DTWFpbEJveEhlbHBlcl9NYWtlU3lzdGVtTXVsdGlNYWlsUG9zdGFsKHZlY3RvciwgYWRkaXRpb25fc2xvdHMsIDEwKTsNCg0KDQogICAgdmFyIHRpdGxlX3B0ciA9IE1lbW9yeS5hbGxvY1V0ZjhTdHJpbmcodGl0bGUpOyAgICAgIC8v6YKu5Lu25qCH6aKYDQogICAgdmFyIHRleHRfcHRyID0gTWVtb3J5LmFsbG9jVXRmOFN0cmluZyh0ZXh0KTsgICAgICAgIC8v6YKu5Lu25q2j5paHDQogICAgdmFyIHRleHRfbGVuID0gc3RybGVuKHRleHRfcHRyKTsgICAgICAgICAgICAgICAgICAgIC8v6YKu5Lu25q2j5paH6ZW/5bqmDQoNCiAgICAvL+WPkemCruS7tue7meinkuiJsg0KICAgIFdvbmdXb3JrX0NNYWlsQm94SGVscGVyX1JlcURCU2VuZE5ld1N5c3RlbU11bHRpTWFpbCh0aXRsZV9wdHIsIGFkZGl0aW9uX3Nsb3RzLCBpdGVtX2xpc3QubGVuZ3RoLCBnb2xkLCB0YXJnZXRfY2hhcmFjX25vLCB0ZXh0X3B0ciwgdGV4dF9sZW4sIDAsIDk5LCAxKTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDlj5HpgIHpgq7ku7Ys6K+05piOOuWPkemAgemCruS7ti0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g6Z2eanNvbuexu+Wei+a2iOaBr+WkhOeQhiwg6K+05piOOumdnmpzb27mtojmga/lpITnkIblh73mlbAJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIA0KLy8g6Z2eanNvbuagvOW8j+eahOa2iOaBr+WkhOeQhumAu+i+kQ0KZnVuY3Rpb24gZXhlY05vSnNvbk1lc3NhZ2UobWVzc2FnZVN0cikgew0KICBjb25zb2xlLmxvZygi5o6l5pS25Yiw6Z2eanNvbua2iOaBrzoiKyBtZXNzYWdlU3RyKTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDpnZ5qc29u57G75Z6L5raI5oGv5aSE55CGLOivtOaYjjrpnZ5qc29u5raI5oGv5aSE55CG5Ye95pWwCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5a6i5oi356uv5Li05pe25o+Q5Y2H5oqA6IO9562J57qnLCDor7TmmI465a6i5oi356uv5Li05pe25o+Q5Y2H5oqA6IO9562J57qnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8v5a6i5oi356uv5Li05pe25o+Q5Y2H5oqA6IO9562J57qnDQoNCkludGVyY2VwdG9yLmF0dGFjaChwdHIoMHg4NjZDNDZBKSwgew0KICAgIG9uRW50ZXI6IGZ1bmN0aW9uIChhcmdzKSB7DQogICAgICAgIC8v6KeS6Imy5oqA6IO95L+h5oGvDQogICAgICAgIHRoaXMuc2tpbGxfcHRyID0gQ1VzZXJDaGFyYWNJbmZvX2dldEN1ckNoYXJhY1NraWxsUihhcmdzWzBdKTsNCiAgICAgICAgLy/kv53lrZjljp/lp4vmioDog73kv6Hmga8NCiAgICAgICAgdGhpcy5vbGRfc2tpbGxfaW5mbyA9IHRoaXMuc2tpbGxfcHRyLnJlYWRCeXRlQXJyYXkoMjAzICogMzIpOw0KICAgICAgICBpZiAoZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnc2tpbGxVcGdyYWRpbmcnXSA+IDApIHsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PuWuouaIt+err+S4tOaXtuaPkOWNh+aKgOiDveetiee6pyIgKyAnPT0+JyArIGdhbWVfY29uZmlnWydza2lsbFVwZ3JhZGluZyddKQ0KICAgICAgICAgICAgLy/kuLTml7bkv67mlLnmioDog73nrYnnuqcNCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IDIwMzsgKytpKSB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2tpbGxfcHRyLmFkZCgyICogKGkgKyAzMikgKyA2KS5yZWFkVTgoKSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgb2xkX3NraWxsX2xldmVsID0gdGhpcy5za2lsbF9wdHIuYWRkKDIgKiAoaSArIDMyKSArIDcpLnJlYWRVOCgpOw0KICAgICAgICAgICAgICAgICAgICAvL+aJgOacieaKgOiDveetiee6pys1DQogICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpbGxfcHRyLmFkZCgyICogKGkgKyAzMikgKyA3KS53cml0ZVU4KG9sZF9za2lsbF9sZXZlbCArIDUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0sDQogICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICAvL+i/mOWOn+aKgOiDveetiee6pw0KICAgICAgICB0aGlzLnNraWxsX3B0ci53cml0ZUJ5dGVBcnJheSh0aGlzLm9sZF9za2lsbF9pbmZvKTsNCiAgICB9DQp9KTsNCiANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOWuouaIt+err+S4tOaXtuaPkOWNh+aKgOiDveetiee6pyzor7TmmI465a6i5oi356uv5Li05pe25o+Q5Y2H5oqA6IO9562J57qnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDlvLrliLblvIDlkK/mt7HmuIrmqKHlvI8sIOivtOaYjjrlvLrliLblvIDlkK/mt7HmuIrmqKHlvI8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogIC8v5byA5ZCv5rex5riK5qih5byPDQpJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDg1YTA5NTQpLCB7DQogICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgaWYgKGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ3N0YXJ0SGVsbFBhcnR5J10gPT09ICd0cnVlJykgew0KICAgICAgICAgICAgYXJnc1szXSA9IHB0cigxKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT09PT09PT09PT09PT09PT09PiDlvLrliLblvIDlkK/mt7HmuIrmqKHlvI8iKQ0KICAgICAgICB9DQogICAgfQ0KfSk7DQogDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDlvLrliLblvIDlkK/mt7HmuIrmqKHlvI8s6K+05piOOuW8uuWItuW8gOWQr+a3sea4iuaooeW8jy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5rex5riK5by65Yi26Z2e5bi45Zuw6Zq+LCDor7TmmI465rex5riK5by65Yi26Z2e5bi45Zuw6Zq+LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIA0KDQpJbnRlcmNlcHRvci5hdHRhY2gocHRyKDB4MDgyRkZBMkUpLCB7DQogICAgb25MZWF2ZTogZnVuY3Rpb24gKHJldHZhbCkgew0KICAgICAgICBpZiAoZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnc3RhcnRIZWxsUGFydHlWZXJ5bWlzZXJhYmxlJ10gPT09ICd0cnVlJykgew0KICAgICAgICAgICAgcmV0dmFsLnJlcGxhY2UoMSk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT4g5rex5riK5by65Yi26Z2e5bi45Zuw6Zq+IikNCiAgICAgICAgfQ0KICAgIH0NCn0pDQoNCiANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOa3sea4iuW8uuWItumdnuW4uOWbsOmavizor7TmmI465rex5riK5by65Yi26Z2e5bi45Zuw6Zq+LS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDmjZXojrfnjqnlrrbmuLjmiI/kuovku7YsIOivtOaYjjrmjZXojrfnjqnlrrbmuLjmiI/kuovku7YtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/mjZXojrfnjqnlrrbmuLjmiI/kuovku7YNCmZ1bmN0aW9uIGhvb2tfaGlzdG9yeV9sb2coKSB7DQogICAgLy9jSGlzdG9yeVRyYWNlOjpvcGVyYXRvcigpDQogICAgSW50ZXJjZXB0b3IuYXR0YWNoKHB0cigweDg1NEY5OTApLCB7DQoNCiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKGFyZ3MpIHsNCg0KICAgICAgICAgICAgLy/op6PmnpDml6Xlv5flhoXlrrk6ICIxODAwMDAwOCIsMTgwMDAwMDgsRCwxNDU2MzYsIm5pY2tuYW1lIiwxLDcyLDgsMCwxOTIuMTY4LjIwMC4xLDE5Mi4xNjguMjAwLjEsNTA5NjMsMTEsIER1bmdlb25MZWF2ZSwi6b6N5Lq65LmL5aGUIiwwLDAsImFhYmIiLCJhYWJiIiwiTi9BIiwiTi9BIiwiTi9BIg0KICAgICAgICAgICAgdmFyIGhpc3RvcnlfbG9nID0gYXJnc1sxXS5yZWFkVXRmOFN0cmluZygtMSk7DQogICAgICAgICAgICB2YXIgZ3JvdXAgPSBoaXN0b3J5X2xvZy5zcGxpdCgnLCcpOw0KDQogICAgICAgICAgICAvL+inkuiJsuS/oeaBrw0KICAgICAgICAgICAgdmFyIGFjY291bnRfaWQgPSBwYXJzZUludChncm91cFsxXSk7DQogICAgICAgICAgICB2YXIgdGltZV9oaF9tbV9zcyA9IGdyb3VwWzNdOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19uYW1lID0gZ3JvdXBbNF07DQogICAgICAgICAgICB2YXIgY2hhcmFjX25vID0gZ3JvdXBbNV07DQogICAgICAgICAgICB2YXIgY2hhcmFjX2xldmVsID0gZ3JvdXBbNl07DQogICAgICAgICAgICB2YXIgY2hhcmFjX2pvYiA9IGdyb3VwWzddOw0KICAgICAgICAgICAgdmFyIGNoYXJhY19ncm93dHlwZSA9IGdyb3VwWzhdOw0KICAgICAgICAgICAgdmFyIHVzZXJfd2ViX2FkZHJlc3MgPSBncm91cFs5XTsNCiAgICAgICAgICAgIHZhciB1c2VyX3BlZXJfaXAyID0gZ3JvdXBbMTBdOw0KICAgICAgICAgICAgdmFyIHVzZXJfcG9ydCA9IGdyb3VwWzExXTsNCiAgICAgICAgICAgIHZhciBjaGFubmVsX2luZGV4ID0gZ3JvdXBbMTJdOyAgICAgICAgICAgICAgLy/lvZPliY3popHpgZNpZA0KDQogICAgICAgICAgICAvL+eOqeWutua4uOaIj+S6i+S7tg0KICAgICAgICAgICAgdmFyIGdhbWVfZXZlbnQgPSBncm91cFsxM10uc2xpY2UoMSk7ICAgICAgICAvL+WIoOmZpOWkmuS9meepuuagvA0KDQogICAgICAgICAgICAvL+inpuWPkea4uOaIj+S6i+S7tueahOinkuiJsg0KICAgICAgICAgICAgdmFyIHVzZXIgPSBHYW1lV29ybGRfZmluZF91c2VyX2Zyb21fd29ybGRfYnlhY2NpZChHX0dhbWVXb3JsZCgpLCBhY2NvdW50X2lkKTsNCg0KICAgICAgICAgICAgaWYgKHVzZXIuaXNOdWxsKCkpDQogICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAvL+mBk+WFt+WHj+WwkTogIEl0ZW0tLDEsMTAwMDAxMTMsNjMsMSwzLDYzLDAsMCwwLDAsMCwwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwLDAsMCwwMDAwMDAwMDAwMDAwMDAwMDAwMA0KICAgICAgICAgICAgaWYgKGdhbWVfZXZlbnQgPT0gJ0l0ZW0tJykgew0KICAgICAgICAgICAgICAgIHZhciBpdGVtX2lkID0gcGFyc2VJbnQoZ3JvdXBbMTVdKTsgICAgICAgICAgICAgICAgLy/mnKzmrKHmk43kvZzpgZPlhbdpZA0KICAgICAgICAgICAgICAgIHZhciBpdGVtX2NudCA9IHBhcnNlSW50KGdyb3VwWzE3XSk7ICAgICAgICAgICAgICAgLy/mnKzmrKHmk43kvZzpgZPlhbfmlbDph48NCiAgICAgICAgICAgICAgICB2YXIgcmVhc29uID0gcGFyc2VJbnQoZ3JvdXBbMThdKTsgICAgICAgICAgICAgICAgIC8v5pys5qyh5pON5L2c5Y6f5ZugDQoNCg0KICAgICAgICAgICAgICAgIC8vbG9nKCfnjqnlrrZbJyArIGNoYXJhY19uYW1lICsgJ13pgZPlhbflh4/lsJEsIOWOn+WboDonICsgcmVhc29uICsgJyjpgZPlhbdpZD0nICsgaXRlbV9pZCArICcsIOS9v+eUqOaVsOmHjz0nICsgaXRlbV9jbnQpOw0KDQogICAgICAgICAgICAgICAgaWYgKDUgPT0gcmVhc29uKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5Lii5byD6YGT5YW3DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKDMgPT0gcmVhc29uKSB7DQogICAgICAgICAgICAgICAgICAgIC8v5L2/55So6YGT5YW3DQogICAgICAgICAgICAgICAgICAgIC8v6L+Z6YeM5bm25pyq5pS55Y+Y6YGT5YW35Y6f5aeL5pWI5p6cIOWOn+Wni+aViOaenOaIkOWKn+aJp+ihjOWQjuinpuWPkeS4i+mdoueahOS7o+eggQ0KICAgICAgICAgICAgICAgICAgICB1c2VfaXRlbV9oYW5kbGVyKHVzZXIsaXRlbV9pZCkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoOSA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/liIbop6PpgZPlhbcNCiAgICAgICAgICAgICAgICAgICAgLy9kaXNpbnRlZ3JhdGVfaXRlbV9oYW5kbGVyKGl0ZW1faWQpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKDEwID09IHJlYXNvbikgew0KICAgICAgICAgICAgICAgICAgICAvL+S9v+eUqOWxnuaAp+efs+WktA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVfZXZlbnQgPT0gJ0tpbGxNb2InKSB7DQogICAgICAgICAgICAgICAgLy/mnYDmrbvmgKrniakNCiAgICAgICAgICAgICAgICAvL+mtlOazleWwgeWNsOijheWkh+ivjeadoeWNh+e6pw0KICAgICAgICAgICAgICAgIC8vYm9vc3RfcmFuZG9tX29wdGlvbl9lcXUodXNlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdNb25leSsnKSB7DQogICAgICAgICAgICAgICAgdmFyIGN1cl9tb25leSA9IHBhcnNlSW50KGdyb3VwWzE0XSk7ICAgICAgICAgICAgICAgIC8v5b2T5YmN5oyB5pyJ55qE6YeR5biB5pWw6YePDQogICAgICAgICAgICAgICAgdmFyIGFkZF9tb25leSA9IHBhcnNlSW50KGdyb3VwWzE1XSk7ICAgICAgICAgICAgICAgIC8v5pys5qyh6I635b6X6YeR5biB5pWw6YePDQogICAgICAgICAgICAgICAgdmFyIHJlYXNvbiA9IHBhcnNlSW50KGdyb3VwWzE2XSk7ICAgICAgICAgICAgICAgICAgIC8v5pys5qyh6I635b6X6YeR5biB5Y6f5ZugDQoNCiAgICAgICAgICAgICAgICAvL2xvZygn546p5a62WycgKyBjaGFyYWNfbmFtZSArICdd6I635Y+W6YeR5biBLCDljp/lm6A6JyArIHJlYXNvbiArICco5b2T5YmN5oyB5pyJ6YeR5biBPScgKyBjdXJfbW9uZXkgKyAnLCDmnKzmrKHojrflvpfph5HluIHmlbDph489JyArIGFkZF9tb25leSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoNCA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lia/mnKzmi77lj5YNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoNSA9PSByZWFzb24pIHsNCiAgICAgICAgICAgICAgICAgICAgLy/lia/mnKzpgJrlhbPnv7vniYzojrflj5bph5HluIENCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdEdW5nZW9uTGVhdmUnKSB7DQogICAgICAgICAgICAgICAgLy/nprvlvIDlia/mnKwNCiAgICAgICAgICAgICAgICAvL+WIt+WujOWJr+acrOWQjiwg6YeN572u5byC55WMK+aegemZkOelreWdm+asoeaVsA0KICAgICAgICAgICAgICAgIC8vQ1VzZXJfRGltZW5zaW9uSW5vdXRVcGRhdGUodXNlciwgMSwgMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnYW1lX2V2ZW50ID09ICdJdGVtKycpIHsNCiAgICAgICAgICAgICAgICB2YXIgaXRlbV9pZCA9IHBhcnNlSW50KGdyb3VwWzE1XSk7DQogICAgICAgICAgICAgICAgdmFyIGdyb3VwXzE4ID0gcGFyc2VJbnQoZ3JvdXBbMThdKTsNCiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBfMTggPT0gNCkgew0KICAgICAgICAgICAgICAgICAgICAvL+WJr+acrOaNoeS4nOilv+WWiuWWh+WPree7meeCueWIuA0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nX2RhdGEoaXRlbV9pZCwgdXNlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0sDQogICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIChyZXR2YWwpIHsNCg0KICAgICAgICB9DQogICAgfSk7DQp9DQogDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDmjZXojrfnjqnlrrbmuLjmiI/kuovku7Ys6K+05piOOuaNleiOt+eOqeWutua4uOaIj+S6i+S7ti0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g546p5a625L2/55So6YGT5YW35Zue6LCDLCDor7TmmI46546p5a625L2/55So6YGT5YW35Zue6LCDLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIGZ1bmN0aW9uIHVzZV9pdGVtX2hhbmRsZXIodXNlciwgaXRlbV9pZCl7DQogICAgLy8g5Lu75Yqh5riF6Zmk5Yi477yMICDku7vliqHlrozmiJDliLgg5oiQ5bCx5Lu75Yqh5a6M5oiQ5Yi4IOS4u+e6v+etiQ0KDQogICAgLy8gaWYoJzgwNzAnID09IGl0ZW1faWQpDQogICAgLy8gew0KICAgIC8vICAgICAvL+aJgOacieeahOS7u+WKoeWujOaIkOWIuA0KICAgIC8vICAgICBjbGVhcl9hbGxfcXVlc3RfYnlfY2hhcmFjdGVyX2xldmVsKHVzZXIpOw0KICAgIC8vIH0NCiAgICAvLyBpZignNjkwMDAwMTE5JyA9PT0gaXRlbV9pZCkNCiAgICAvLyB7DQogICAgLy8gICAgIC8v5Lul5o6l5Lu75Yqh5a6M5oiQ5Yi4DQogICAgLy8gICAgIGVxdUluaGVyaXQodXNlcik7DQogICAgLy8gfQ0KICAgIC8vIGlmKCc4MDcxJyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g6KOF5aSH57un5om/ICDlroznvo7nu6fmib/lvLrljJbvvIzlop7luYUg77yM5a6d54+gIO+8jOmUu+mAoO+8iOi/mOWPr+S7peWunueOsCArbueahOmUu+mAoOWIuO+8iQ0KICAgIC8vICAgICBlcXVJbmhlcml0KHVzZXIpOw0KICAgIC8vIH0NCg0KICAgIC8vIGlmKCc4MDczJyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g6KOF5aSH6Leo55WMDQogICAgLy8gICAgIGNyb3Nzb3Zlcih1c2VyKTsNCiAgICAvLyB9DQogICAgLy8gaWYoJzIwMjIwOTEyJyA9PSBpdGVtX2lkKXsNCiAgICAvLyAgICAgLy8g5YiG6KejDQogICAgLy8gICAgIGRlY29tcG9zZSh1c2VyKQ0KICAgIC8vIH0NCiAgICAvLyBpZignMTIzMCcgPT0gaXRlbV9pZCl7DQogICAgLy8gICAgIC8vIOmtlOazleWwgeWNsOmHjee9rg0KICAgIC8vICAgICBxYyh1c2VyKQ0KICAgIC8vIH0NCiAgICAvLyBpZignMjc0OTEwMScgPT0gaXRlbV9pZCl7DQogICAgLy8gICAgIC8vIOensOWPt+WQiOaIkA0KICAgIC8vICAgICBjaGhjKHVzZXIpDQogICAgLy8gfQ0KICAgIC8vIGlmKCc2MTAwMDAwMScgPT0gaXRlbV9pZCl7DQogICAgLy8gICAgIC8vIOavj+aXpeS7u+WKoeWujOaIkA0KICAgIC8vICAgICBhcGlfZm9yY2VfY2xlYXJfcXVlc3RfbGlzdCh1c2VyLCBxdWVzdF9saXN0KQ0KICAgIC8vIH0NCiAgICAvLyBpZignODA2OCcgPT0gaXRlbV9pZCl7DQogICAgLy8gICAgIC8vIOWInemYtuW8gueVjOWFpeWcuumHjee9rg0KICAgIC8vICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciwwKQ0KICAgIC8vICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciwxKQ0KICAgIC8vICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciwyKQ0KICAgIC8vIH0NCiAgICAvLyBpZignODA2OScgPT0gaXRlbV9pZCl7DQogICAgLy8gICAgIC8vIOmrmOmYtuW8gueVjOWFpeWcuumHjee9rg0KICAgIC8vICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciwzKQ0KICAgIC8vICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciw0KQ0KICAgIC8vICAgICByZXNldFJlc2V0RGltZW5zaW9uSW5vdXQodXNlciw1KQ0KICAgIC8vIH0NCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDnjqnlrrbkvb/nlKjpgZPlhbflm57osIMs6K+05piOOueOqeWutuS9v+eUqOmBk+WFt+Wbnuiwgy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fQkVHSU4g5Ymv5pys5o2h5Lic6KW/5ZaK5ZaH5Y+t57uZ54K55Yi4LCDor7TmmI465Ymv5pys5o2h5Lic6KW/5ZaK5ZaH5Y+t57uZ54K55Yi4LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIA0KIC8v5Ymv5pys5o2h5Lic6KW/5ZaK5ZaH5Y+t57uZ54K55Yi4DQogDQovL+WJr+acrOaNoeS4nOilv+WWiuWWh+WPree7meeCueWIuA0KZnVuY3Rpb24gcHJvY2Vzc2luZ19kYXRhKGl0ZW1faWQsIHVzZXIpIHsNCiAgICBpZiAoZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnZHVuZ2VvbnNfYWRkX2l0ZW1fbm90aWNlJ10gPT09ICd0cnVlJykgew0KICAgICAgICB2YXIgaXRlbURhdGEgPSBDRGF0YU1hbmFnZXJfZmluZF9pdGVtKEdfQ0RhdGFNYW5hZ2VyKCksIGl0ZW1faWQpOw0KICAgICAgICB2YXIgZXF1UmFyaXR5ID0gQ0l0ZW1fR2V0UmFyaXR5KGl0ZW1EYXRhKTsgLy8g56iA5pyJ5bqmICA+PTMg57KJ6Imy5Lul5LiKDQogICAgICAgIC8v5aSa5bCR56iA5pyJ5bqm5omN5Lya6Kem5Y+RDQogICAgICAgIGlmIChlcXVSYXJpdHkgPj0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnZHVuZ2VvbnNfYWRkX2l0ZW1fbm90aWNlX2VxdVJhcml0eSddKSB7DQogICAgICAgICAgICB2YXIgY2hhcmFjTmFtZSA9IGFwaV9DVXNlckNoYXJhY0luZm9fZ2V0Q3VyQ2hhcmFjTmFtZSh1c2VyKTsNCiAgICAgICAgICAgIGNvbnN0IGl0ZW1OYW1lID0gYXBpX0NJdGVtX0dldEl0ZW1OYW1lKGl0ZW1faWQpOw0KICAgICAgICAgICAgLy/mkq3miqXlhoXlrrkNCiAgICAgICAgICAgIHZhciB0ZXh0ID0gZ2xvYmFsX2NvbmZpZ1snZ2FtZV9jb25maWcnXVsnZHVuZ2VvbnNfYWRkX2l0ZW1fbm90aWNlX3RleHQnXTsNCiAgICAgICAgICAgIC8v5aWW5Yqx54K55Yi45pa55byPDQogICAgICAgICAgICB2YXIgdHlwZSA9IGdsb2JhbF9jb25maWdbJ2dhbWVfY29uZmlnJ11bJ2R1bmdlb25zX2FkZF9pdGVtX25vdGljZV9jYXNoX2NlcmEnXTsNCiAgICAgICAgICAgIGlmICh0eXBlID09IDApIHsNCiAgICAgICAgICAgICAgICAvL+WPquaSreaKpeS4jeWlluWKseeCueWIuA0KICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoIj8xIiwgY2hhcmFjTmFtZSkucmVwbGFjZSgiPzIiLCBpdGVtTmFtZSkucmVwbGFjZSgiPzMiLCB0eXBlKTsNCiAgICAgICAgICAgICAgICBhcGlfR2FtZVdvcmxkX1NlbmROb3RpUGFja2V0TWVzc2FnZSh0ZXh0LCAxNCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAodHlwZSA9PSAxKSB7DQogICAgICAgICAgICAgICAgLy/lpZblirHpmo/mnLrngrnliLgNCiAgICAgICAgICAgICAgICBhcGlfR2FtZVdvcmxkX1NlbmROb3RpUGFja2V0TWVzc2FnZSh0ZXh0LCAxNCk7DQogICAgICAgICAgICAgICAgLy/mnIDlsI/ngrnliLjmlbDph48NCiAgICAgICAgICAgICAgICB2YXIgbWluID0gMTsNCiAgICAgICAgICAgICAgICAvL+acgOWkp+eCueWIuOaVsOmHjw0KICAgICAgICAgICAgICAgIHZhciBtYXggPSA4ODg7DQogICAgICAgICAgICAgICAgdHlwZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjsNCiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCI/MSIsIGNoYXJhY05hbWUpLnJlcGxhY2UoIj8yIiwgaXRlbU5hbWUpLnJlcGxhY2UoIj8zIiwgdHlwZSk7DQogICAgICAgICAgICAgICAgYXBpX3JlY2hhcmdlX2Nhc2hfY2VyYSh1c2VyLCB0eXBlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0eXBlID4gMSkgew0KICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoIj8xIiwgY2hhcmFjTmFtZSkucmVwbGFjZSgiPzIiLCBpdGVtTmFtZSkucmVwbGFjZSgiPzMiLCB0eXBlKTsNCiAgICAgICAgICAgICAgICAvL+WlluWKseiuvue9rueahOeCueWIuOaVsOmHjw0KICAgICAgICAgICAgICAgIGFwaV9HYW1lV29ybGRfU2VuZE5vdGlQYWNrZXRNZXNzYWdlKHRleHQsIDE0KTsNCiAgICAgICAgICAgICAgICBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIHR5cGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KICAgIH0NCiAgICBDVXNlcl9zZW5kX2l0ZW1zcGFjZSh1c2VyLCBJTlZFTlRPUllfVFlQRV9JVEVNKTsNCn0gICANCiAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tRlVOQ1RJT05fRU5EIOWJr+acrOaNoeS4nOilv+WWiuWWh+WPree7meeCueWIuCzor7TmmI465Ymv5pys5o2h5Lic6KW/5ZaK5ZaH5Y+t57uZ54K55Yi4LS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiANCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS1GVU5DVElPTl9CRUdJTiDngrnliLjmiJbku6PluIHliLjlhYXlgLwsIOivtOaYjjrngrnliLjmiJbku6PluIHliLjlhYXlgLwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogDQogLy/ngrnliLjlhYXlgLwgKOemgeatouebtOaOpeS/ruaUuWJpbGxpbmflupPmiYDmnInooajlrZfmrrUsIOeCueWIuOebuOWFs+aTjeS9nOWKoeW/heiwg+eUqOaVsOaNruW6k+WtmOWCqOi/h+eoiyEpDQpmdW5jdGlvbiBhcGlfcmVjaGFyZ2VfY2FzaF9jZXJhKHVzZXIsIGFtb3VudCkNCnsNCiAgICAvL+WFheWAvA0KICAgIFdvbmdXb3JrX0lQR19DSVBHSGVscGVyX0lQR0lucHV0KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIDUsIGFtb3VudCwgcHRyKDB4OEM3RkEyMCksIHB0cigweDhDN0ZBMjApLA0KICAgICAgICBNZW1vcnkuYWxsb2NVdGY4U3RyaW5nKCdHTScpLCBwdHIoMCksIHB0cigwKSwgcHRyKDApKTsNCg0KICAgIC8v6YCa55+l5a6i5oi356uv5YWF5YC857uT5p6cDQogICAgV29uZ1dvcmtfSVBHX0NJUEdIZWxwZXJfSVBHUXVlcnkocHRyKDB4OTQxRjczNCkucmVhZFBvaW50ZXIoKSwgdXNlcik7DQp9DQoNCi8v5Luj5biB5YWF5YC8ICjnpoHmraLnm7TmjqXkv67mlLliaWxsaW5n5bqT5omA5pyJ6KGo5a2X5q61LCDngrnliLjnm7jlhbPmk43kvZzliqHlv4XosIPnlKjmlbDmja7lupPlrZjlgqjov4fnqIshKQ0KZnVuY3Rpb24gYXBpX3JlY2hhcmdlX2Nhc2hfY2VyYV9wb2ludCh1c2VyLCBhbW91bnQpDQp7DQogICAgLy/lhYXlgLwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdJbnB1dFBvaW50KHB0cigweDk0MUY3MzQpLnJlYWRQb2ludGVyKCksIHVzZXIsIGFtb3VudCwgNCwgcHRyKDApLCBwdHIoMCkpOw0KDQogICAgLy/pgJrnn6XlrqLmiLfnq6/lhYXlgLznu5PmnpwNCiAgICBXb25nV29ya19JUEdfQ0lQR0hlbHBlcl9JUEdRdWVyeShwdHIoMHg5NDFGNzM0KS5yZWFkUG9pbnRlcigpLCB1c2VyKTsNCn0gDQogLy8tLS0tLS0tLS0tLS0tLS0tLS0tLUZVTkNUSU9OX0VORCDngrnliLjmiJbku6PluIHliLjlhYXlgLws6K+05piOOueCueWIuOaIluS7o+W4geWIuOWFheWAvC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQogIA0KIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS1JTlRST0RVQ0VfRlVOQ1RJT05TX0VORC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gDQog', 'da_frida_main', '最新脚本20231217');
    </sql>
    </changeSet>
</databaseChangeLog>
